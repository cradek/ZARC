; *******************************************************
; * Interrupt Routines for ZARC Z80 Computer            *
; * Written by: Merlin Skinner                          *
; * Date Started: 30/5/2020                             *
; *******************************************************
;
; Interrupt-related routines.
;
; Routines preserve all registers not required as operands or return
; values except AF unless otherwise stated below.
;
;
monitor         equ 1                   ; Flag part of monitor build
interrupts      equ 1                   ; Flag module for includes
;
;
;
; ************
; * Includes *
; ************
;
                include "macros.i"
                include "z80.i"
                include "monitor.i"
                include "zarc.i"        ; Hardware definitions
                include "io_map.i"      ; I/O addresses mapping
                include "utility.i"     ; Utility functions
                include "time.i"        ; Routines associated with time
                include "cpm.i"         ; CP/M support
;
;
; *************
; * Externals *
; *************
;
; Variables 
                public itenfl   ; Int. enable flag (0 = basic, 1 = normal I/O mode)
                public itdsct   ; DI nest count
;
                extern tikdiv   ; Tick divider
;
; Functions
                public itinit   ; Initialise interrupt variables and set basic I/O mode
                public itstrt   ; Start monitor interrupts
                public itena    ; Enable interrupts if safe
                public itdis    ; Disable interrupts and keep count
                public itsvec   ; Set interrupt vector to point to a new service routine
;
;
; *************
; * Constants *
; *************
;
; None
;
;
; *************
; * Main Code *
; *************
;
                cseg                    ; Code segment
;
; Initialise monitor interrupt variables and set basic I/O mode.
itinit          xor a
                ld (itenfl), a          ; Set int. enable (I/O mode)
                ld (itdsct), a          ; Reset DI nest count
                ret
;
;
; Start monitor interrupts and set normal I/O mode. Vectors to handler routines
; must be set up appropriately.
; Overwrite the default handler with the service routine address.
itstrt          ld a, 1
                ld (itenfl), a          ; Flag interrupts enabled
                xor a
                ld (itdsct), a          ; Reset DI nest count
                ei                      ; Global enable
                ret
;
;
; Enable interrupts if safe. This allows nested disable / enable pairs,
; with interrupts only enabled at the lowest level.
itena           ld a, (itdsct)
; Each itena call should be preceded by one or more calls to itdis,
; so itena with itdsct = 0 is an error.
                and a
                call z, panic           ; System panic on underflow
                dec a
                ld (itdsct), a
                ret nz                  ; Exit if not at lowest level
                ld a, (itenfl)
                and a
                ret z                   ; Exit if not in interrupt mode
                ei
                ret
;
;
; Disable interrupt and keep count.
itdis           di
                ld a, (itdsct)
                inc a
                call z, panic           ; System panic on overflow
                ld (itdsct), a
                ret
;
;
; Set interrupt vector to point to a new service routine.
; Call with:
; A - number of vector to change
; DE - points to the new service routine
itsvec          push hl
                ld hl, INT_VEC_TABLE    ; Base of vector table
                add a                   ; Each entry is two bytes long
                add l
                ld l, a
; HL - vector address
                ld (hl), e              ; LS byte of address
                inc hl
                ld (hl), d              ; MS byte of address
                pop hl
                ret
;
;
;
; *************
; * Variables *
; *************
;
;
; Note: linker "-c" option is used, so no data is initialised here.
                dseg                ; Data segment
;
; 0 = disabled, 1 = normal I/O mode
itenfl          defs 1              ; Int. enable (I/O mode), 
itdsct          defs 1              ; DI nest count
;
                end

