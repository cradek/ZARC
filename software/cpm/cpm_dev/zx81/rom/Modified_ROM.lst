   1:				; ===========================================================
   2:				; An Assembly Listing of the Operating System of the ZX81 ROM
   3:				; ===========================================================
   4:				; -------------------------
   5:				; Last updated: 30/12/2021
   6:				; -------------------------
   7:				;
   8:				; Work in progress.
   9:				; This file will cross-assemble an original version of the "Improved"
  10:				; ZX81 ROM.  The file can be modified to change the behaviour of the ROM
  11:				; when used in emulators although there is no spare space available.
  12:				;
  13:				; The documentation is incomplete and if you can find a copy
  14:				; of "The Complete Spectrum ROM Disassembly" then many routines
  15:				; such as POINTERS and most of the mathematical routines are
  16:				; similar and often identical.
  17:				;
  18:				; I've used the labels from the above book in this file and also
  19:				; some from the more elusive Complete ZX81 ROM Disassembly
  20:				; by the same publishers, Melbourne House.
  21:				;
  22:				; 21/11/2021 (Merlin)
  23:				; Modified to assemble with ZMAC. This version assembles to give the same
  24:				; checksum as the "new" ROM (sum of bytes = 855106).
  25:				;
  26:				; 30/12/2021 (Merlin)
  27:				; Modified to work with the ZX81 emulator on ZARC. The character set space at
  28:				; 0x1e00 is used to provide the required extra code.
  29:				;
  30:				;
  31:				; FLAGS at $4001
  32:				; 0 - set if leading spaces are to be supressed.
  33:				; 1 - set if output goes to printer instead of screen.
  34:				; 2 - cursor mode. 0 = F or K, 1 = G or L.
  35:				; 3 to 5 - not used.
  36:				; 6 - result type: set for numeric, clear for string.
  37:				; 7 - set if running a programme, clear if syntax checking only.
  38:				;
  39:				;
  40:				;
  41:				                title ZX81 ROM
  42:				;
  43:				;
  44:				;
  45:				;
  46:				; ************
  47:				; * Includes *
  48:				; ************
  49:				;
  50:				;
  51:				                include "macros.i"
**** ../../../../includes/macros.i ****
   1:				; ***********************************
   2:				; * ZARC Macro Definitions          *
   3:				; * Written by: Merlin Skinner      *
   4:				; * Date Started: 30/7/2020         *
   5:				; ***********************************
   6:				;
   7:				;
   8:				;
   9:				; **********
  10:				; * Macros *
  11:				; **********
  12:				;
  13:				;
  14:				; Initialise enumeration.
  15:				; The absolute segment is used so the offsets are not marked as relocatable. This
  16:				; avoids "Not relocatable" errors.
  17:				ENUM_START      macro
  18:				                .aseg
  19:				enum_counter    set 0
  20:				                endm
  21:				;
  22:				; Invoke for each item.
  23:				ENUM            macro x
  24:				x               equ enum_counter
  25:				enum_counter    set enum_counter + 1
  26:				                endm
  27:				;
  28:				ENUM_END        macro x
  29:				x               set enum_counter    ; Set label to count of items
  30:				                .cseg
  31:				                endm
  32:				;
  33:				;
  34:				; Initialise a structure. This is used to generate offsets for data structures.
  35:				; The absolute segment is used so the offsets are not marked as relocatable. This
  36:				; avoids "Not relocatable" errors.
  37:				STRUCT          macro
  38:				                .aseg
  39:				str_offset      set 0
  40:				                endm
  41:				;
  42:				; Add a byte entry.
  43:				STR_BYTE        macro x
  44:				x               equ str_offset
  45:				str_offset      set str_offset + 1
  46:				                endm
  47:				;
  48:				; Add a word (16-bit) entry.
  49:				STR_WORD        macro x
  50:				x               equ str_offset
  51:				str_offset      set str_offset + 2
  52:				                endm
  53:				;
  54:				; Add a 3 byte (24-bit) entry.
  55:				STR_24BIT       macro x
  56:				x               equ str_offset
  57:				str_offset      set str_offset + 3
  58:				                endm
  59:				;
  60:				; Add a long (32-bit) entry.
  61:				STR_LONG        macro x
  62:				x               equ str_offset
  63:				str_offset      set str_offset + 4
  64:				                endm
  65:				;
  66:				; Add an arbitrary length entry.
  67:				STR_BLOCK       macro x, size   ; <name>, <size>
  68:				x               equ str_offset
  69:				str_offset      set str_offset + size
  70:				                endm
  71:				;
  72:				; End of structure (used to set size)
  73:				STR_END         macro x
  74:				x               equ str_offset
  75:				                .cseg
  76:				                endm
  77:				;
  78:				;
  79:				; Calculate offsets into jump tables.
  80:				; The absolute segment is used so the offsets are not marked as relocatable. This
  81:				; avoids "Not relocatable" errors.
  82:				JPTBL_START     macro x
  83:				                .aseg
  84:				jptbl_addr      set x               ; Set start address
  85:				                endm
  86:				;
  87:				; Invoke for each item.
  88:				JPTBL_ENTRY     macro x
  89:				x               equ jptbl_addr
  90:				jptbl_addr      set jptbl_addr + 3
  91:				                endm
  92:				;
  93:				; Invoke for a data block in the jump table
  94:				JPTBL_BLOCK     macro x, size   ; <name>, <size>
  95:				x               equ jptbl_addr
  96:				jptbl_addr      set jptbl_addr + size
  97:				                endm
  98:				;
  99:				JPTBL_END       macro x
 100:				x               set jptbl_addr      ; Set label to next address
 101:				                .cseg
 102:				                endm
 103:				;
 104:				;
 105:				; Define bits and masks. This is inspired by the Commodore Amiga BITDEF mechanism.
 106:				; Given:
 107:				; BITDEF I2C_CSR_STOP, 2
 108:				; Yields:
 109:				; I2C_CSR_STOP_BIT  EQU 2       ; Bit number
 110:				; I2C_CSR_STOP_MASK EQU 1<<2    ; Bit mask
 111:				BITDEF          macro n, b      ; <Name>, <bit>
 112:				n`_BIT          equ b
 113:				n`_MASK         equ 1 << b
 114:				                endm
 115:				
**** Modified_ROM.z80 ****
  52:				                include "zx81.i"        ; Project include file
**** ..//zx81.i ****
   1:				; *******************************************************
   2:				; * Serial File Transfer for ZARC Z80 Computer (STran)  *
   3:				; * Include file                                        *
   4:				; * Written by: Merlin Skinner                          *
   5:				; * Date Started: 22/3/2021                             *
   6:				; *******************************************************
   7:				;
   8:				;
   9:				;
  10:				; *************
  11:				; * Constants *
  12:				; *************
  13:				;
  14:				;
  15:				;DEBUG           equ 1                   ; Define to enable debug messages
  16:				;
  17:     -	0040          	STACK_SIZE      equ 64                  ; Stack space allocation
  18:     -	0003          	BREAK_CHAR      equ 'C' - 0x40
  19:     -	0004          	MMAP_ZX81_PAGES equ 4                   ; Number of pages allocated
  20:				;
  21:				; Emulated machine memory map.
  22:     -	0000          	EM_ROM_START    equ 0                   ; Start of ROM
  23:     -	4000          	EM_ROM_SIZE     equ 0x4000
  24:				;
  25:				; ZX81 system variables.
  26:     -	4014          	ZX81_E_LINE     equ 0x4014              ; Pointer to input buffer/workspace
  27:     -	4009          	ZX81_VERSN      equ 0x4009              ; 0x00 to identify ZX81 cassette files
  28:				;
  29:     -	8000          	MON_VIS_VAR     equ MMAP_BANK2_START    ; Start of variables visible to the monitor
  30:     -	1E00          	EM_XFER_START   equ 0x1e00              ; Start of transfer code in emulated space
  31:				
  32:				;
  33:				; CP/M to emulated space command codes. These are passed to the emulated space
  34:				; in the C register.
  35:     -	        	                ENUM_START
  36:     -	        	                ENUM CTOE_RESET         ; Reset the emulated machine
  37:     -	        	                ENUM CTOE_RET           ; Return to caller (continue)
  38:     -	        	                ENUM_END CTOE_SIZE      ; Number of codes
  39:				;
  40:				; Emulated to CP/M space command codes. These are passed to CP/M space
  41:				; in the C register.
  42:     -	        	                ENUM_START
  43:     -	        	                ENUM ETOC_EXIT          ; Terminate the session
  44:     -	        	                ENUM ETOC_DISP          ; Display character (A)
  45:     -	        	                ENUM ETOC_SCROLL        ; Scroll the display
  46:     -	        	                ENUM ETOC_INKEY         ; Fetch keyboard state (DE)
  47:     -	        	                ENUM ETOC_WAIT_KEY      ; Wait for a character from keyboard (DE)
  48:     -	        	                ENUM ETOC_SAVE          ; Save BASIC programme
  49:     -	        	                ENUM ETOC_LOAD          ; Load BASIC programme
  50:     -	        	                ENUM_END CTOE_SIZE      ; Number of codes
  51:				;
  52:				; CTOE_RESET - start the emulated machine from location 0x0000. Parameters:
  53:				;   B - bank 0 CP/M page (for return).
  54:				;
  55:				;
  56:				; **************
  57:				; * Structures *
  58:				; **************
  59:				;
  60:				;
  61:				; Some variables must be visible to the monitor, and therefore cannot be in
  62:				; banks 0 or 1 as these will be paged out by the BIOS mon_call function so it
  63:				; can call the monitor. This application uses bank 2 (0x8000 to 0xdfff) to
  64:				; access the emulator memory space, and have determined that this space is not
  65:				; required either by CP/M or the programme. Hence we can use this space as long
  66:				; as the CP/M page (CPU2) is selected. This structure defines offsets (from
  67:				; MON_VIS_VAR) into this space.
  68:     -	        	                STRUCT
  69:     -	        	                STR_BLOCK MVV_PAGE_NAME, MPA_NAME_LEN  ; Filename
  70:     -	        	                STR_END MVV_SIZE
  71:				
**** Modified_ROM.z80 ****
  53:				                include "memory.i"      ; Memory page allocation
**** ../../../../includes/memory.i ****
   1:				; *******************************************
   2:				; * ZARC Memory Include File                *
   3:				; * Written by: Merlin Skinner              *
   4:				; * Date Started: 24/11/2021                *
   5:				; *******************************************
   6:				;
   7:				;
   8:				; Note that ld80 only considers the first six characters of labels significant.
   9:				;
  10:				; The following conditionals are intended to allow the same include file to be
  11:				; used in the defining module and elsewhere as required. Some includes are used
  12:				; for other applications than the monitor, such as the CP/M BIOS. In these cases,
  13:				; the extern and public statements are not desirable.
  14:				;
  15:     -	0000          	            ifdef monitor           ; Meaningful for monitor build only
  26:				            endif
  27:				;
  28:				; Physical memory constants are found in zarc.i
  29:				;
  30:     -	0004          	MPA_NAME_LEN        equ 4               ; Page owner name length (bytes)
  31:				;
  32:				; Memory map
  33:     -	4000          	MMAP_PAGE_SIZE      equ 0x4000          ; Memory mapping bank / page size
  34:     -	0004          	MMAP_BANKS          equ 4               ; Number of 16 kB banks
  35:     -	0040          	MMAP_PAGES          equ 0x40            ; Number of 16 kB RAM pages
  36:     -	0000          	MMAP_BANK0_START    equ 0x0000
  37:     -	3FFF          	MMAP_BANK0_END      equ 0x3fff
  38:     -	4000          	MMAP_BANK1_START    equ 0x4000
  39:     -	7FFF          	MMAP_BANK1_END      equ 0x7fff
  40:     -	8000          	MMAP_BANK2_START    equ 0x8000
  41:     -	BFFF          	MMAP_BANK2_END      equ 0xbfff
  42:     -	C000          	MMAP_BANK3_START    equ 0xc000
  43:     -	FFFF          	MMAP_BANK3_END      equ 0xffff
  44:				;
  45:				;
  46:				;
  47:				; ****************
  48:				; * Memory Usage *
  49:				; ****************
  50:				;
  51:				;
  52:				; Memory banks setup.
  53:				; 0 (0000 - 3FFF): 3f read only, supervisor - monitor program
  54:				; 1 (4000 - 7FFF): 3e writeable - monitor variables, stacks, buffers etc.
  55:				; 2 (8000 - BFFF): (not used)
  56:				; 3 (C000 - FFFF): (mapped as required)
  57:				;
  58:     -	003F          	MMAP_MON_B0_PAGE    equ 0x3f        ; Page for bank 0
  59:     -	003E          	MMAP_MON_B1_PAGE    equ 0x3e        ; Page for bank 1
  60:				;
  61:     -	0040          	STACKS_SIZE     equ 64              ; Space allocated to normal stacks
  62:				;
  63:     -	7FFF          	HEAP_TOP        equ MMAP_BANK1_END  ; Top (end) of heap space.
  64:				
**** Modified_ROM.z80 ****
  54:				                include "io_map.i"      ; I/O addresses mapping
**** ../../../../includes/io_map.i ****
   1:				; ***********************************
   2:				; * ZARC I/O Definitions            *
   3:				; * Written by: Merlin Skinner      *
   4:				; * Date Started: 3/9/2019          *
   5:				; ***********************************
   6:				
   7:				; *** I/O register address mapping ***
   8:				
   9:				; This should be kept in sync with the Definitions.vhd package file.
  10:     -	0000          	IOA_FPGA_MAJREV equ 0x00        ; FPGA major revision
  11:     -	0001          	IOA_FPGA_MINREV equ 0x01        ; FPGA minor revision
  12:     -	0002          	IOA_CONTROL     equ 0x02        ; System control register
  13:     -	0003          	IOA_FP_SW       equ 0x03        ; Front panel data switches
  14:				
  15:				; Paging
  16:     -	0004          	IOA_MMAP_0      equ 0x04        ; Page, supervisor and protection for bank 0 (0x0000 to 0x3fff)
  17:     -	0005          	IOA_MMAP_1      equ 0x05        ; Page, supervisor and protection for bank 1 (0x4000 to 0x7fff)
  18:     -	0006          	IOA_MMAP_2      equ 0x06        ; Page, supervisor and protection for bank 2 (0x8000 to 0xbfff)
  19:     -	0007          	IOA_MMAP_3      equ 0x07        ; Page, supervisor and protection for bank 3 (0xc000 to 0xffff)
  20:				
  21:				; Interrupts
  22:				; Note: Up to eight interrupts are supported. IM 2 is anticipated, and the
  23:				; fixed vector associated with each interrupt is supplied when the interrupt
  24:				; is serviced. Routine address is “I*256+databus”. Vector supplied is
  25:				; 0xe0 + 2 * interrupt number (0 to 7).
  26:				; Note: addresses 0x09 and 0x0b reserved for use if more than eight interrupt
  27:				; sources are required.
  28:     -	0008          	IOA_INT_EN      equ 0x08        ; Enables
  29:     -	000A          	IOA_INT_PEND    equ 0x0a        ; Pending interrupts
  30:				;
  31:				;NMI
  32:     -	000C          	IOA_NMI_REASONS equ 0x0c        ; NMI reasons flags
  33:				;
  34:				; Serial.
  35:     -	0010          	IOA_SER1_CSR    equ 0x10        ; Port 1 control / status
  36:     -	0011          	IOA_SER1_DATA   equ 0x11        ; Port 1 data
  37:     -	0012          	IOA_SER2_CSR    equ 0x12        ; Port 2 serial control / status
  38:     -	0013          	IOA_SER2_DATA   equ 0x13        ; Port 2 serial data
  39:				
  40:				; RTC (DS1672)
  41:				; I2C, implemented using a byte interface to the CPU. Writing to the data port
  42:				; shifts out a byte. Input puts are shifted into the “other end” of the same
  43:				; register.
  44:     -	0018          	IOA_I2C_CSR     equ 0x18        ; Control
  45:     -	0019          	IOA_I2C_DATA    equ 0x19        ; Data
  46:				;
  47:				; SD Card
  48:				; Uses SPI mode, with a generally similar interface to that of the I2C.
  49:     -	0020          	IOA_SPI_CSR     equ 0x20        ; Control
  50:     -	0021          	IOA_SPI_DATA    equ 0x21        ; Data
  51:				
  52:				; CRC16 / XMODEM and MultiMediaCard CRC16
  53:				; Write to the CRC register to set the initial value. Writing to the input
  54:				; data register updates the CRC.
  55:     -	0024          	IOA_CRC_0       equ 0x24        ; CRC register (low)
  56:     -	0025          	IOA_CRC_1       equ 0x25        ; CRC register (high)
  57:     -	0026          	IOA_CRC_DATA    equ 0x26        ; Input data
  58:				
  59:				; *** Proposed features ***
  60:				; Video
  61:				;IOA_VID_CTRL    equ 0x30;       ; Control (cursor on/off ...)
  62:				;IOA_VID_DATA    equ 0x31;       ; Data
  63:				;IOA_VID_CUR_X   equ 0x32;       ; Cursor X (0 to 127)
  64:				;IOA_VID_CUR_Y   equ 0x33;       ; Cursor Y (0 to 63)
  65:				;IOA_VID_START_L equ 0x34        ; Display start address (low byte)
  66:				;IOA_VID_START_H equ 0x35        ; Display start address (high byte)
  67:				
  68:				; Video palette
  69:				; Each entry consists of 6 bits of colour data. Foreground and background
  70:				; colour pairs are selected from the above palette using eight of the 22
  71:				; control codes in the display character set. This leaves codes for
  72:				; double-height, double-width etc.
  73:				;IOA_VID_PALBG0  equ 0x40        ; Background colour 0
  74:				;IOA_VID_PALFG0  equ 0x41        ; Foreground colour 0
  75:				;IOA_VID_PALBG1  equ 0x42        ; Background colour 1
  76:				;IOA_VID_PALFG1  equ 0x43        ; Foreground colour 1
  77:				;IOA_VID_PALBG2  equ 0x44        ; Background colour 2
  78:				;IOA_VID_PALFG2  equ 0x45        ; Foreground colour 2
  79:				;IOA_VID_PALBG3  equ 0x46        ; Background colour 3
  80:				;IOA_VID_PALFG3  equ 0x47        ; Foreground colour 3
  81:				;IOA_VID_PALBG4  equ 0x48        ; Background colour 4
  82:				;IOA_VID_PALFG4  equ 0x49        ; Foreground colour 4
  83:				;IOA_VID_PALBG5  equ 0x4a        ; Background colour 5
  84:				;IOA_VID_PALFG5  equ 0x4b        ; Foreground colour 5
  85:				;IOA_VID_PALBG6  equ 0x4c        ; Background colour 6
  86:				;IOA_VID_PALFG6  equ 0x4d        ; Foreground colour 6
  87:				;IOA_VID_PALBG7  equ 0x4e        ; Background colour 7
  88:				;IOA_VID_PALFG7  equ 0x4f        ; Foreground colour 7
  89:				
  90:				; Arithmetic
  91:				; Multiply, divide … based on 68000 DIV, DIVU, MUL, MULU.
  92:				; Multiply does A[16] * B[16] => C[32].
  93:				; Divide does A[32] / B[16] => C[32] (16-bit remainder [high bits] and
  94:				; 16-bit quotient [low bits]).
  95:				; Status bits include “complete” and “overflow”.
  96:				;IOA_ARITH_A_L   equ 0x50        ; A register (low)
  97:				;IOA_ARITH_A_H   equ 0x51        ; A register (high)
  98:				;IOA_ARITH_B_L   equ 0x54        ; B register (low)
  99:				;IOA_ARITH_B_H   equ 0x57        ; B register (high)
 100:				;IOA_ARITH_C_0   equ 0x58        ; C register (low)
 101:				;IOA_ARITH_C_1   equ 0x59 
 102:				;IOA_ARITH_C_2   equ 0x5a
 103:				;IOA_ARITH_C_3   equ 0x5b        ; C register (high)
 104:				;IOA_ARITH_CSR   equ 0x5c        ; Command / status
 105:				
 106:				
 107:				; *** Register bits allocation ***
 108:				
 109:				; IOA_CONTROL register
 110:     -	        	BITDEF SYSCTRL_TRARM, 0         ; 1 arms the trace interrupt
 111:     -	        	BITDEF SYSCTRL_MMAP, 1          ; 1 enables memory mapping
 112:     -	        	BITDEF SYSCTRL_NMCLR, 2         ; NMI mapping clear
 113:     -	        	BITDEF SYSCTRL_MAPARM, 3        ; NMI out arm
 114:     -	        	BITDEF SYSCTRL_MMAPN, 4         ; State of MMAP when an NMI occurred
 115:     -	        	BITDEF SYSCTRL_TRPRE0, 5        ; Number of prefixes for trace
 116:     -	        	BITDEF SYSCTRL_TRPRE1, 6
 117:     -	        	BITDEF SYSCTRL_RESERVED, 7      ; Unused bit
 118:				;
 119:				; MMAP page registers
 120:     -	        	BITDEF MMAP_PROT, 7             ; Write protection
 121:     -	        	BITDEF MMAP_SUPER, 6            ; I/O enable
 122:     -	003F          	MMAP_PAGE_MASK  equ 0x3f        ; RAM page number bits
 123:				;
 124:				; IOA_INT_EN and IOA_INT_PEND registers.
 125:     -	0008          	INTS_NUM        equ 8           ; Number of possible interrupt sources
 126:     -	        	BITDEF INT_SER1_TX, 0           ; Serial port 1 transmitter buffer is half full or less
 127:     -	        	BITDEF INT_SER1_RX, 1           ; Serial port 1 receiver has data
 128:     -	        	BITDEF INT_SER2_TX, 2           ; Serial port 2 transmitter buffer is half full or less
 129:     -	        	BITDEF INT_SER2_RX, 3           ; Serial port 2 receiver has data
 130:     -	        	BITDEF INT_TICK, 4              ; Regular timekeeping
 131:				;
 132:				; IOA_NMI_REASONS register.
 133:     -	0004          	NMI_REASONS_NUM equ 4           ; Number of reasons for an NMI
 134:     -	        	BITDEF NMI_SWITCH, 0;           ; Front panel switch
 135:     -	        	BITDEF NMI_PROT_VIOL, 1;        ; Write protection violation
 136:     -	        	BITDEF NMI_SUPER_VIOL, 2;       ; Supervisor violation
 137:     -	        	BITDEF NMI_TRACE, 3;            ; Debugger trace (single step)
 138:     -	000F          	NMI_REASONS_ALL equ NMI_SWITCH_MASK + NMI_PROT_VIOL_MASK + NMI_SUPER_VIOL_MASK + NMI_TRACE_MASK
 139:				;
 140:				; Serial CSRs (IOA_SER1_CSR and IOA_SER2_CSR).
 141:     -	        	BITDEF SER_CSR_RX_EMPTY, 0      ; Receiver buffer is empty
 142:     -	        	BITDEF SER_CSR_RX_ALHALF, 1     ; Receiver buffer is at least half full
 143:     -	        	BITDEF SER_CSR_RX_FULL, 2       ; Receiver buffer is full
 144:     -	        	BITDEF SER_CSR_FRAME_ERR, 3     ; Framing error in last character
 145:     -	        	BITDEF SER_CSR_TX_EMPTY, 4      ; Transmitter buffer is empty
 146:     -	        	BITDEF SER_CSR_TX_ALHALF, 5     ; Transmitter buffer is at least half full
 147:     -	        	BITDEF SER_CSR_TX_FULL, 6       ; Transmitter buffer is full
 148:				; Bit 7 is not used.
 149:				;
 150:				; I2C (Inter-Integrated Circuit) master interface. Used for RTC (DS1672).
 151:				; Bits in IOA_I2C_CSR
 152:     -	        	BITDEF I2C_CSR_ACKN, 0          ; (Read / write) acknowledge from receiving device
 153:     -	        	BITDEF I2C_CSR_START, 1         ; (Write only) trigger start sequence
 154:     -	        	BITDEF I2C_CSR_STOP, 2          ; (Write only) trigger stop sequence
 155:     -	        	BITDEF I2C_CSR_BUSY, 7          ; (Read only) transceiver busy
 156:				;
 157:				; SPI (Serial Peripheral Interface) master interface. Used for memory card.
 158:				; Bits in IOA_SPI_CSR
 159:     -	        	BITDEF SPI_CSR_FAST, 0          ; (Read / write) SPI speed select
 160:     -	        	BITDEF SPI_CSR_MC_SS, 1         ; (Read / write) memory card slave select
 161:     -	        	BITDEF SPI_CSR_BUSY, 7          ; (Read only) transceiver busy
 162:				
**** Modified_ROM.z80 ****
  55:				;
  56:				;
  57:				;
  58:				; *************
  59:				; * Main Code *
  60:				; *************
  61:				;
  62:				;
  63:				                aseg
  64:     -	0000          	                org 0
  65:				
  66:				;*****************************************
  67:				;** Part 1. RESTART ROUTINES AND TABLES **
  68:				;*****************************************
  69:				
  70:				; -----------
  71:				; THE 'START'
  72:				; -----------
  73:				; All Z80 chips start at location zero.
  74:				; At start-up the Interrupt Mode is 0, ZX computers use Interrupt Mode 1.
  75:				; Interrupts are disabled .
  76:				
  77:				;; START
  78:     -	0000          	L0000:  ;OUT     ($FD),A         ; Turn off the NMI generator if this ROM is 
  79:				                                ; running in ZX81 hardware. This does nothing 
  80:				                                ; if this ROM is running within an upgraded
  81:				                                ; ZX80.
  82:    0+4	0000  00      	        nop                     ; Replaces OUT but maintains addresses
  83:    4+4	0001  00      	        nop
  84:    8+10	0002  01FF7F  	        LD      BC,$7FFF        ; Set BC to the top of possible RAM.
  85:				                                ; The higher unpopulated addresses are used for
  86:				                                ; video generation.
  87:   18+10	0005  C3CB03  	        JP      L03CB           ; Jump forward to RAM-CHECK.
  88:				
  89:				; -------------------
  90:				; THE 'ERROR' RESTART
  91:				; -------------------
  92:				; The error restart deals immediately with an error. ZX computers execute the 
  93:				; same code in runtime as when checking syntax. If the error occurred while 
  94:				; running a program then a brief report is produced. If the error occurred
  95:				; while entering a BASIC line or in input etc., then the error marker indicates
  96:				; the exact point at which the error lies.
  97:				
  98:				;; ERROR-1
  99:   28+16	0008  2A1640  	L0008:  LD      HL,($4016)      ; fetch character address from CH_ADD.
 100:   44+16	000B  221840  	        LD      ($4018),HL      ; and set the error pointer X_PTR.
 101:   60+12	000E  1846    	        JR      L0056           ; forward to continue at ERROR-2.
 102:				
 103:				; -------------------------------
 104:				; THE 'PRINT A CHARACTER' RESTART
 105:				; -------------------------------
 106:				; This restart prints the character in the accumulator using the alternate
 107:				; register set so there is no requirement to save the main registers.
 108:				; There is sufficient room available to separate a space (zero) from other
 109:				; characters as leading spaces need not be considered with a space.
 110:				
 111:				;; PRINT-A
 112:   72+4	0010  A7      	L0010:  AND     A               ; test for zero - space.
 113:   76+10	0011  C2F107  	        JP      NZ,L07F1        ; jump forward if not to PRINT-CH.
 114:				
 115:   86+10	0014  C3F507  	        JP      L07F5           ; jump forward to PRINT-SP.
 116:				
 117:				; ---
 118:				
 119:     -	0017  FF      	        DEFB    $FF             ; unused location.
 120:				
 121:				; ---------------------------------
 122:				; THE 'COLLECT A CHARACTER' RESTART
 123:				; ---------------------------------
 124:				; The character addressed by the system variable CH_ADD is fetched and if it
 125:				; is a non-space, non-cursor character it is returned else CH_ADD is 
 126:				; incremented and the new addressed character tested until it is not a space.
 127:				
 128:				;; GET-CHAR
 129:   96+16	0018  2A1640  	L0018:  LD      HL,($4016)      ; set HL to character address CH_ADD.
 130:  112+7	001B  7E      	        LD      A,(HL)          ; fetch addressed character to A.
 131:				
 132:				;; TEST-SP
 133:  119+4	001C  A7      	L001C:  AND     A               ; test for space.
 134:  123+5+6	001D  C0      	        RET     NZ              ; return if not a space
 135:				
 136:  128+4	001E  00      	        NOP                     ; else trickle through
 137:  132+4	001F  00      	        NOP                     ; to the next routine.
 138:				
 139:				; ------------------------------------
 140:				; THE 'COLLECT NEXT CHARACTER' RESTART
 141:				; ------------------------------------
 142:				; The character address in incremented and the new addressed character is 
 143:				; returned if not a space, or cursor, else the process is repeated.
 144:				
 145:				;; NEXT-CHAR
 146:  136+17	0020  CD4900  	L0020:  CALL    L0049           ; routine CH-ADD+1 gets next immediate
 147:				                                ; character.
 148:  153+12	0023  18F7    	        JR      L001C           ; back to TEST-SP.
 149:				
 150:				; ---
 151:				
 152:     -	0025  FFFFFF  	        DEFB    $FF, $FF, $FF   ; unused locations.
 153:				
 154:				; ---------------------------------------
 155:				; THE 'FLOATING POINT CALCULATOR' RESTART
 156:				; ---------------------------------------
 157:				; this restart jumps to the recursive floating-point calculator.
 158:				; the ZX81's internal, FORTH-like, stack-based language.
 159:				;
 160:				; In the five remaining bytes there is, appropriately, enough room for the
 161:				; end-calc literal - the instruction which exits the calculator.
 162:				
 163:				;; FP-CALC
 164:  165+10	0028  C39D19  	L0028:  JP      L199D           ; jump immediately to the CALCULATE routine.
 165:				
 166:				; ---
 167:				
 168:				;; end-calc
 169:  175+10	002B  F1      	L002B:  POP     AF              ; drop the calculator return address RE-ENTRY
 170:  185+4	002C  D9      	        EXX                     ; switch to the other set.
 171:				
 172:  189+19	002D  E3      	        EX      (SP),HL         ; transfer H'L' to machine stack for the
 173:				                                ; return address.
 174:				                                ; when exiting recursion then the previous
 175:				                                ; pointer is transferred to H'L'.
 176:				
 177:  208+4	002E  D9      	        EXX                     ; back to main set.
 178:  212+10	002F  C9      	        RET                     ; return.
 179:				
 180:				
 181:				; -----------------------------
 182:				; THE 'MAKE BC SPACES'  RESTART
 183:				; -----------------------------
 184:				; This restart is used eight times to create, in workspace, the number of
 185:				; spaces passed in the BC register.
 186:				
 187:				;; BC-SPACES
 188:  222+11	0030  C5      	L0030:  PUSH    BC              ; push number of spaces on stack.
 189:  233+16	0031  2A1440  	        LD      HL,($4014)      ; fetch edit line location from E_LINE.
 190:  249+11	0034  E5      	        PUSH    HL              ; save this value on stack.
 191:  260+10	0035  C38814  	        JP      L1488           ; jump forward to continue at RESERVE.
 192:				
 193:				; -----------------------
 194:				; THE 'INTERRUPT' RESTART
 195:				; -----------------------
 196:				;   The Mode 1 Interrupt routine is concerned solely with generating the central
 197:				;   television picture.
 198:				;   On the ZX81 interrupts are enabled only during the interrupt routine, 
 199:				;   although the interrupt 
 200:				;   This Interrupt Service Routine automatically disables interrupts at the 
 201:				;   outset and the last interrupt in a cascade exits before the interrupts are
 202:				;   enabled.
 203:				;   There is no DI instruction in the ZX81 ROM.
 204:				;   An maskable interrupt is triggered when bit 6 of the Z80's Refresh register
 205:				;   changes from set to reset.
 206:				;   The Z80 will always be executing a HALT (NEWLINE) when the interrupt occurs.
 207:				;   A HALT instruction repeatedly executes NOPS but the seven lower bits
 208:				;   of the Refresh register are incremented each time as they are when any 
 209:				;   simple instruction is executed. (The lower 7 bits are incremented twice for
 210:				;   a prefixed instruction)
 211:				;   This is controlled by the Sinclair Computer Logic Chip - manufactured from 
 212:				;   a Ferranti Uncommitted Logic Array.
 213:				;
 214:				;   When a Mode 1 Interrupt occurs the Program Counter, which is the address in
 215:				;   the upper echo display following the NEWLINE/HALT instruction, goes on the 
 216:				;   machine stack.  193 interrupts are required to generate the last part of
 217:				;   the 56th border line and then the 192 lines of the central TV picture and, 
 218:				;   although each interrupt interrupts the previous one, there are no stack 
 219:				;   problems as the 'return address' is discarded each time.
 220:				;
 221:				;   The scan line counter in C counts down from 8 to 1 within the generation of
 222:				;   each text line. For the first interrupt in a cascade the initial value of 
 223:				;   C is set to 1 for the last border line.
 224:				;   Timing is of the utmost importance as the RH border, horizontal retrace
 225:				;   and LH border are mostly generated in the 58 clock cycles this routine 
 226:				;   takes .
 227:				
 228:				;; INTERRUPT
 229:  270+4	0038  0D      	L0038:  DEC     C               ; (4)  decrement C - the scan line counter.
 230:  274+10	0039  C24500  	        JP      NZ,L0045        ; (10/10) JUMP forward if not zero to SCAN-LINE
 231:				
 232:  284+10	003C  E1      	        POP     HL              ; (10) point to start of next row in display 
 233:				                                ;      file.
 234:				
 235:  294+4	003D  05      	        DEC     B               ; (4)  decrement the row counter. (4)
 236:  298+5+6	003E  C8      	        RET     Z               ; (11/5) return when picture complete to L028B
 237:				                                ;      with interrupts disabled.
 238:				
 239:  303+8	003F  CBD9    	        SET     3,C             ; (8)  Load the scan line counter with eight.  
 240:				                                ;      Note. LD C,$08 is 7 clock cycles which 
 241:				                                ;      is way too fast.
 242:				
 243:				; ->
 244:				
 245:				;; WAIT-INT
 246:  311+9	0041  ED4F    	L0041:  LD      R,A             ; (9) Load R with initial rising value $DD.
 247:				
 248:  320+4	0043  FB      	        EI                      ; (4) Enable Interrupts.  [ R is now $DE ].
 249:				
 250:  324+4	0044  E9      	        JP      (HL)            ; (4) jump to the echo display file in upper
 251:				                                ;     memory and execute characters $00 - $3F 
 252:				                                ;     as NOP instructions.  The video hardware 
 253:				                                ;     is able to read these characters and, 
 254:				                                ;     with the I register is able to convert 
 255:				                                ;     the character bitmaps in this ROM into a 
 256:				                                ;     line of bytes. Eventually the NEWLINE/HALT
 257:				                                ;     will be encountered before R reaches $FF. 
 258:				                                ;     It is however the transition from $FF to 
 259:				                                ;     $80 that triggers the next interrupt.
 260:				                                ;     [ The Refresh register is now $DF ]
 261:				
 262:				; ---
 263:				
 264:				;; SCAN-LINE
 265:  328+10	0045  D1      	L0045:  POP     DE              ; (10) discard the address after NEWLINE as the 
 266:				                                ;      same text line has to be done again
 267:				                                ;      eight times. 
 268:				
 269:  338+5+6	0046  C8      	        RET     Z               ; (5)  Harmless Nonsensical Timing.
 270:				                                ;      (condition never met)
 271:				
 272:  343+12	0047  18F8    	        JR      L0041           ; (12) back to WAIT-INT
 273:				
 274:				;   Note. that a computer with less than 4K or RAM will have a collapsed
 275:				;   display file and the above mechanism deals with both types of display.
 276:				;
 277:				;   With a full display, the 32 characters in the line are treated as NOPS
 278:				;   and the Refresh register rises from $E0 to $FF and, at the next instruction 
 279:				;   - HALT, the interrupt occurs.
 280:				;   With a collapsed display and an initial NEWLINE/HALT, it is the NOPs 
 281:				;   generated by the HALT that cause the Refresh value to rise from $E0 to $FF,
 282:				;   triggering an Interrupt on the next transition.
 283:				;   This works happily for all display lines between these extremes and the 
 284:				;   generation of the 32 character, 1 pixel high, line will always take 128 
 285:				;   clock cycles.
 286:				
 287:				; ---------------------------------
 288:				; THE 'INCREMENT CH-ADD' SUBROUTINE
 289:				; ---------------------------------
 290:				; This is the subroutine that increments the character address system variable
 291:				; and returns if it is not the cursor character. The ZX81 has an actual 
 292:				; character at the cursor position rather than a pointer system variable
 293:				; as is the case with prior and subsequent ZX computers.
 294:				
 295:				;; CH-ADD+1
 296:  355+16	0049  2A1640  	L0049:  LD      HL,($4016)      ; fetch character address to CH_ADD.
 297:				
 298:				;; TEMP-PTR1
 299:  371+6	004C  23      	L004C:  INC     HL              ; address next immediate location.
 300:				
 301:				;; TEMP-PTR2
 302:  377+16	004D  221640  	L004D:  LD      ($4016),HL      ; update system variable CH_ADD.
 303:				
 304:  393+7	0050  7E      	        LD      A,(HL)          ; fetch the character.
 305:  400+7	0051  FE7F    	        CP      $7F             ; compare to cursor character.
 306:  407+5+6	0053  C0      	        RET     NZ              ; return if not the cursor.
 307:				
 308:  412+12	0054  18F6    	        JR      L004C           ; back for next character to TEMP-PTR1.
 309:				
 310:				; --------------------
 311:				; THE 'ERROR-2' BRANCH
 312:				; --------------------
 313:				; This is a continuation of the error restart.
 314:				; If the error occurred in runtime then the error stack pointer will probably
 315:				; lead to an error report being printed unless it occurred during input.
 316:				; If the error occurred when checking syntax then the error stack pointer
 317:				; will be an editing routine and the position of the error will be shown
 318:				; when the lower screen is reprinted.
 319:				
 320:				;; ERROR-2
 321:  424+10	0056  E1      	L0056:  POP     HL              ; pop the return address which points to the
 322:				                                ; DEFB, error code, after the RST 08.
 323:  434+7	0057  6E      	        LD      L,(HL)          ; load L with the error code. HL is not needed
 324:				                                ; anymore.
 325:				
 326:				;; ERROR-3
 327:  441+19	0058  FD7500  	L0058:  LD      (IY+$00),L      ; place error code in system variable ERR_NR
 328:  460+20	005B  ED7B0240	        LD      SP,($4002)      ; set the stack pointer from ERR_SP
 329:  480+17	005F  CD0702  	        CALL    L0207           ; routine SLOW/FAST selects slow mode.
 330:  497+10	0062  C3BC14  	        JP      L14BC           ; exit to address on stack via routine SET-MIN.
 331:				
 332:				; ---
 333:				
 334:     -	0065  FF      	        DEFB    $FF             ; unused.
 335:				
 336:				; ------------------------------------
 337:				; THE 'NON MASKABLE INTERRUPT' ROUTINE
 338:				; ------------------------------------
 339:				;   Jim Westwood's technical dodge using Non-Maskable Interrupts solved the
 340:				;   flicker problem of the ZX80 and gave the ZX81 a multi-tasking SLOW mode 
 341:				;   with a steady display.  Note that the AF' register is reserved for this 
 342:				;   function and its interaction with the display routines.  When counting 
 343:				;   TV lines, the NMI makes no use of the main registers.
 344:				;   The circuitry for the NMI generator is contained within the SCL (Sinclair 
 345:				;   Computer Logic) chip. 
 346:				;   ( It takes 32 clock cycles while incrementing towards zero ). 
 347:				
 348:				;; NMI
 349:				; No NMI generated in the emulator, so this should never be called.
 350:  507+4	0066  08      	L0066:  EX      AF,AF'          ; (4) switch in the NMI's copy of the 
 351:				                                ;     accumulator.
 352:  511+4	0067  3C      	        INC     A               ; (4) increment.
 353:  515+10	0068  FA6D00  	        JP      M,L006D         ; (10/10) jump, if minus, to NMI-RET as this is
 354:				                                ;     part of a test to see if the NMI 
 355:				                                ;     generation is working or an intermediate 
 356:				                                ;     value for the ascending negated blank 
 357:				                                ;     line counter.
 358:				
 359:  525+7+5	006B  2802    	        JR      Z,L006F         ; (12) forward to NMI-CONT
 360:				                                ;      when line count has incremented to zero.
 361:				
 362:				; Note. the synchronizing NMI when A increments from zero to one takes this
 363:				; 7 clock cycle route making 39 clock cycles in all.
 364:				
 365:				;; NMI-RET
 366:  532+4	006D  08      	L006D:  EX      AF,AF'          ; (4)  switch out the incremented line counter
 367:				                                ;      or test result $80
 368:  536+10	006E  C9      	        RET                     ; (10) return to User application for a while.
 369:				
 370:				; ---
 371:				
 372:				;   This branch is taken when the 55 (or 31) lines have been drawn.
 373:				
 374:				;; NMI-CONT
 375:  546+4	006F  08      	L006F:  EX      AF,AF'          ; (4) restore the main accumulator.
 376:				
 377:  550+11	0070  F5      	        PUSH    AF              ; (11) *             Save Main Registers
 378:  561+11	0071  C5      	        PUSH    BC              ; (11) **
 379:  572+11	0072  D5      	        PUSH    DE              ; (11) ***
 380:  583+11	0073  E5      	        PUSH    HL              ; (11) ****
 381:				
 382:				;   the next set-up procedure is only really applicable when the top set of 
 383:				;   blank lines have been generated.
 384:				
 385:  594+16	0074  2A0C40  	        LD      HL,($400C)      ; (16) fetch start of Display File from D_FILE
 386:				                                ;      points to the HALT at beginning.
 387:  610+8	0077  CBFC    	        SET     7,H             ; (8) point to upper 32K 'echo display file'
 388:				
 389:  618+4	0079  76      	        HALT                    ; (1) HALT synchronizes with NMI.  
 390:				                                ; Used with special hardware connected to the
 391:				                                ; Z80 HALT and WAIT lines to take 1 clock cycle.
 392:				
 393:				; ----------------------------------------------------------------------------
 394:				;   the NMI has been generated - start counting. The cathode ray is at the RH 
 395:				;   side of the TV.
 396:				;   First the NMI servicing, similar to CALL            =  17 clock cycles.
 397:				;   Then the time taken by the NMI for zero-to-one path =  39 cycles
 398:				;   The HALT above                                      =  01 cycles.
 399:				;   The two instructions below                          =  19 cycles.
 400:				;   The code at L0281 up to and including the CALL      =  43 cycles.
 401:				;   The Called routine at L02B5                         =  24 cycles.
 402:				;   --------------------------------------                ---
 403:				;   Total Z80 instructions                              = 143 cycles.
 404:				;
 405:				;   Meanwhile in TV world,
 406:				;   Horizontal retrace                                  =  15 cycles.
 407:				;   Left blanking border 8 character positions          =  32 cycles
 408:				;   Generation of 75% scanline from the first NEWLINE   =  96 cycles
 409:				;   ---------------------------------------               ---
 410:				;                                                         143 cycles
 411:				;
 412:				;   Since at the time the first JP (HL) is encountered to execute the echo
 413:				;   display another 8 character positions have to be put out, then the
 414:				;   Refresh register need to hold $F8. Working back and counteracting 
 415:				;   the fact that every instruction increments the Refresh register then
 416:				;   the value that is loaded into R needs to be $F5.      :-)
 417:				;
 418:				;
 419:  622+11	007A  D3FD    	        OUT     ($FD),A         ; (11) Stop the NMI generator.
 420:				
 421:  633+8	007C  DDE9    	        JP      (IX)            ; (8) forward to L0281 (after top) or L028F
 422:				
 423:				; ****************
 424:				; ** KEY TABLES **
 425:				; ****************
 426:				
 427:				; -------------------------------
 428:				; THE 'UNSHIFTED' CHARACTER CODES
 429:				; -------------------------------
 430:				
 431:				;; K-UNSHIFT
 432:     -	007E  3F      	L007E:  DEFB    $3F             ; Z
 433:     -	007F  3D      	        DEFB    $3D             ; X
 434:     -	0080  28      	        DEFB    $28             ; C
 435:     -	0081  3B      	        DEFB    $3B             ; V
 436:     -	0082  26      	        DEFB    $26             ; A
 437:     -	0083  38      	        DEFB    $38             ; S
 438:     -	0084  29      	        DEFB    $29             ; D
 439:     -	0085  2B      	        DEFB    $2B             ; F
 440:     -	0086  2C      	        DEFB    $2C             ; G
 441:     -	0087  36      	        DEFB    $36             ; Q
 442:     -	0088  3C      	        DEFB    $3C             ; W
 443:     -	0089  2A      	        DEFB    $2A             ; E
 444:     -	008A  37      	        DEFB    $37             ; R
 445:     -	008B  39      	        DEFB    $39             ; T
 446:     -	008C  1D      	        DEFB    $1D             ; 1
 447:     -	008D  1E      	        DEFB    $1E             ; 2
 448:     -	008E  1F      	        DEFB    $1F             ; 3
 449:     -	008F  20      	        DEFB    $20             ; 4
 450:     -	0090  21      	        DEFB    $21             ; 5
 451:     -	0091  1C      	        DEFB    $1C             ; 0
 452:     -	0092  25      	        DEFB    $25             ; 9
 453:     -	0093  24      	        DEFB    $24             ; 8
 454:     -	0094  23      	        DEFB    $23             ; 7
 455:     -	0095  22      	        DEFB    $22             ; 6
 456:     -	0096  35      	        DEFB    $35             ; P
 457:     -	0097  34      	        DEFB    $34             ; O
 458:     -	0098  2E      	        DEFB    $2E             ; I
 459:     -	0099  3A      	        DEFB    $3A             ; U
 460:     -	009A  3E      	        DEFB    $3E             ; Y
 461:     -	009B  76      	        DEFB    $76             ; NEWLINE
 462:     -	009C  31      	        DEFB    $31             ; L
 463:     -	009D  30      	        DEFB    $30             ; K
 464:     -	009E  2F      	        DEFB    $2F             ; J
 465:     -	009F  2D      	        DEFB    $2D             ; H
 466:     -	00A0  00      	        DEFB    $00             ; SPACE
 467:     -	00A1  1B      	        DEFB    $1B             ; .
 468:     -	00A2  32      	        DEFB    $32             ; M
 469:     -	00A3  33      	        DEFB    $33             ; N
 470:     -	00A4  27      	        DEFB    $27             ; B
 471:				
 472:				; -----------------------------
 473:				; THE 'SHIFTED' CHARACTER CODES
 474:				; -----------------------------
 475:				
 476:				
 477:				;; K-SHIFT
 478:     -	00A5  0E      	L00A5:  DEFB    $0E             ; :
 479:     -	00A6  19      	        DEFB    $19             ; ;
 480:     -	00A7  0F      	        DEFB    $0F             ; ?
 481:     -	00A8  18      	        DEFB    $18             ; /
 482:     -	00A9  E3      	        DEFB    $E3             ; STOP
 483:     -	00AA  E1      	        DEFB    $E1             ; LPRINT
 484:     -	00AB  E4      	        DEFB    $E4             ; SLOW
 485:     -	00AC  E5      	        DEFB    $E5             ; FAST
 486:     -	00AD  E2      	        DEFB    $E2             ; LLIST
 487:     -	00AE  C0      	        DEFB    $C0             ; ""
 488:     -	00AF  D9      	        DEFB    $D9             ; OR
 489:     -	00B0  E0      	        DEFB    $E0             ; STEP
 490:     -	00B1  DB      	        DEFB    $DB             ; <=
 491:     -	00B2  DD      	        DEFB    $DD             ; <>
 492:     -	00B3  75      	        DEFB    $75             ; EDIT
 493:     -	00B4  DA      	        DEFB    $DA             ; AND
 494:     -	00B5  DE      	        DEFB    $DE             ; THEN
 495:     -	00B6  DF      	        DEFB    $DF             ; TO
 496:     -	00B7  72      	        DEFB    $72             ; cursor-left
 497:     -	00B8  77      	        DEFB    $77             ; RUBOUT
 498:     -	00B9  74      	        DEFB    $74             ; GRAPHICS
 499:     -	00BA  73      	        DEFB    $73             ; cursor-right
 500:     -	00BB  70      	        DEFB    $70             ; cursor-up
 501:     -	00BC  71      	        DEFB    $71             ; cursor-down
 502:     -	00BD  0B      	        DEFB    $0B             ; "
 503:     -	00BE  11      	        DEFB    $11             ; )
 504:     -	00BF  10      	        DEFB    $10             ; (
 505:     -	00C0  0D      	        DEFB    $0D             ; $
 506:     -	00C1  DC      	        DEFB    $DC             ; >=
 507:     -	00C2  79      	        DEFB    $79             ; FUNCTION
 508:     -	00C3  14      	        DEFB    $14             ; =
 509:     -	00C4  15      	        DEFB    $15             ; +
 510:     -	00C5  16      	        DEFB    $16             ; -
 511:     -	00C6  D8      	        DEFB    $D8             ; **
 512:     -	00C7  0C      	        DEFB    $0C             ;  £ 
 513:     -	00C8  1A      	        DEFB    $1A             ; ,
 514:     -	00C9  12      	        DEFB    $12             ; >
 515:     -	00CA  13      	        DEFB    $13             ; <
 516:     -	00CB  17      	        DEFB    $17             ; *
 517:				
 518:				; ------------------------------
 519:				; THE 'FUNCTION' CHARACTER CODES
 520:				; ------------------------------
 521:				
 522:				
 523:				;; K-FUNCT
 524:     -	00CC  CD      	L00CC:  DEFB    $CD             ; LN
 525:     -	00CD  CE      	        DEFB    $CE             ; EXP
 526:     -	00CE  C1      	        DEFB    $C1             ; AT
 527:     -	00CF  78      	        DEFB    $78             ; KL
 528:     -	00D0  CA      	        DEFB    $CA             ; ASN
 529:     -	00D1  CB      	        DEFB    $CB             ; ACS
 530:     -	00D2  CC      	        DEFB    $CC             ; ATN
 531:     -	00D3  D1      	        DEFB    $D1             ; SGN
 532:     -	00D4  D2      	        DEFB    $D2             ; ABS
 533:     -	00D5  C7      	        DEFB    $C7             ; SIN
 534:     -	00D6  C8      	        DEFB    $C8             ; COS
 535:     -	00D7  C9      	        DEFB    $C9             ; TAN
 536:     -	00D8  CF      	        DEFB    $CF             ; INT
 537:     -	00D9  40      	        DEFB    $40             ; RND
 538:     -	00DA  78      	        DEFB    $78             ; KL
 539:     -	00DB  78      	        DEFB    $78             ; KL
 540:     -	00DC  78      	        DEFB    $78             ; KL
 541:     -	00DD  78      	        DEFB    $78             ; KL
 542:     -	00DE  78      	        DEFB    $78             ; KL
 543:     -	00DF  78      	        DEFB    $78             ; KL
 544:     -	00E0  78      	        DEFB    $78             ; KL
 545:     -	00E1  78      	        DEFB    $78             ; KL
 546:     -	00E2  78      	        DEFB    $78             ; KL
 547:     -	00E3  78      	        DEFB    $78             ; KL
 548:     -	00E4  C2      	        DEFB    $C2             ; TAB
 549:     -	00E5  D3      	        DEFB    $D3             ; PEEK
 550:     -	00E6  C4      	        DEFB    $C4             ; CODE
 551:     -	00E7  D6      	        DEFB    $D6             ; CHR$
 552:     -	00E8  D5      	        DEFB    $D5             ; STR$
 553:     -	00E9  78      	        DEFB    $78             ; KL
 554:     -	00EA  D4      	        DEFB    $D4             ; USR
 555:     -	00EB  C6      	        DEFB    $C6             ; LEN
 556:     -	00EC  C5      	        DEFB    $C5             ; VAL
 557:     -	00ED  D0      	        DEFB    $D0             ; SQR
 558:     -	00EE  78      	        DEFB    $78             ; KL
 559:     -	00EF  78      	        DEFB    $78             ; KL
 560:     -	00F0  42      	        DEFB    $42             ; PI
 561:     -	00F1  D7      	        DEFB    $D7             ; NOT
 562:     -	00F2  41      	        DEFB    $41             ; INKEY$
 563:				
 564:				; -----------------------------
 565:				; THE 'GRAPHIC' CHARACTER CODES
 566:				; -----------------------------
 567:				
 568:				
 569:				;; K-GRAPH
 570:     -	00F3  08      	L00F3:  DEFB    $08             ; graphic
 571:     -	00F4  0A      	        DEFB    $0A             ; graphic
 572:     -	00F5  09      	        DEFB    $09             ; graphic
 573:     -	00F6  8A      	        DEFB    $8A             ; graphic
 574:     -	00F7  89      	        DEFB    $89             ; graphic
 575:     -	00F8  81      	        DEFB    $81             ; graphic
 576:     -	00F9  82      	        DEFB    $82             ; graphic
 577:     -	00FA  07      	        DEFB    $07             ; graphic
 578:     -	00FB  84      	        DEFB    $84             ; graphic
 579:     -	00FC  06      	        DEFB    $06             ; graphic
 580:     -	00FD  01      	        DEFB    $01             ; graphic
 581:     -	00FE  02      	        DEFB    $02             ; graphic
 582:     -	00FF  87      	        DEFB    $87             ; graphic
 583:     -	0100  04      	        DEFB    $04             ; graphic
 584:     -	0101  05      	        DEFB    $05             ; graphic
 585:     -	0102  77      	        DEFB    $77             ; RUBOUT
 586:     -	0103  78      	        DEFB    $78             ; KL
 587:     -	0104  85      	        DEFB    $85             ; graphic
 588:     -	0105  03      	        DEFB    $03             ; graphic
 589:     -	0106  83      	        DEFB    $83             ; graphic
 590:     -	0107  8B      	        DEFB    $8B             ; graphic
 591:     -	0108  91      	        DEFB    $91             ; inverse )
 592:     -	0109  90      	        DEFB    $90             ; inverse (
 593:     -	010A  8D      	        DEFB    $8D             ; inverse $
 594:     -	010B  86      	        DEFB    $86             ; graphic
 595:     -	010C  78      	        DEFB    $78             ; KL
 596:     -	010D  92      	        DEFB    $92             ; inverse >
 597:     -	010E  95      	        DEFB    $95             ; inverse +
 598:     -	010F  96      	        DEFB    $96             ; inverse -
 599:     -	0110  88      	        DEFB    $88             ; graphic
 600:				
 601:				; ------------------
 602:				; THE 'TOKEN' TABLES
 603:				; ------------------
 604:				
 605:				
 606:				;; TOKENS
 607:     -	0111  8F      	L0111:  DEFB    $0F+$80                         ; '?'+$80
 608:     -	0112  0B8B    	        DEFB    $0B,$0B+$80                     ; ""
 609:     -	0114  26B9    	        DEFB    $26,$39+$80                     ; AT
 610:     -	0116  3926A7  	        DEFB    $39,$26,$27+$80                 ; TAB
 611:     -	0119  8F      	        DEFB    $0F+$80                         ; '?'+$80
 612:     -	011A  283429AA	        DEFB    $28,$34,$29,$2A+$80             ; CODE
 613:     -	011E  3B26B1  	        DEFB    $3B,$26,$31+$80                 ; VAL
 614:     -	0121  312AB3  	        DEFB    $31,$2A,$33+$80                 ; LEN
 615:     -	0124  382EB3  	        DEFB    $38,$2E,$33+$80                 ; SIN
 616:     -	0127  2834B8  	        DEFB    $28,$34,$38+$80                 ; COS
 617:     -	012A  3926B3  	        DEFB    $39,$26,$33+$80                 ; TAN
 618:     -	012D  2638B3  	        DEFB    $26,$38,$33+$80                 ; ASN
 619:     -	0130  2628B8  	        DEFB    $26,$28,$38+$80                 ; ACS
 620:     -	0133  2639B3  	        DEFB    $26,$39,$33+$80                 ; ATN
 621:     -	0136  31B3    	        DEFB    $31,$33+$80                     ; LN
 622:     -	0138  2A3DB5  	        DEFB    $2A,$3D,$35+$80                 ; EXP
 623:     -	013B  2E33B9  	        DEFB    $2E,$33,$39+$80                 ; INT
 624:     -	013E  3836B7  	        DEFB    $38,$36,$37+$80                 ; SQR
 625:     -	0141  382CB3  	        DEFB    $38,$2C,$33+$80                 ; SGN
 626:     -	0144  2627B8  	        DEFB    $26,$27,$38+$80                 ; ABS
 627:     -	0147  352A2AB0	        DEFB    $35,$2A,$2A,$30+$80             ; PEEK
 628:     -	014B  3A38B7  	        DEFB    $3A,$38,$37+$80                 ; USR
 629:     -	014E  3839378D	        DEFB    $38,$39,$37,$0D+$80             ; STR$
 630:     -	0152  282D378D	        DEFB    $28,$2D,$37,$0D+$80             ; CHR$
 631:     -	0156  3334B9  	        DEFB    $33,$34,$39+$80                 ; NOT
 632:     -	0159  1797    	        DEFB    $17,$17+$80                     ; **
 633:     -	015B  34B7    	        DEFB    $34,$37+$80                     ; OR
 634:     -	015D  2633A9  	        DEFB    $26,$33,$29+$80                 ; AND
 635:     -	0160  1394    	        DEFB    $13,$14+$80                     ; <=
 636:     -	0162  1294    	        DEFB    $12,$14+$80                     ; >=
 637:     -	0164  1392    	        DEFB    $13,$12+$80                     ; <>
 638:     -	0166  392D2AB3	        DEFB    $39,$2D,$2A,$33+$80             ; THEN
 639:     -	016A  39B4    	        DEFB    $39,$34+$80                     ; TO
 640:     -	016C  38392AB5	        DEFB    $38,$39,$2A,$35+$80             ; STEP
 641:     -	0170  3135372E	        DEFB    $31,$35,$37,$2E,$33,$39+$80     ; LPRINT
	              33B9
 642:     -	0176  31312E38	        DEFB    $31,$31,$2E,$38,$39+$80         ; LLIST
	              B9
 643:     -	017B  383934B5	        DEFB    $38,$39,$34,$35+$80             ; STOP
 644:     -	017F  383134BC	        DEFB    $38,$31,$34,$3C+$80             ; SLOW
 645:     -	0183  2B2638B9	        DEFB    $2B,$26,$38,$39+$80             ; FAST
 646:     -	0187  332ABC  	        DEFB    $33,$2A,$3C+$80                 ; NEW
 647:     -	018A  38283734	        DEFB    $38,$28,$37,$34,$31,$31+$80     ; SCROLL
	              31B1
 648:     -	0190  283433B9	        DEFB    $28,$34,$33,$39+$80             ; CONT
 649:     -	0194  292EB2  	        DEFB    $29,$2E,$32+$80                 ; DIM
 650:     -	0197  372AB2  	        DEFB    $37,$2A,$32+$80                 ; REM
 651:     -	019A  2B34B7  	        DEFB    $2B,$34,$37+$80                 ; FOR
 652:     -	019D  2C3439B4	        DEFB    $2C,$34,$39,$34+$80             ; GOTO
 653:     -	01A1  2C34383A	        DEFB    $2C,$34,$38,$3A,$27+$80         ; GOSUB
	              A7
 654:     -	01A6  2E33353A	        DEFB    $2E,$33,$35,$3A,$39+$80         ; INPUT
	              B9
 655:     -	01AB  313426A9	        DEFB    $31,$34,$26,$29+$80             ; LOAD
 656:     -	01AF  312E38B9	        DEFB    $31,$2E,$38,$39+$80             ; LIST
 657:     -	01B3  312AB9  	        DEFB    $31,$2A,$39+$80                 ; LET
 658:     -	01B6  35263A38	        DEFB    $35,$26,$3A,$38,$2A+$80         ; PAUSE
	              AA
 659:     -	01BB  332A3DB9	        DEFB    $33,$2A,$3D,$39+$80             ; NEXT
 660:     -	01BF  353430AA	        DEFB    $35,$34,$30,$2A+$80             ; POKE
 661:     -	01C3  35372E33	        DEFB    $35,$37,$2E,$33,$39+$80         ; PRINT
	              B9
 662:     -	01C8  353134B9	        DEFB    $35,$31,$34,$39+$80             ; PLOT
 663:     -	01CC  373AB3  	        DEFB    $37,$3A,$33+$80                 ; RUN
 664:     -	01CF  38263BAA	        DEFB    $38,$26,$3B,$2A+$80             ; SAVE
 665:     -	01D3  372633A9	        DEFB    $37,$26,$33,$29+$80             ; RAND
 666:     -	01D7  2EAB    	        DEFB    $2E,$2B+$80                     ; IF
 667:     -	01D9  2831B8  	        DEFB    $28,$31,$38+$80                 ; CLS
 668:     -	01DC  3A333531	        DEFB    $3A,$33,$35,$31,$34,$39+$80     ; UNPLOT
	              34B9
 669:     -	01E2  28312A26	        DEFB    $28,$31,$2A,$26,$37+$80         ; CLEAR
	              B7
 670:     -	01E7  372A393A	        DEFB    $37,$2A,$39,$3A,$37,$33+$80     ; RETURN
	              37B3
 671:     -	01ED  283435BE	        DEFB    $28,$34,$35,$3E+$80             ; COPY
 672:     -	01F1  3733A9  	        DEFB    $37,$33,$29+$80                 ; RND
 673:     -	01F4  2E33302A	        DEFB    $2E,$33,$30,$2A,$3E,$0D+$80     ; INKEY$
	              3E8D
 674:     -	01FA  35AE    	        DEFB    $35,$2E+$80                     ; PI
 675:				
 676:				
 677:				; ------------------------------
 678:				; THE 'LOAD-SAVE UPDATE' ROUTINE
 679:				; ------------------------------
 680:				;
 681:				;
 682:				
 683:				;; LOAD/SAVE
 684:  641+6	01FC  23      	L01FC:  INC     HL              ;
 685:  647+4	01FD  EB      	        EX      DE,HL           ;
 686:  651+16	01FE  2A1440  	        LD      HL,($4014)      ; system variable edit line E_LINE.
 687:  667+4	0201  37      	        SCF                     ; set carry flag
 688:  671+15	0202  ED52    	        SBC     HL,DE           ;
 689:  686+4	0204  EB      	        EX      DE,HL           ;
 690:  690+5+6	0205  D0      	        RET     NC              ; return if more bytes to load/save.
 691:				
 692:  695+10	0206  E1      	        POP     HL              ; else drop return address
 693:				
 694:				; ----------------------
 695:				; THE 'DISPLAY' ROUTINES
 696:				; ----------------------
 697:				;
 698:				;
 699:				
 700:				;; SLOW/FAST
 701:  705+10	0207  213B40  	L0207:  LD      HL,$403B        ; Address the system variable CDFLAG.
 702:  715+7	020A  7E      	        LD      A,(HL)          ; Load value to the accumulator.
 703:  722+4	020B  17      	        RLA                     ; rotate bit 6 to position 7.
 704:  726+7	020C  AE      	        XOR     (HL)            ; exclusive or with original bit 7.
 705:  733+4	020D  17      	        RLA                     ; rotate result out to carry.
 706:  737+5+6	020E  D0      	        RET     NC              ; return if both bits were the same.
 707:				
 708:				;   Now test if this really is a ZX81 or a ZX80 running the upgraded ROM.
 709:				;   The standard ZX80 did not have an NMI generator.
 710:				
 711:  742+7	020F  3E7F    	        LD      A,$7F           ; Load accumulator with 011111111b
 712:  749+4	0211  08      	        EX      AF,AF'          ; save in AF'
 713:				
 714:  753+7	0212  0611    	        LD      B,$11           ; A counter within which an NMI should occur
 715:				                                ; if this is a ZX81.
 716:				        ;OUT     ($FE),A         ; start the NMI generator.
 717:  760+4	0214  00      	        nop
 718:  764+4	0215  00      	        nop
 719:				
 720:				;  Note that if this is a ZX81 then the NMI will increment AF'.
 721:				
 722:				;; LOOP-11
 723:  768+8+5	0216  10FE    	L0216:  DJNZ    L0216           ; self loop to give the NMI a chance to kick in.
 724:				                                ; = 16*13 clock cycles + 8 = 216 clock cycles.
 725:				
 726:				        ;OUT     ($FD),A         ; Turn off the NMI generator.
 727:  776+4	0218  00      	        nop
 728:  780+4	0219  00      	        nop
 729:  784+4	021A  08      	        EX      AF,AF'          ; bring back the AF' value.
 730:  788+4	021B  17      	        RLA                     ; test bit 7.
 731:				        ;JR      NC,L0226        ; forward, if bit 7 is still reset, to NO-SLOW.
 732:  792+4	021C  00      	        nop                     ; We want to look like a ZX81
 733:  796+4	021D  00      	        nop
 734:				
 735:				;   If the AF' was incremented then the NMI generator works and SLOW mode can
 736:				;   be set.
 737:				
 738:  800+15	021E  CBFE    	        SET     7,(HL)          ; Indicate SLOW mode - Compute and Display.
 739:				
 740:  815+11	0220  F5      	        PUSH    AF              ; *             Save Main Registers
 741:  826+11	0221  C5      	        PUSH    BC              ; **
 742:  837+11	0222  D5      	        PUSH    DE              ; ***
 743:  848+11	0223  E5      	        PUSH    HL              ; ****
 744:				
 745:  859+12	0224  1803    	        JR      L0229           ; skip forward - to DISPLAY-1.
 746:				
 747:				; ---
 748:				
 749:				;; NO-SLOW
 750:  871+15	0226  CBB6    	L0226:  RES     6,(HL)          ; reset bit 6 of CDFLAG.
 751:  886+10	0228  C9      	        RET                     ; return.
 752:				
 753:				; -----------------------
 754:				; THE 'MAIN DISPLAY' LOOP
 755:				; -----------------------
 756:				; This routine is executed once for every frame displayed.
 757:				
 758:				;; DISPLAY-1
 759:  896+16	0229  2A3440  	L0229:  LD      HL,($4034)      ; fetch two-byte system variable FRAMES.
 760:  912+6	022C  2B      	        DEC     HL              ; decrement frames counter.
 761:				
 762:				;; DISPLAY-P
 763:  918+7	022D  3E7F    	L022D:  LD      A,$7F           ; prepare a mask
 764:  925+4	022F  A4      	        AND     H               ; pick up bits 6-0 of H.
 765:  929+4	0230  B5      	        OR      L               ; and any bits of L.
 766:  933+4	0231  7C      	        LD      A,H             ; reload A with all bits of H for PAUSE test.
 767:				
 768:				;   Note both branches must take the same time.
 769:				
 770:  937+7+5	0232  2003    	        JR      NZ,L0237        ; (12/7) forward if bits 14-0 are not zero 
 771:				                                ; to ANOTHER
 772:				
 773:  944+4	0234  17      	        RLA                     ; (4) test bit 15 of FRAMES.
 774:  948+12	0235  1802    	        JR      L0239           ; (12) forward with result to OVER-NC
 775:				
 776:				; ---
 777:				
 778:				;; ANOTHER
 779:  960+7	0237  46      	L0237:  LD      B,(HL)          ; (7) Note. Harmless Nonsensical Timing weight.
 780:  967+4	0238  37      	        SCF                     ; (4) Set Carry Flag.
 781:				
 782:				; Note. the branch to here takes either (12)(7)(4) cyles or (7)(4)(12) cycles.
 783:				
 784:				;; OVER-NC
 785:  971+4	0239  67      	L0239:  LD      H,A             ; (4)  set H to zero
 786:  975+16	023A  223440  	        LD      ($4034),HL      ; (16) update system variable FRAMES 
 787:  991+5+6	023D  D0      	        RET     NC              ; (11/5) return if FRAMES is in use by PAUSE 
 788:				                                ; command.
 789:				
 790:				;; DISPLAY-2
 791:  996+17	023E  CDBB02  	L023E:  CALL    L02BB           ; Routine KEYBOARD scans the keyboard. Reading
 792:				; the ports also starts the TV frame synchronization pulse. (VSYNC).
 793:				; H - active low column bits with shift in bit 0, so we have
 794:				; $FD, $FB, $F7, $EF, $DF or
 795:				; $FC, $FA, $F6, $EE, $DE if shifted.
 796:				; L - active low row bits
 797:				
 798: 1013+20	0241  ED4B2540	        LD      BC,($4025)      ; fetch the last key values read from LAST_K
 799: 1033+16	0245  222540  	        LD      ($4025),HL      ; update LAST_K with new values.
 800:				
 801: 1049+4	0248  78      	        LD      A,B             ; load A with previous column - will be $FF if
 802:				                                ; there was no key.
 803: 1053+7	0249  C602    	        ADD     A,$02           ; adding two will set carry if no previous key.
 804:				
 805: 1060+15	024B  ED42    	        SBC     HL,BC           ; subtract with the carry the two key values.
 806:				
 807:				; If the same key value has been returned twice then HL will be zero.
 808:				
 809: 1075+13	024D  3A2740  	        LD      A,($4027)       ; fetch system variable DEBOUNCE
 810: 1088+4	0250  B4      	        OR      H               ; and OR with both bytes of the difference
 811: 1092+4	0251  B5      	        OR      L               ; setting the zero flag for the upcoming branch.
 812:				
 813: 1096+4	0252  58      	        LD      E,B             ; transfer the column value to E
 814: 1100+7	0253  060B    	        LD      B,$0B           ; and load B with eleven 
 815:				
 816: 1107+10	0255  213B40  	        LD      HL,$403B        ; address system variable CDFLAG
 817: 1117+15	0258  CB86    	        RES     0,(HL)          ; Flag no key pressed
 818: 1132+7+5	025A  2008    	        JR      NZ,L0264        ; skip forward if debounce/diff >0 to NO-KEY
 819:				
 820: 1139+12	025C  CB7E    	        BIT     7,(HL)          ; test compute and display bit of CDFLAG
 821: 1151+15	025E  CBC6    	        SET     0,(HL)          ; Flag key pressed
 822: 1166+5+6	0260  C8      	        RET     Z               ; return if bit 7 indicated fast mode.
 823:				
 824: 1171+4	0261  05      	        DEC     B               ; (4) decrement the counter.
 825: 1175+4	0262  00      	        NOP                     ; (4) Timing - 4 clock cycles. ??
 826: 1179+4	0263  37      	        SCF                     ; (4) Set Carry Flag
 827:				
 828:				;; NO-KEY
 829: 1183+10	0264  212740  	L0264:  LD      HL,$4027        ; sv DEBOUNCE
 830: 1193+4	0267  3F      	        CCF                     ; Complement Carry Flag
 831: 1197+8	0268  CB10    	        RL      B               ; rotate left B picking up carry
 832:				                                ;  C<-76543210<-C
 833:				
 834:				;; LOOP-B
 835: 1205+8+5	026A  10FE    	L026A:  DJNZ    L026A           ; self-loop while B>0 to LOOP-B
 836:				
 837: 1213+7	026C  46      	        LD      B,(HL)          ; fetch value of DEBOUNCE to B
 838: 1220+4	026D  7B      	        LD      A,E             ; transfer column value
 839: 1224+7	026E  FEFE    	        CP      $FE             ;
 840: 1231+4	0270  9F      	        SBC     A,A             ;
 841: 1235+7	0271  061F    	        LD      B,$1F           ;
 842: 1242+7	0273  B6      	        OR      (HL)            ;
 843: 1249+4	0274  A0      	        AND     B               ;
 844: 1253+4	0275  1F      	        RRA                     ;
 845: 1257+7	0276  77      	        LD      (HL),A          ;
 846:				
 847:				        ;OUT     ($FF),A         ; end the TV frame synchronization pulse.
 848: 1264+4	0277  00      	        nop
 849: 1268+4	0278  00      	        nop
 850:				
 851: 1272+16	0279  2A0C40  	        LD      HL,($400C)      ; (12) set HL to the Display File from D_FILE
 852: 1288+8	027C  CBFC    	        SET     7,H             ; (8) set bit 15 to address the echo display.
 853:				
 854: 1296+17	027E  CD9202  	        CALL    L0292           ; (17) routine DISPLAY-3 displays the top set 
 855:				                                ; of blank lines.
 856:				
 857:				; ---------------------
 858:				; THE 'VIDEO-1' ROUTINE
 859:				; ---------------------
 860:				
 861:				;; R-IX-1
 862: 1313+9	0281  ED5F    	L0281:  LD      A,R             ; (9)  Harmless Nonsensical Timing or something
 863:				                                ;      very clever?
 864: 1322+10	0283  010119  	        LD      BC,$1901        ; (10) 25 lines, 1 scanline in first.
 865: 1332+7	0286  3EF5    	        LD      A,$F5           ; (7)  This value will be loaded into R and 
 866:				                                ; ensures that the cycle starts at the right 
 867:				                                ; part of the display  - after 32nd character 
 868:				                                ; position.
 869:				
 870: 1339+17	0288  CDB502  	        CALL    L02B5           ; (17) routine DISPLAY-5 completes the current 
 871:				                                ; blank line and then generates the display of 
 872:				                                ; the live picture using INT interrupts
 873:				                                ; The final interrupt returns to the next 
 874:				                                ; address.
 875:				
 876: 1356+6	028B  2B      	L028B:  DEC     HL              ; point HL to the last NEWLINE/HALT.
 877:				
 878: 1362+17	028C  CD9202  	        CALL    L0292           ; routine DISPLAY-3 displays the bottom set of
 879:				                                ; blank lines.
 880:				
 881:				; ---
 882:				
 883:				;; R-IX-2
 884: 1379+10	028F  C32902  	L028F:  JP      L0229           ; JUMP back to DISPLAY-1
 885:				
 886:				; ---------------------------------
 887:				; THE 'DISPLAY BLANK LINES' ROUTINE 
 888:				; ---------------------------------
 889:				;   This subroutine is called twice (see above) to generate first the blank 
 890:				;   lines at the top of the television display and then the blank lines at the
 891:				;   bottom of the display. 
 892:				
 893:				;; DISPLAY-3
 894: 1389+14	0292  DDE1    	L0292:  POP     IX              ; pop the return address to IX register.
 895:				                                ; will be either L0281 or L028F - see above.
 896:				
 897: 1403+19	0294  FD4E28  	        LD      C,(IY+$28)      ; load C with value of system constant MARGIN.
 898: 1422+20	0297  FDCB3B7E	        BIT     7,(IY+$3B)      ; test CDFLAG for compute and display.
 899: 1442+7+5	029B  280C    	        JR      Z,L02A9         ; forward, with FAST mode, to DISPLAY-4
 900:				
 901: 1449+4	029D  79      	        LD      A,C             ; move MARGIN to A  - 31d or 55d.
 902: 1453+8	029E  ED44    	        NEG                     ; Negate
 903: 1461+4	02A0  3C      	        INC     A               ;
 904: 1465+4	02A1  08      	        EX      AF,AF'          ; place negative count of blank lines in A'
 905:				
 906:				        ;OUT     ($FE),A         ; enable the NMI generator.
 907: 1469+4	02A2  00      	        nop
 908: 1473+4	02A3  00      	        nop
 909:				
 910: 1477+10	02A4  E1      	        POP     HL              ; ****
 911: 1487+10	02A5  D1      	        POP     DE              ; ***
 912: 1497+10	02A6  C1      	        POP     BC              ; **
 913: 1507+10	02A7  F1      	        POP     AF              ; *             Restore Main Registers
 914:				
 915: 1517+10	02A8  C9      	        RET                     ; return - end of interrupt.  Return is to 
 916:				                                ; user's program - BASIC or machine code.
 917:				                                ; which will be interrupted by every NMI.
 918:				
 919:				; ------------------------
 920:				; THE 'FAST MODE' ROUTINES
 921:				; ------------------------
 922:				
 923:				;; DISPLAY-4
 924: 1527+7	02A9  3EFC    	L02A9:  LD      A,$FC           ; (7)  load A with first R delay value
 925: 1534+7	02AB  0601    	        LD      B,$01           ; (7)  one row only.
 926:				
 927: 1541+17	02AD  CDB502  	        CALL    L02B5           ; (17) routine DISPLAY-5
 928:				
 929: 1558+6	02B0  2B      	        DEC     HL              ; (6)  point back to the HALT.
 930: 1564+19	02B1  E3      	        EX      (SP),HL         ; (19) Harmless Nonsensical Timing if paired.
 931: 1583+19	02B2  E3      	        EX      (SP),HL         ; (19) Harmless Nonsensical Timing.
 932: 1602+8	02B3  DDE9    	        JP      (IX)            ; (8)  to L0281 or L028F
 933:				
 934:				; --------------------------
 935:				; THE 'DISPLAY-5' SUBROUTINE
 936:				; --------------------------
 937:				;   This subroutine is called from SLOW mode and FAST mode to generate the 
 938:				;   central TV picture. With SLOW mode the R register is incremented, with
 939:				;   each instruction, to $F7 by the time it completes.  With fast mode, the 
 940:				;   final R value will be $FF and an interrupt will occur as soon as the 
 941:				;   Program Counter reaches the HALT.  (24 clock cycles)
 942:				
 943:				;; DISPLAY-5
 944: 1610+9	02B5  ED4F    	L02B5:  LD      R,A             ; (9) Load R from A.    R = slow: $F5 fast: $FC
 945: 1619+7	02B7  3EDD    	        LD      A,$DD           ; (7) load future R value.        $F6       $FD
 946:				
 947:				        ;EI                      ; (4) Enable Interrupts           $F7       $FE
 948: 1626+4	02B9  00      	        nop                     ; No interrupts in emulator
 949:				
 950: 1630+4	02BA  E9      	        JP      (HL)            ; (4) jump to the echo display.   $F8       $FF
 951:				
 952:				; ----------------------------------
 953:				; THE 'KEYBOARD SCANNING' SUBROUTINE
 954:				; ----------------------------------
 955:				; The keyboard is read during the vertical sync interval while no video is 
 956:				; being displayed.  Reading a port with address bit 0 low i.e. $FE starts the 
 957:				; vertical sync pulse.
 958:				;
 959:				; Notes on keyboard I/O logic, adapted from
 960:				; http://searle.x10host.com/zx80/zx80.html
 961:				; /KBD is low when /IORQ is low, /RD is low and A0 is low. So, the keyboard is
 962:				; read for every even-address I/O read. In addition, any I/O write will set the
 963:				; latch implemented with IC11, and any keyboard read will reset the latch. This
 964:				; latch is used to generate the vertical SYNC signal.
 965:				;
 966:				; The /KBD output from the I/O decoder is used to enable the keyboard input
 967:				; buffer. The keyboard is read in a multiplexed manner, with only one of the
 968:				; address lines A8 to A15 low at any particular time. When the port is read,
 969:				; D4...D0 contain the keyboard switch details for a segment of the keyboard
 970:				; (as determined by which of A8 to A15 is low). D7 is the cassette input and
 971:				; D6 indicates whether UK 50Hz or USA 60Hz display is to be used. D6 will be
 972:				; low for USA and high for UK.
 973:				;
 974:				; Keyboard matrix is shown at:
 975:				; http://searle.x10host.com/zx80/zx80circuitAnnotated.pdf
 976:				;
 977:				;    Port (row)  D4 D3 D2 D1 D0
 978:				; A8  0xfefe -   V  C  X  Z  Shift
 979:				; A9  0xfdfe -   G  F  D  S  A
 980:				; A10 0xfbfe -   T  R  E  W  Q
 981:				; A11 0xf7fe -   5  4  3  2  1
 982:				; A12 0xeffe -   6  7  8  9  0
 983:				; A13 0xdffe -   Y  U  I  O  P
 984:				; A14 0xbffe -   H  J  K  L  Newline
 985:				; A15 0x7ffe -   B  N  M  .  Space
 986:				;
 987:				;; KEYBOARD
 988: 1634+10	02BB  21FFFF  	L02BB:  LD      HL,$FFFF        ; (16) prepare a buffer to take key.
 989: 1644+10	02BE  01FEFE  	        LD      BC,$FEFE        ; (20) set BC to port $FEFE. The B register, 
 990:				                                ;      with its single reset bit also acts as 
 991:				                                ;      an 8-counter.
 992:				        ;IN      A,(C)          ; (11) read the port - all 16 bits are put on 
 993:				                                ;      the address bus.  Start VSYNC pulse.
 994: 1654+7	02C1  3EFF    	        ld a, 0xff              ; No key pressed
 995: 1661+7	02C3  F601    	        OR      $01             ; (7)  set the rightmost bit so as to ignore 
 996:				                                ;      the SHIFT key.
 997:				
 998:				;; EACH-LINE (row)
 999: 1668+7	02C5  F6E0    	L02C5:  OR      $E0             ; [7] OR 11100000b
1000: 1675+4	02C7  57      	        LD      D,A             ; [4] transfer to D.
1001: 1679+4	02C8  2F      	        CPL                     ; [4] complement - only bits 4-0 meaningful now.
1002:				; A - active high column bits
1003: 1683+7	02C9  FE01    	        CP      $01             ; [7] sets carry if A is zero.
1004:				; Carry set if key not pressed.
1005: 1690+4	02CB  9F      	        SBC     A,A             ; [4]
1006:				; A - 0x00 if key pressed, else 0xff.
1007: 1694+4	02CC  B0      	        OR      B               ; [7] $FF or port FE,FD,FB.... (row)
1008:				; A - row if key pressed, else 0xff
1009: 1698+4	02CD  A5      	        AND     L               ; [4] unless more than one key, L will still be 
1010:				                                ;     $FF. if more than one key is pressed then A is 
1011:				                                ;     now invalid.
1012: 1702+4	02CE  6F      	        LD      L,A             ; [4] transfer to L.
1013:				
1014:				; now consider the column identifier.
1015:				
1016: 1706+4	02CF  7C      	        LD      A,H             ; [4] will be $FF if no previous keys.
1017: 1710+4	02D0  A2      	        AND     D               ; [4] 111 <active low column bits>
1018: 1714+4	02D1  67      	        LD      H,A             ; [4] transfer A to H
1019:				
1020:				; since only one key may be pressed, H will, if valid, be one of
1021:				; 11111110, 11111101, 11111011, 11110111, 11101111
1022:				; reading from the outer column, say Q, to the inner column, say T.
1023:				
1024: 1718+8	02D2  CB00    	        RLC     B               ; [8]  rotate the 8-counter/port address.
1025:				                                ;      sets carry if more to do.
1026:				        ;IN      A,(C)          ; [10] read another half-row.
1027:				                                ;      all five bits this time.
1028: 1726+7	02D4  3EFF    	        ld a, 0xff              ; No key pressed
1029:				
1030: 1733+7+5	02D6  38ED    	        JR      C,L02C5         ; [12](7) loop back, until done, to EACH-LINE
1031:				
1032:				;   The last row read is SHIFT,Z,X,C,V  for the second time.
1033:				
1034: 1740+4	02D8  1F      	        RRA                     ; (4) test the shift key - carry will be reset
1035:				                                ;     if the key is pressed.
1036: 1744+8	02D9  CB14    	        RL      H               ; (8) rotate left H picking up the carry giving
1037:				                                ;     column values -
1038:				                                ;        $FD, $FB, $F7, $EF, $DF.
1039:				                                ;     or $FC, $FA, $F6, $EE, $DE if shifted.
1040:				
1041:				;   We now have H identifying the column and L identifying the row in the
1042:				;   keyboard matrix.
1043:				
1044:				;   This is a good time to test if this is an American or British machine.
1045:				;   The US machine has an extra diode that causes bit 6 of a byte read from
1046:				;   a port to be reset.
1047:				
1048: 1752+4	02DB  17      	        RLA                     ; (4) compensate for the shift test.
1049: 1756+4	02DC  17      	        RLA                     ; (4) rotate bit 7 out.
1050: 1760+4	02DD  17      	        RLA                     ; (4) test bit 6.
1051:				
1052: 1764+4	02DE  9F      	        SBC     A,A             ; (4)           $FF or $00 {USA}
1053: 1768+7	02DF  E618    	        AND     $18             ; (7)           $18 or $00
1054: 1775+7	02E1  C61F    	        ADD     A,$1F           ; (7)           $37 or $1F
1055:				
1056:				;   result is either 31 (USA) or 55 (UK) blank lines above and below the TV 
1057:				;   picture. In the emulator, we will have a UK machine.
1058:				
1059: 1782+13	02E3  322840  	        LD      ($4028),A       ; (13) update system variable MARGIN
1060:				; H - active low column bits with shift in bit 0, so we have
1061:				; $FD, $FB, $F7, $EF, $DF or
1062:				; $FC, $FA, $F6, $EE, $DE if shifted.
1063:				; L - active low row bits
1064: 1795+10	02E6  C9      	        RET                     ; (10) return with key code in HL
1065:				; UnderstandingYourZX81ROM.pdf appendix iv provides a list of possible key
1066:				; codes in HL. If no key is pressed, the code is 0xffff.
1067:				;
1068:     -	0001          	                assert $ = 0x02E7       ; This address must be maintained
1069:				
1070:				; ------------------------------
1071:				; THE 'SET FAST MODE' SUBROUTINE
1072:				; ------------------------------
1073:				;
1074:				;
1075:				
1076:				;; SET-FAST
1077: 1805+20	02E7  FDCB3B7E	L02E7:  BIT     7,(IY+$3B)      ; sv CDFLAG
1078: 1825+5+6	02EB  C8      	        RET     Z               ;
1079:				
1080:				        ;HALT                    ; Wait for Interrupt
1081: 1830+4	02EC  00      	        nop                     ; Removed to avoid lockups
1082:				        ;OUT     ($FD),A         ;
1083: 1834+4	02ED  00      	        nop
1084: 1838+4	02EE  00      	        nop
1085: 1842+23	02EF  FDCB3BBE	        RES     7,(IY+$3B)      ; sv CDFLAG
1086: 1865+10	02F3  C9      	        RET                     ; return.
1087:				
1088:				
1089:				; --------------
1090:				; THE 'REPORT-F'
1091:				; --------------
1092:				
1093:				;; REPORT-F
1094: 1875+11	02F4  CF      	L02F4:  RST     08H             ; ERROR-1
1095:     -	02F5  0E      	        DEFB    $0E             ; Error Report: No Program Name supplied.
1096:				
1097:				; --------------------------
1098:				; THE 'SAVE COMMAND' ROUTINE
1099:				; --------------------------
1100:				;
1101:				;; SAVE
1102: 1886+17	02F6  CDA803  	L02F6:  CALL    L03A8           ; routine NAME
1103:				; If carry is set, the name is a null string and DE is meaningless.
1104:				; If carry is clear, DE points to the name. This has bit 7 of the last
1105:				; character set.
1106: 1903+7+5	02F9  38F9    	        JR      C,L02F4         ; back with null name to REPORT-F above.
1107:				;
1108: 1910+10	02FB  C3811E  	        jp em_save              ; Go to emulator patch code
1109:				;
1110:				;        EX      DE,HL           ;
1111:				;        LD      DE,$12CB        ; five seconds timing value
1112:				
1113:				;; HEADER
1114:				;L02FF:  CALL    L0F46           ; routine BREAK-1
1115:				;        JR      NC,L0332        ; to BREAK-2
1116:				
1117:				;; DELAY-1
1118:				;L0304:  DJNZ    L0304           ; to DELAY-1
1119:				
1120:				;        DEC     DE              ;
1121:				;        LD      A,D             ;
1122:				;        OR      E               ;
1123:				;        JR      NZ,L02FF        ; back for delay to HEADER
1124:				
1125:				;; OUT-NAME
1126:				;L030B:  CALL    L031E           ; routine OUT-BYTE
1127:				;        BIT     7,(HL)          ; test for inverted bit.
1128:				;        INC     HL              ; address next character of name.
1129:				;        JR      Z,L030B         ; back if not inverted to OUT-NAME
1130:				
1131:				; now start saving the system variables onwards.
1132:				
1133:				;        LD      HL,$4009        ; set start of area to VERSN thereby
1134:				;                                ; preserving RAMTOP etc.
1135:				
1136:				;; OUT-PROG
1137:				;L0316:  CALL    L031E           ; routine OUT-BYTE
1138:				
1139:				;        CALL    L01FC           ; routine LOAD/SAVE                     >>
1140:				;        JR      L0316           ; loop back to OUT-PROG
1141:				;
1142:     -	031E          	                org 0x031E      ; This address must be maintained
1143:				;
1144:				; -------------------------
1145:				; THE 'OUT-BYTE' SUBROUTINE
1146:				; -------------------------
1147:				; This subroutine outputs a byte a bit at a time to a domestic tape recorder.
1148:				
1149:				;; OUT-BYTE
1150: 1920+7	031E  5E      	L031E:  LD      E,(HL)          ; fetch byte to be saved.
1151: 1927+4	031F  37      	        SCF                     ; set carry flag - as a marker.
1152:				
1153:				;; EACH-BIT
1154: 1931+8	0320  CB13    	L0320:  RL      E               ;  C < 76543210 < C
1155: 1939+5+6	0322  C8      	        RET     Z               ; return when the marker bit has passed 
1156:				                                ; right through.                        >>
1157:				
1158: 1944+4	0323  9F      	        SBC     A,A             ; $FF if set bit or $00 with no carry.
1159: 1948+7	0324  E605    	        AND     $05             ; $05               $00
1160: 1955+7	0326  C604    	        ADD     A,$04           ; $09               $04
1161: 1962+4	0328  4F      	        LD      C,A             ; transfer timer to C. a set bit has a longer
1162:				                                ; pulse than a reset bit.
1163:				
1164:				;; PULSES
1165: 1966+11	0329  D3FF    	L0329:  OUT     ($FF),A         ; pulse to cassette.
1166: 1977+7	032B  0623    	        LD      B,$23           ; set timing constant
1167:				
1168:				;; DELAY-2
1169: 1984+8+5	032D  10FE    	L032D:  DJNZ    L032D           ; self-loop to DELAY-2
1170:				
1171: 1992+17	032F  CD460F  	        CALL    L0F46           ; routine BREAK-1 test for BREAK key.
1172:				
1173:				;; BREAK-2
1174: 2009+7+5	0332  3072    	L0332:  JR      NC,L03A6        ; forward with break to REPORT-D
1175:				
1176: 2016+7	0334  061E    	        LD      B,$1E           ; set timing value.
1177:				
1178:				;; DELAY-3
1179: 2023+8+5	0336  10FE    	L0336:  DJNZ    L0336           ; self-loop to DELAY-3
1180:				
1181: 2031+4	0338  0D      	        DEC     C               ; decrement counter
1182: 2035+7+5	0339  20EE    	        JR      NZ,L0329        ; loop back to PULSES
1183:				
1184:				;; DELAY-4
1185: 2042+4	033B  A7      	L033B:  AND     A               ; clear carry for next bit test.
1186: 2046+8+5	033C  10FD    	        DJNZ    L033B           ; self loop to DELAY-4 (B is zero - 256)
1187:				
1188: 2054+12	033E  18E0    	        JR      L0320           ; loop back to EACH-BIT
1189:				
1190:				; --------------------------
1191:				; THE 'LOAD COMMAND' ROUTINE
1192:				; --------------------------
1193:				;
1194:				;
1195:				
1196:				;; LOAD
1197: 2066+17	0340  CDA803  	L0340:  CALL    L03A8           ; routine NAME
1198:				
1199:				; If carry is set, the name is a null string and DE is meaningless.
1200:				; If carry is clear, DE points to the name. This has bit 7 of the last
1201:				; character set. Unlike the original code, a null filename is not helpful
1202:				; as we need a disk file name.
1203: 2083+10	0343  DAF402  	        jp c,L02F4              ; back with null name to REPORT-F above.
1204: 2093+10	0346  C36B1E  	        jp em_load              ; Go to emulator patch
1205:				;
1206:				; Copy carry flag to bit 15 of address.
1207:				;        RL      D               ; pick up carry into bit 0
1208:				;        RRC     D               ; carry now in bit 7.
1209:				
1210:				;; NEXT-PROG
1211:     -	0349          	L0347:  ;CALL    L034C           ; routine IN-BYTE
1212:				;        JR      L0347           ; loop to NEXT-PROG
1213:				;
1214:     -	034C          	                org 0x034C       ; This address must be maintained
1215:				;
1216:				; ------------------------
1217:				; THE 'IN-BYTE' SUBROUTINE
1218:				; ------------------------
1219:				
1220:				;; IN-BYTE
1221: 2103+7	034C  0E01    	L034C:  LD      C,$01           ; prepare an eight counter 00000001.
1222:				
1223:				;; NEXT-BIT
1224: 2110+7	034E  0600    	L034E:  LD      B,$00           ; set counter to 256
1225:				
1226:				;; BREAK-3
1227: 2117+7	0350  3E7F    	L0350:  LD      A,$7F           ; read the keyboard row 
1228: 2124+11	0352  DBFE    	        IN      A,($FE)         ; with the SPACE key.
1229:				
1230: 2135+11	0354  D3FF    	        OUT     ($FF),A         ; output signal to screen.
1231:				
1232: 2146+4	0356  1F      	        RRA                     ; test for SPACE pressed.
1233: 2150+7+5	0357  3049    	        JR      NC,L03A2        ; forward if so to BREAK-4
1234:				
1235: 2157+4	0359  17      	        RLA                     ; reverse above rotation
1236: 2161+4	035A  17      	        RLA                     ; test tape bit.
1237: 2165+7+5	035B  3828    	        JR      C,L0385         ; forward if set to GET-BIT
1238:				
1239: 2172+8+5	035D  10F1    	        DJNZ    L0350           ; loop back to BREAK-3
1240:				
1241: 2180+10	035F  F1      	        POP     AF              ; drop the return address.
1242: 2190+4	0360  BA      	        CP      D               ; ugh.
1243:				
1244:				;; RESTART
1245: 2194+10	0361  D2E503  	L0361:  JP      NC,L03E5        ; jump forward to INITIAL if D is zero 
1246:				                                ; to reset the system
1247:				                                ; if the tape signal has timed out for example
1248:				                                ; if the tape is stopped. Not just a simple 
1249:				                                ; report as some system variables will have
1250:				                                ; been overwritten.
1251:				
1252: 2204+4	0364  62      	        LD      H,D             ; else transfer the start of name
1253: 2208+4	0365  6B      	        LD      L,E             ; to the HL register
1254:				
1255:				;; IN-NAME
1256: 2212+17	0366  CD4C03  	L0366:  CALL    L034C           ; routine IN-BYTE is sort of recursion for name
1257:				                                ; part. received byte in C.
1258: 2229+8	0369  CB7A    	        BIT     7,D             ; is name the null string ?
1259: 2237+4	036B  79      	        LD      A,C             ; transfer byte to A.
1260: 2241+7+5	036C  2003    	        JR      NZ,L0371        ; forward with null string to MATCHING
1261:				
1262: 2248+7	036E  BE      	        CP      (HL)            ; else compare with string in memory.
1263: 2255+7+5	036F  20D8    	        JR      NZ,L0347        ; back with mis-match to NEXT-PROG
1264:				                                ; (seemingly out of subroutine but return 
1265:				                                ; address has been dropped).
1266:				
1267:				
1268:				;; MATCHING
1269: 2262+6	0371  23      	L0371:  INC     HL              ; address next character of name
1270: 2268+4	0372  17      	        RLA                     ; test for inverted bit.
1271: 2272+7+5	0373  30F1    	        JR      NC,L0366        ; back if not to IN-NAME
1272:				
1273:				; the name has been matched in full. 
1274:				; proceed to load the data but first increment the high byte of E_LINE, which
1275:				; is one of the system variables to be loaded in. Since the low byte is loaded
1276:				; before the high byte, it is possible that, at the in-between stage, a false
1277:				; value could cause the load to end prematurely - see  LOAD/SAVE check.
1278:				
1279: 2279+23	0375  FD3415  	        INC     (IY+$15)        ; increment system variable E_LINE_hi.
1280: 2302+10	0378  210940  	        LD      HL,$4009        ; start loading at system variable VERSN.
1281:				
1282:				;; IN-PROG
1283: 2312+4	037B  50      	L037B:  LD      D,B             ; set D to zero as indicator.
1284: 2316+17	037C  CD4C03  	        CALL    L034C           ; routine IN-BYTE loads a byte
1285: 2333+7	037F  71      	        LD      (HL),C          ; insert assembled byte in memory.
1286: 2340+17	0380  CDFC01  	        CALL    L01FC           ; routine LOAD/SAVE                     >>
1287: 2357+12	0383  18F6    	        JR      L037B           ; loop back to IN-PROG
1288:				
1289:				; ---
1290:				
1291:				; this branch assembles a full byte before exiting normally
1292:				; from the IN-BYTE subroutine.
1293:				
1294:				;; GET-BIT
1295: 2369+11	0385  D5      	L0385:  PUSH    DE              ; save the 
1296: 2380+7	0386  1E94    	        LD      E,$94           ; timing value.
1297:				
1298:				;; TRAILER
1299: 2387+7	0388  061A    	L0388:  LD      B,$1A           ; counter to twenty six.
1300:				
1301:				;; COUNTER
1302: 2394+4	038A  1D      	L038A:  DEC     E               ; decrement the measuring timer.
1303: 2398+11	038B  DBFE    	        IN      A,($FE)         ; read the
1304: 2409+4	038D  17      	        RLA                     ;
1305: 2413+8	038E  CB7B    	        BIT     7,E             ;
1306: 2421+4	0390  7B      	        LD      A,E             ;
1307: 2425+7+5	0391  38F5    	        JR      C,L0388         ; loop back with carry to TRAILER
1308:				
1309: 2432+8+5	0393  10F5    	        DJNZ    L038A           ; to COUNTER
1310:				
1311: 2440+10	0395  D1      	        POP     DE              ;
1312: 2450+7+5	0396  2004    	        JR      NZ,L039C        ; to BIT-DONE
1313:				
1314: 2457+7	0398  FE56    	        CP      $56             ;
1315: 2464+7+5	039A  30B2    	        JR      NC,L034E        ; to NEXT-BIT
1316:				
1317:				;; BIT-DONE
1318: 2471+4	039C  3F      	L039C:  CCF                     ; complement carry flag
1319: 2475+8	039D  CB11    	        RL      C               ;
1320: 2483+7+5	039F  30AD    	        JR      NC,L034E        ; to NEXT-BIT
1321:				
1322: 2490+10	03A1  C9      	        RET                     ; return with full byte.
1323:				
1324:				; ---
1325:				
1326:				; if break is pressed while loading data then perform a reset.
1327:				; if break pressed while waiting for program on tape then OK to break.
1328:				
1329:				;; BREAK-4
1330: 2500+4	03A2  7A      	L03A2:  LD      A,D             ; transfer indicator to A.
1331: 2504+4	03A3  A7      	        AND     A               ; test for zero.
1332: 2508+7+5	03A4  28BB    	        JR      Z,L0361         ; back if so to RESTART
1333:				
1334:				
1335:				;; REPORT-D
1336: 2515+11	03A6  CF      	L03A6:  RST     08H             ; ERROR-1
1337:     -	03A7  0C      	        DEFB    $0C             ; Error Report: BREAK - CONT repeats
1338:				
1339:				; -----------------------------
1340:				; THE 'PROGRAM NAME' SUBROUTINE
1341:				; -----------------------------
1342:				;
1343:				;
1344:				
1345:				;; NAME
1346: 2526+17	03A8  CD550F  	L03A8:  CALL    L0F55           ; routine SCANNING
1347: 2543+13	03AB  3A0140  	        LD      A,($4001)       ; sv FLAGS
1348:				; Bit 6 - zero indicates string result, one a numeric one.
1349:				; Bit 7 - zero if checking syntax.
1350: 2556+4	03AE  87      	        ADD     A,A             ;
1351:				; Error if the argument is a number.
1352: 2560+10	03AF  FA9A0D  	        JP      M,L0D9A         ; to REPORT-C 'Nonsense in BASIC'
1353:				;
1354: 2570+10	03B2  E1      	        POP     HL
1355:				; Return to the caller of the command routine (load or save) if checking
1356:				; syntax.
1357: 2580+5+6	03B3  D0      	        RET     NC              ; 
1358:				
1359: 2585+11	03B4  E5      	        PUSH    HL              ;
1360: 2596+17	03B5  CDE702  	        CALL    L02E7           ; routine SET-FAST
1361: 2613+17	03B8  CDF813  	        CALL    L13F8           ; routine STK-FETCH
1362:				; The start of the name is in DE and the length in BC.
1363: 2630+4	03BB  62      	        LD      H,D             ;
1364: 2634+4	03BC  6B      	        LD      L,E             ;
1365: 2638+4	03BD  0D      	        DEC     C               ;
1366:				; Return with carry flag set (from syntax checking test above) if the name is
1367:				; a null string.
1368: 2642+5+6	03BE  F8      	        RET     M
1369:				
1370: 2647+11	03BF  09      	        ADD     HL,BC           ; Add and reset carry flag
1371:				; HL points to the end of the string.
1372: 2658+15	03C0  CBFE    	        SET     7,(HL)          ; Mark as terminator
1373: 2673+10	03C2  C9      	        RET                     ; Return with carry clear
1374:				
1375:				; -------------------------
1376:				; THE 'NEW' COMMAND ROUTINE
1377:				; -------------------------
1378:				;
1379:				;
1380:				
1381:				;; NEW
1382: 2683+17	03C3  CDE702  	L03C3:  CALL    L02E7           ; routine SET-FAST
1383: 2700+20	03C6  ED4B0440	        LD      BC,($4004)      ; fetch value of system variable RAMTOP
1384: 2720+6	03CA  0B      	        DEC     BC              ; point to last system byte.
1385:				
1386:				; -----------------------
1387:				; THE 'RAM CHECK' ROUTINE
1388:				; -----------------------
1389:				;
1390:				;
1391:				
1392:				;; RAM-CHECK
1393: 2726+4	03CB  60      	L03CB:  LD      H,B             ;
1394: 2730+4	03CC  69      	        LD      L,C             ;
1395: 2734+7	03CD  3E3F    	        LD      A,$3F           ;
1396:				
1397:				;; RAM-FILL
1398: 2741+10	03CF  3602    	L03CF:  LD      (HL),$02        ;
1399: 2751+6	03D1  2B      	        DEC     HL              ;
1400: 2757+4	03D2  BC      	        CP      H               ;
1401: 2761+7+5	03D3  20FA    	        JR      NZ,L03CF        ; to RAM-FILL
1402:				
1403:				;; RAM-READ
1404: 2768+4	03D5  A7      	L03D5:  AND     A               ;
1405: 2772+15	03D6  ED42    	        SBC     HL,BC           ;
1406: 2787+11	03D8  09      	        ADD     HL,BC           ;
1407: 2798+6	03D9  23      	        INC     HL              ;
1408: 2804+7+5	03DA  3006    	        JR      NC,L03E2        ; to SET-TOP
1409:				
1410: 2811+11	03DC  35      	        DEC     (HL)            ;
1411: 2822+7+5	03DD  2803    	        JR      Z,L03E2         ; to SET-TOP
1412:				
1413: 2829+11	03DF  35      	        DEC     (HL)            ;
1414: 2840+7+5	03E0  28F3    	        JR      Z,L03D5         ; to RAM-READ
1415:				
1416:				;; SET-TOP
1417: 2847+16	03E2  220440  	L03E2:  LD      ($4004),HL      ; set system variable RAMTOP to first byte 
1418:				                                ; above the BASIC system area.
1419:				
1420:				; ----------------------------
1421:				; THE 'INITIALIZATION' ROUTINE
1422:				; ----------------------------
1423:				;
1424:				;
1425:				
1426:				;; INITIAL
1427: 2863+16	03E5  2A0440  	L03E5:  LD      HL,($4004)      ; fetch system variable RAMTOP.
1428: 2879+6	03E8  2B      	        DEC     HL              ; point to last system byte.
1429: 2885+10	03E9  363E    	        LD      (HL),$3E        ; make GO SUB end-marker $3E - too high for
1430:				                                ; high order byte of line number.
1431:				                                ; (was $3F on ZX80)
1432: 2895+6	03EB  2B      	        DEC     HL              ; point to unimportant low-order byte.
1433: 2901+6	03EC  F9      	        LD      SP,HL           ; and initialize the stack-pointer to this
1434:				                                ; location.
1435: 2907+6	03ED  2B      	        DEC     HL              ; point to first location on the machine stack
1436: 2913+6	03EE  2B      	        DEC     HL              ; which will be filled by next CALL/PUSH.
1437: 2919+16	03EF  220240  	        LD      ($4002),HL      ; set the error stack pointer ERR_SP to
1438:				                                ; the base of the now empty machine stack.
1439:				
1440:				; Now set the I register so that the video hardware knows where to find the
1441:				; character set. This ROM only uses the character set when printing to 
1442:				; the ZX Printer. The TV picture is formed by the external video hardware. 
1443:				; Consider also, that this 8K ROM can be retro-fitted to the ZX80 instead of 
1444:				; its original 4K ROM so the video hardware could be on the ZX80.
1445:				
1446: 2935+7	03F2  3E1E    	        LD      A,$1E           ; address for this ROM is $1E00.
1447: 2942+9	03F4  ED47    	        LD      I,A             ; set I register from A.
1448: 2951+8	03F6  ED56    	        IM      1               ; select Z80 Interrupt Mode 1.
1449:				
1450: 2959+14	03F8  FD210040	        LD      IY,$4000        ; set IY to the start of RAM so that the 
1451:				                                ; system variables can be indexed.
1452: 2973+19	03FC  FD363B40	        LD      (IY+$3B),$40    ; set CDFLAG 0100 0000. Bit 6 indicates 
1453:				                                ; Compute and Display required.
1454:				
1455: 2992+10	0400  217D40  	        LD      HL,$407D        ; The first location after System Variables -
1456:				                                ; 16509 decimal.
1457: 3002+16	0403  220C40  	        LD      ($400C),HL      ; set system variable D_FILE to this value.
1458: 3018+7	0406  0619    	        LD      B,$19           ; prepare minimal screen of 24 NEWLINEs
1459:				                                ; following an initial NEWLINE.
1460:				
1461:				;; LINE
1462: 3025+10	0408  3676    	L0408:  LD      (HL),$76        ; insert NEWLINE (HALT instruction)
1463: 3035+6	040A  23      	        INC     HL              ; point to next location.
1464: 3041+8+5	040B  10FB    	        DJNZ    L0408           ; loop back for all twenty five to LINE
1465:				
1466: 3049+16	040D  221040  	        LD      ($4010),HL      ; set system variable VARS to next location
1467:				
1468: 3065+17	0410  CD9A14  	        CALL    L149A           ; routine CLEAR sets $80 end-marker and the 
1469:				                                ; dynamic memory pointers E_LINE, STKBOT and
1470:				                                ; STKEND.
1471:				
1472:				;; N/L-ONLY
1473: 3082+17	0413  CDAD14  	L0413:  CALL    L14AD           ; routine CURSOR-IN inserts the cursor and 
1474:				                                ; end-marker in the Edit Line also setting
1475:				                                ; size of lower display to two lines.
1476:				
1477: 3099+17	0416  CD0702  	        CALL    L0207           ; routine SLOW/FAST selects COMPUTE and DISPLAY
1478:				
1479:				; ---------------------------
1480:				; THE 'BASIC LISTING' SECTION
1481:				; ---------------------------
1482:				;
1483:				;
1484:				
1485:				;; UPPER
1486: 3116+17	0419  CD2A0A  	L0419:  CALL    L0A2A           ; routine CLS
1487: 3133+16	041C  2A0A40  	        LD      HL,($400A)      ; sv E_PPC_lo
1488: 3149+20	041F  ED5B2340	        LD      DE,($4023)      ; sv S_TOP_lo
1489: 3169+4	0423  A7      	        AND     A               ;
1490: 3173+15	0424  ED52    	        SBC     HL,DE           ;
1491: 3188+4	0426  EB      	        EX      DE,HL           ;
1492: 3192+7+5	0427  3004    	        JR      NC,L042D        ; to ADDR-TOP
1493:				
1494: 3199+11	0429  19      	        ADD     HL,DE           ;
1495: 3210+16	042A  222340  	        LD      ($4023),HL      ; sv S_TOP_lo
1496:				
1497:				;; ADDR-TOP
1498: 3226+17	042D  CDD809  	L042D:  CALL    L09D8           ; routine LINE-ADDR
1499: 3243+7+5	0430  2801    	        JR      Z,L0433         ; to LIST-TOP
1500:				
1501: 3250+4	0432  EB      	        EX      DE,HL           ;
1502:				
1503:				;; LIST-TOP
1504: 3254+17	0433  CD3E07  	L0433:  CALL    L073E           ; routine LIST-PROG
1505: 3271+23	0436  FD351E  	        DEC     (IY+$1E)        ; sv BERG
1506: 3294+7+5	0439  2037    	        JR      NZ,L0472        ; to LOWER
1507:				
1508: 3301+16	043B  2A0A40  	        LD      HL,($400A)      ; sv E_PPC_lo
1509: 3317+17	043E  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
1510: 3334+16	0441  2A1640  	        LD      HL,($4016)      ; sv CH_ADD_lo
1511: 3350+4	0444  37      	        SCF                     ; Set Carry Flag
1512: 3354+15	0445  ED52    	        SBC     HL,DE           ;
1513: 3369+10	0447  212340  	        LD      HL,$4023        ; sv S_TOP_lo
1514: 3379+7+5	044A  300B    	        JR      NC,L0457        ; to INC-LINE
1515:				
1516: 3386+4	044C  EB      	        EX      DE,HL           ;
1517: 3390+7	044D  7E      	        LD      A,(HL)          ;
1518: 3397+6	044E  23      	        INC     HL              ;
1519: 3403+16	044F  EDA0    	        LDI                     ;
1520: 3419+7	0451  12      	        LD      (DE),A          ;
1521: 3426+12	0452  18C5    	        JR       L0419          ; to UPPER
1522:				
1523:				; ---
1524:				
1525:				;; DOWN-KEY
1526: 3438+10	0454  210A40  	L0454:  LD      HL,$400A        ; sv E_PPC_lo
1527:				
1528:				;; INC-LINE
1529: 3448+7	0457  5E      	L0457:  LD      E,(HL)          ;
1530: 3455+6	0458  23      	        INC     HL              ;
1531: 3461+7	0459  56      	        LD      D,(HL)          ;
1532: 3468+11	045A  E5      	        PUSH    HL              ;
1533: 3479+4	045B  EB      	        EX      DE,HL           ;
1534: 3483+6	045C  23      	        INC     HL              ;
1535: 3489+17	045D  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
1536: 3506+17	0460  CDBB05  	        CALL    L05BB           ; routine LINE-NO
1537: 3523+10	0463  E1      	        POP     HL              ;
1538:				
1539:				;; KEY-INPUT
1540: 3533+20	0464  FDCB2D6E	L0464:  BIT     5,(IY+$2D)      ; sv FLAGX
1541: 3553+7+5	0468  2008    	        JR      NZ,L0472        ; forward to LOWER
1542:				
1543: 3560+7	046A  72      	        LD      (HL),D          ;
1544: 3567+6	046B  2B      	        DEC     HL              ;
1545: 3573+7	046C  73      	        LD      (HL),E          ;
1546: 3580+12	046D  18AA    	        JR      L0419           ; to UPPER
1547:				
1548:				; ----------------------------
1549:				; THE 'EDIT LINE COPY' SECTION
1550:				; ----------------------------
1551:				; This routine sets the edit line to just the cursor when
1552:				; 1) There is not enough memory to edit a BASIC line.
1553:				; 2) The edit key is used during input.
1554:				; The entry point LOWER
1555:				
1556:				
1557:				;; EDIT-INP
1558: 3592+17	046F  CDAD14  	L046F:  CALL    L14AD           ; routine CURSOR-IN sets cursor only edit line.
1559:				
1560:				; ->
1561:				
1562:				;; LOWER
1563: 3609+16	0472  2A1440  	L0472:  LD      HL,($4014)      ; fetch edit line start from E_LINE.
1564:				
1565:				;; EACH-CHAR
1566: 3625+7	0475  7E      	L0475:  LD      A,(HL)          ; fetch a character from edit line.
1567: 3632+7	0476  FE7E    	        CP      $7E             ; compare to the number marker.
1568: 3639+7+5	0478  2008    	        JR      NZ,L0482        ; forward if not to END-LINE
1569:				
1570: 3646+10	047A  010600  	        LD      BC,$0006        ; else six invisible bytes to be removed.
1571: 3656+17	047D  CD600A  	        CALL    L0A60           ; routine RECLAIM-2
1572: 3673+12	0480  18F3    	        JR      L0475           ; back to EACH-CHAR
1573:				
1574:				; ---
1575:				
1576:				;; END-LINE
1577: 3685+7	0482  FE76    	L0482:  CP      $76             ;
1578: 3692+6	0484  23      	        INC     HL              ;
1579: 3698+7+5	0485  20EE    	        JR      NZ,L0475        ; to EACH-CHAR
1580:				
1581:				;; EDIT-LINE
1582: 3705+17	0487  CD3705  	L0487:  CALL    L0537           ; routine CURSOR sets cursor K or L.
1583:				
1584:				;; EDIT-ROOM
1585: 3722+17	048A  CD1F0A  	L048A:  CALL    L0A1F           ; routine LINE-ENDS
1586: 3739+16	048D  2A1440  	        LD      HL,($4014)      ; sv E_LINE_lo
1587: 3755+19	0490  FD3600FF	        LD      (IY+$00),$FF    ; sv ERR_NR
1588: 3774+17	0494  CD6607  	        CALL    L0766           ; routine COPY-LINE
1589: 3791+20	0497  FDCB007E	        BIT     7,(IY+$00)      ; sv ERR_NR
1590: 3811+7+5	049B  2024    	        JR      NZ,L04C1        ; to DISPLAY-6
1591:				
1592: 3818+13	049D  3A2240  	        LD      A,($4022)       ; sv DF_SZ
1593: 3831+7	04A0  FE18    	        CP      $18             ;
1594: 3838+7+5	04A2  301D    	        JR      NC,L04C1        ; to DISPLAY-6
1595:				
1596: 3845+4	04A4  3C      	        INC     A               ;
1597: 3849+13	04A5  322240  	        LD      ($4022),A       ; sv DF_SZ
1598: 3862+4	04A8  47      	        LD      B,A             ;
1599: 3866+7	04A9  0E01    	        LD      C,$01           ;
1600: 3873+17	04AB  CD1809  	        CALL    L0918           ; routine LOC-ADDR
1601: 3890+4	04AE  54      	        LD      D,H             ;
1602: 3894+4	04AF  5D      	        LD      E,L             ;
1603: 3898+7	04B0  7E      	        LD      A,(HL)          ;
1604:				
1605:				;; FREE-LINE
1606: 3905+6	04B1  2B      	L04B1:  DEC     HL              ;
1607: 3911+7	04B2  BE      	        CP      (HL)            ;
1608: 3918+7+5	04B3  20FC    	        JR      NZ,L04B1        ; to FREE-LINE
1609:				
1610: 3925+6	04B5  23      	        INC     HL              ;
1611: 3931+4	04B6  EB      	        EX      DE,HL           ;
1612: 3935+13	04B7  3A0540  	        LD      A,($4005)       ; sv RAMTOP_hi
1613: 3948+7	04BA  FE4D    	        CP      $4D             ;
1614: 3955+10+7	04BC  DC5D0A  	        CALL    C,L0A5D         ; routine RECLAIM-1
1615: 3965+12	04BF  18C9    	        JR      L048A           ; to EDIT-ROOM
1616:				
1617:				; --------------------------
1618:				; THE 'WAIT FOR KEY' SECTION
1619:				; --------------------------
1620:				;
1621:				; The syntax error pointer is set to zero and a display is produced. Once a key
1622:				; has been pressed the display is terminated. The pressing of 'multiple keys'
1623:				; causes a jump back to LOWER.
1624:				
1625:				;; DISPLAY-6
1626: 3977+10	04C1  210000  	L04C1:  LD      HL,$0000        ;
1627: 3987+16	04C4  221840  	        LD      ($4018),HL      ; sv X_PTR_lo
1628:				
1629: 4003+10	04C7  213B40  	        LD      HL,$403B        ; system variable CDFLAG
1630: 4013+12	04CA  CB7E    	        BIT     7,(HL)          ;
1631:				
1632:				;        CALL    Z,L0229         ; routine DISPLAY-1 if fast mode
1633: 4025+4	04CC  00      	        nop
1634: 4029+4	04CD  00      	        nop
1635: 4033+4	04CE  00      	        nop
1636:				; Whether the call was executed or not, HL points to CDFLAG. When in fast mode,
1637:				; return is only made when a key has been pressed.
1638:				
1639:				;; SLOW-DISP
1640:				; Loop here until a key is pressed. In fast mode, we only reach here after a
1641:				; key has been pressed.
1642: 4037+17	04CF  CD391E  	L04CF:  call em_wait_key        ; Fetch a key code (in LAST_K)
1643: 4054+4	04D2  00      	        nop
1644:				;        BIT     0,(HL)          ;
1645:				;        JR      Z,L04CF         ; to SLOW-DISP if no key pressed
1646: 4058+20	04D3  ED4B2540	        LD      BC,($4025)      ; sv LAST_K
1647:				; Key column in B and row in C.
1648: 4078+17	04D7  CD4B0F  	        CALL    L0F4B           ; routine DEBOUNCE
1649:				; DEBOUNCE routine resets bit 0 of CDFLAG and set DEBOUNCE to 0xff.
1650: 4095+17	04DA  CDBD07  	        CALL    L07BD           ; routine DECODE
1651:				; HL - points to character code.
1652: 4112+7+5	04DD  3093    	        JR      NC,L0472        ; back to LOWER if invalid code
1653:				
1654:     -	0001          	                assert $ = 0x04DF       ; This address must be maintained
1655:				
1656:				; -------------------------------
1657:				; THE 'KEYBOARD DECODING' SECTION
1658:				; -------------------------------
1659:				;
1660:				; The differing modes give differing values for the keys of the keyboard. These
1661:				; are obtained from the key tables.
1662:				;   The decoded key value is in E and HL points to the position in the 
1663:				;   key table. D contains zero.
1664:				
1665:				;; K-DECODE 
1666: 4119+13	04DF  3A0640  	L04DF:  LD      A,($4006)       ; Fetch value of system variable MODE
1667: 4132+4	04E2  3D      	        DEC     A               ; test the three values together
1668:				
1669: 4136+10	04E3  FA0805  	        JP      M,L0508         ; forward, if was zero, to FETCH-2
1670:				
1671: 4146+7+5	04E6  200F    	        JR      NZ,L04F7        ; forward, if was 2, to FETCH-1
1672:				
1673:				;   The original value was one and is now zero.
1674:				
1675: 4153+13	04E8  320640  	        LD      ($4006),A       ; update the system variable MODE
1676:				
1677: 4166+4	04EB  1D      	        DEC     E               ; reduce E to range $00 - $7F
1678: 4170+4	04EC  7B      	        LD      A,E             ; place in A
1679: 4174+7	04ED  D627    	        SUB     $27             ; subtract 39 setting carry if range 00 - 38
1680: 4181+7+5	04EF  3801    	        JR      C,L04F2         ; forward, if so, to FUNC-BASE
1681:				
1682: 4188+4	04F1  5F      	        LD      E,A             ; else set E to reduced value
1683:				
1684:				;; FUNC-BASE
1685: 4192+10	04F2  21CC00  	L04F2:  LD      HL,L00CC        ; address of K-FUNCT table for function keys.
1686: 4202+12	04F5  180E    	        JR      L0505           ; forward to TABLE-ADD
1687:				
1688:				; ---
1689:				
1690:				;; FETCH-1
1691: 4214+7	04F7  7E      	L04F7:  LD      A,(HL)          ;
1692: 4221+7	04F8  FE76    	        CP      $76             ;
1693: 4228+7+5	04FA  282F    	        JR      Z,L052B         ; to K/L-KEY
1694:				
1695: 4235+7	04FC  FE40    	        CP      $40             ;
1696: 4242+8	04FE  CBFF    	        SET     7,A             ;
1697: 4250+7+5	0500  3819    	        JR      C,L051B         ; to ENTER
1698:				
1699: 4257+10	0502  21C700  	        LD      HL,$00C7        ; (expr reqd)
1700:				
1701:				;; TABLE-ADD
1702: 4267+11	0505  19      	L0505:  ADD     HL,DE           ;
1703: 4278+12	0506  180D    	        JR      L0515           ; to FETCH-3
1704:				
1705:				; ---
1706:				
1707:				;; FETCH-2
1708: 4290+7	0508  7E      	L0508:  LD      A,(HL)          ;
1709: 4297+20	0509  FDCB0156	        BIT     2,(IY+$01)      ; sv FLAGS  - K or L mode ?
1710: 4317+7+5	050D  2007    	        JR      NZ,L0516        ; to TEST-CURS
1711:				
1712: 4324+7	050F  C6C0    	        ADD     A,$C0           ;
1713: 4331+7	0511  FEE6    	        CP      $E6             ;
1714: 4338+7+5	0513  3001    	        JR      NC,L0516        ; to TEST-CURS
1715:				
1716:				;; FETCH-3
1717: 4345+7	0515  7E      	L0515:  LD      A,(HL)          ;
1718:				
1719:				;; TEST-CURS
1720: 4352+7	0516  FEF0    	L0516:  CP      $F0             ;
1721: 4359+10	0518  EA2D05  	        JP      PE,L052D        ; to KEY-SORT
1722:				
1723:				;; ENTER
1724: 4369+4	051B  5F      	L051B:  LD      E,A             ;
1725: 4373+17	051C  CD3705  	        CALL    L0537           ; routine CURSOR
1726:				
1727: 4390+4	051F  7B      	        LD      A,E             ;
1728: 4394+17	0520  CD2605  	        CALL    L0526           ; routine ADD-CHAR
1729:				
1730:				;; BACK-NEXT
1731: 4411+10	0523  C37204  	L0523:  JP      L0472           ; back to LOWER
1732:				
1733:				; ------------------------------
1734:				; THE 'ADD CHARACTER' SUBROUTINE
1735:				; ------------------------------
1736:				;
1737:				;
1738:				
1739:				;; ADD-CHAR
1740: 4421+17	0526  CD9B09  	L0526:  CALL    L099B           ; routine ONE-SPACE
1741: 4438+7	0529  12      	        LD      (DE),A          ;
1742: 4445+10	052A  C9      	        RET                     ;
1743:				
1744:				; -------------------------
1745:				; THE 'CURSOR KEYS' ROUTINE
1746:				; -------------------------
1747:				;
1748:				;
1749:				
1750:				;; K/L-KEY
1751: 4455+7	052B  3E78    	L052B:  LD      A,$78           ;
1752:				
1753:				;; KEY-SORT
1754: 4462+4	052D  5F      	L052D:  LD      E,A             ;
1755: 4466+10	052E  218204  	        LD      HL,$0482        ; base address of ED-KEYS (exp reqd)
1756: 4476+11	0531  19      	        ADD     HL,DE           ;
1757: 4487+11	0532  19      	        ADD     HL,DE           ;
1758: 4498+7	0533  4E      	        LD      C,(HL)          ;
1759: 4505+6	0534  23      	        INC     HL              ;
1760: 4511+7	0535  46      	        LD      B,(HL)          ;
1761: 4518+11	0536  C5      	        PUSH    BC              ;
1762:				
1763:				;; CURSOR
1764: 4529+16	0537  2A1440  	L0537:  LD      HL,($4014)      ; sv E_LINE_lo
1765: 4545+20	053A  FDCB2D6E	        BIT     5,(IY+$2D)      ; sv FLAGX
1766: 4565+7+5	053E  2016    	        JR      NZ,L0556        ; to L-MODE
1767:				
1768:				;; K-MODE
1769: 4572+23	0540  FDCB0196	L0540:  RES     2,(IY+$01)      ; sv FLAGS  - Signal use K mode
1770:				
1771:				;; TEST-CHAR
1772: 4595+7	0544  7E      	L0544:  LD      A,(HL)          ;
1773: 4602+7	0545  FE7F    	        CP      $7F             ;
1774: 4609+5+6	0547  C8      	        RET     Z               ; return
1775:				
1776: 4614+6	0548  23      	        INC     HL              ;
1777: 4620+17	0549  CDB407  	        CALL    L07B4           ; routine NUMBER
1778: 4637+7+5	054C  28F6    	        JR      Z,L0544         ; to TEST-CHAR
1779:				
1780: 4644+7	054E  FE26    	        CP      $26             ;
1781: 4651+7+5	0550  38F2    	        JR      C,L0544         ; to TEST-CHAR
1782:				
1783: 4658+7	0552  FEDE    	        CP      $DE             ;
1784: 4665+7+5	0554  28EA    	        JR      Z,L0540         ; to K-MODE
1785:				
1786:				;; L-MODE
1787: 4672+23	0556  FDCB01D6	L0556:  SET     2,(IY+$01)      ; sv FLAGS  - Signal use L mode
1788: 4695+12	055A  18E8    	        JR      L0544           ; to TEST-CHAR
1789:				
1790:				; --------------------------
1791:				; THE 'CLEAR-ONE' SUBROUTINE
1792:				; --------------------------
1793:				;
1794:				;
1795:				
1796:				;; CLEAR-ONE
1797: 4707+10	055C  010100  	L055C:  LD      BC,$0001        ;
1798: 4717+10	055F  C3600A  	        JP      L0A60           ; to RECLAIM-2
1799:				
1800:				
1801:				
1802:				; ------------------------
1803:				; THE 'EDITING KEYS' TABLE
1804:				; ------------------------
1805:				;
1806:				;
1807:				
1808:				;; ED-KEYS
1809:     -	0562  9F05    	L0562:  DEFW    L059F           ; Address: $059F; Address: UP-KEY
1810:     -	0564  5404    	        DEFW    L0454           ; Address: $0454; Address: DOWN-KEY
1811:     -	0566  7605    	        DEFW    L0576           ; Address: $0576; Address: LEFT-KEY
1812:     -	0568  7F05    	        DEFW    L057F           ; Address: $057F; Address: RIGHT-KEY
1813:     -	056A  AF05    	        DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
1814:     -	056C  C405    	        DEFW    L05C4           ; Address: $05C4; Address: EDIT-KEY
1815:     -	056E  0C06    	        DEFW    L060C           ; Address: $060C; Address: N/L-KEY
1816:     -	0570  8B05    	        DEFW    L058B           ; Address: $058B; Address: RUBOUT
1817:     -	0572  AF05    	        DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
1818:     -	0574  AF05    	        DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
1819:				
1820:				
1821:				; -------------------------
1822:				; THE 'CURSOR LEFT' ROUTINE
1823:				; -------------------------
1824:				;
1825:				;
1826:				
1827:				;; LEFT-KEY
1828: 4727+17	0576  CD9305  	L0576:  CALL    L0593           ; routine LEFT-EDGE
1829: 4744+7	0579  7E      	        LD      A,(HL)          ;
1830: 4751+10	057A  367F    	        LD      (HL),$7F        ;
1831: 4761+6	057C  23      	        INC     HL              ;
1832: 4767+12	057D  1809    	        JR      L0588           ; to GET-CODE
1833:				
1834:				; --------------------------
1835:				; THE 'CURSOR RIGHT' ROUTINE
1836:				; --------------------------
1837:				;
1838:				;
1839:				
1840:				;; RIGHT-KEY
1841: 4779+6	057F  23      	L057F:  INC     HL              ;
1842: 4785+7	0580  7E      	        LD      A,(HL)          ;
1843: 4792+7	0581  FE76    	        CP      $76             ;
1844: 4799+7+5	0583  2818    	        JR      Z,L059D         ; to ENDED-2
1845:				
1846: 4806+10	0585  367F    	        LD      (HL),$7F        ;
1847: 4816+6	0587  2B      	        DEC     HL              ;
1848:				
1849:				;; GET-CODE
1850: 4822+7	0588  77      	L0588:  LD      (HL),A          ;
1851:				
1852:				;; ENDED-1
1853: 4829+12	0589  1898    	L0589:  JR      L0523           ; to BACK-NEXT
1854:				
1855:				; --------------------
1856:				; THE 'RUBOUT' ROUTINE
1857:				; --------------------
1858:				;
1859:				;
1860:				
1861:				;; RUBOUT
1862: 4841+17	058B  CD9305  	L058B:  CALL    L0593           ; routine LEFT-EDGE
1863: 4858+17	058E  CD5C05  	        CALL    L055C           ; routine CLEAR-ONE
1864: 4875+12	0591  18F6    	        JR      L0589           ; to ENDED-1
1865:				
1866:				; ------------------------
1867:				; THE 'ED-EDGE' SUBROUTINE
1868:				; ------------------------
1869:				;
1870:				;
1871:				
1872:				;; LEFT-EDGE
1873: 4887+6	0593  2B      	L0593:  DEC     HL              ;
1874: 4893+20	0594  ED5B1440	        LD      DE,($4014)      ; sv E_LINE_lo
1875: 4913+7	0598  1A      	        LD      A,(DE)          ;
1876: 4920+7	0599  FE7F    	        CP      $7F             ;
1877: 4927+5+6	059B  C0      	        RET     NZ              ;
1878:				
1879: 4932+10	059C  D1      	        POP     DE              ;
1880:				
1881:				;; ENDED-2
1882: 4942+12	059D  18EA    	L059D:  JR      L0589           ; to ENDED-1
1883:				
1884:				; -----------------------
1885:				; THE 'CURSOR UP' ROUTINE
1886:				; -----------------------
1887:				;
1888:				;
1889:				
1890:				;; UP-KEY
1891: 4954+16	059F  2A0A40  	L059F:  LD      HL,($400A)      ; sv E_PPC_lo
1892: 4970+17	05A2  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
1893: 4987+4	05A5  EB      	        EX      DE,HL           ;
1894: 4991+17	05A6  CDBB05  	        CALL    L05BB           ; routine LINE-NO
1895: 5008+10	05A9  210B40  	        LD      HL,$400B        ; point to system variable E_PPC_hi
1896: 5018+10	05AC  C36404  	        JP      L0464           ; jump back to KEY-INPUT
1897:				
1898:				; --------------------------
1899:				; THE 'FUNCTION KEY' ROUTINE
1900:				; --------------------------
1901:				;
1902:				;
1903:				
1904:				;; FUNCTION
1905: 5028+4	05AF  7B      	L05AF:  LD      A,E             ;
1906: 5032+7	05B0  E607    	        AND     $07             ;
1907: 5039+13	05B2  320640  	        LD      ($4006),A       ; sv MODE
1908: 5052+12	05B5  18E6    	        JR      L059D           ; back to ENDED-2
1909:				
1910:				; ------------------------------------
1911:				; THE 'COLLECT LINE NUMBER' SUBROUTINE
1912:				; ------------------------------------
1913:				;
1914:				;
1915:				
1916:				;; ZERO-DE
1917: 5064+4	05B7  EB      	L05B7:  EX      DE,HL           ;
1918: 5068+10	05B8  11C204  	        LD      DE,L04C1 + 1    ; $04C2 - a location addressing two zeros.
1919:				
1920:				; ->
1921:				
1922:				;; LINE-NO
1923: 5078+7	05BB  7E      	L05BB:  LD      A,(HL)          ;
1924: 5085+7	05BC  E6C0    	        AND     $C0             ;
1925: 5092+7+5	05BE  20F7    	        JR      NZ,L05B7        ; to ZERO-DE
1926:				
1927: 5099+7	05C0  56      	        LD      D,(HL)          ;
1928: 5106+6	05C1  23      	        INC     HL              ;
1929: 5112+7	05C2  5E      	        LD      E,(HL)          ;
1930: 5119+10	05C3  C9      	        RET                     ;
1931:				
1932:				; ----------------------
1933:				; THE 'EDIT KEY' ROUTINE
1934:				; ----------------------
1935:				;
1936:				;
1937:				
1938:				;; EDIT-KEY
1939: 5129+17	05C4  CD1F0A  	L05C4:  CALL    L0A1F           ; routine LINE-ENDS clears lower display.
1940:				
1941: 5146+10	05C7  216F04  	        LD      HL,L046F        ; Address: EDIT-INP
1942: 5156+11	05CA  E5      	        PUSH    HL              ; ** is pushed as an error looping address.
1943:				
1944: 5167+20	05CB  FDCB2D6E	        BIT     5,(IY+$2D)      ; test FLAGX
1945: 5187+5+6	05CF  C0      	        RET     NZ              ; indirect jump if in input mode
1946:				                                ; to L046F, EDIT-INP (begin again).
1947:				
1948:				;
1949:				
1950: 5192+16	05D0  2A1440  	        LD      HL,($4014)      ; fetch E_LINE
1951: 5208+16	05D3  220E40  	        LD      ($400E),HL      ; and use to update the screen cursor DF_CC
1952:				
1953:				; so now RST $10 will print the line numbers to the edit line instead of screen.
1954:				; first make sure that no newline/out of screen can occur while sprinting the
1955:				; line numbers to the edit line.
1956:				
1957: 5224+10	05D6  212118  	        LD      HL,$1821        ; prepare line 0, column 0.
1958: 5234+16	05D9  223940  	        LD      ($4039),HL      ; update S_POSN with these dummy values.
1959:				
1960: 5250+16	05DC  2A0A40  	        LD      HL,($400A)      ; fetch current line from E_PPC may be a 
1961:				                                ; non-existent line e.g. last line deleted.
1962: 5266+17	05DF  CDD809  	        CALL    L09D8           ; routine LINE-ADDR gets address or that of
1963:				                                ; the following line.
1964: 5283+17	05E2  CDBB05  	        CALL    L05BB           ; routine LINE-NO gets line number if any in DE
1965:				                                ; leaving HL pointing at second low byte.
1966:				
1967: 5300+4	05E5  7A      	        LD      A,D             ; test the line number for zero.
1968: 5304+4	05E6  B3      	        OR      E               ;
1969: 5308+5+6	05E7  C8      	        RET     Z               ; return if no line number - no program to edit.
1970:				
1971: 5313+6	05E8  2B      	        DEC     HL              ; point to high byte.
1972: 5319+17	05E9  CDA50A  	        CALL    L0AA5           ; routine OUT-NO writes number to edit line.
1973:				
1974: 5336+6	05EC  23      	        INC     HL              ; point to length bytes.
1975: 5342+7	05ED  4E      	        LD      C,(HL)          ; low byte to C.
1976: 5349+6	05EE  23      	        INC     HL              ;
1977: 5355+7	05EF  46      	        LD      B,(HL)          ; high byte to B.
1978:				
1979: 5362+6	05F0  23      	        INC     HL              ; point to first character in line.
1980: 5368+20	05F1  ED5B0E40	        LD      DE,($400E)      ; fetch display file cursor DF_CC
1981:				
1982: 5388+7	05F5  3E7F    	        LD      A,$7F           ; prepare the cursor character.
1983: 5395+7	05F7  12      	        LD      (DE),A          ; and insert in edit line.
1984: 5402+6	05F8  13      	        INC     DE              ; increment intended destination.
1985:				
1986: 5408+11	05F9  E5      	        PUSH    HL              ; * save start of BASIC.
1987:				
1988: 5419+10	05FA  211D00  	        LD      HL,$001D        ; set an overhead of 29 bytes.
1989: 5429+11	05FD  19      	        ADD     HL,DE           ; add in the address of cursor.
1990: 5440+11	05FE  09      	        ADD     HL,BC           ; add the length of the line.
1991: 5451+15	05FF  ED72    	        SBC     HL,SP           ; subtract the stack pointer.
1992:				
1993: 5466+10	0601  E1      	        POP     HL              ; * restore pointer to start of BASIC.
1994:				
1995: 5476+5+6	0602  D0      	        RET     NC              ; return if not enough room to L046F EDIT-INP.
1996:				                                ; the edit key appears not to work.
1997:				
1998: 5481+16+5	0603  EDB0    	        LDIR                    ; else copy bytes from program to edit line.
1999:				                                ; Note. hidden floating point forms are also
2000:				                                ; copied to edit line.
2001:				
2002: 5497+4	0605  EB      	        EX      DE,HL           ; transfer free location pointer to HL
2003:				
2004: 5501+10	0606  D1      	        POP     DE              ; ** remove address EDIT-INP from stack.
2005:				
2006: 5511+17	0607  CDA614  	        CALL    L14A6           ; routine SET-STK-B sets STKEND from HL.
2007:				
2008: 5528+12	060A  1891    	        JR      L059D           ; back to ENDED-2 and after 3 more jumps
2009:				                                ; to L0472, LOWER.
2010:				                                ; Note. The LOWER routine removes the hidden 
2011:				                                ; floating-point numbers from the edit line.
2012:				
2013:				; -------------------------
2014:				; THE 'NEWLINE KEY' ROUTINE
2015:				; -------------------------
2016:				;
2017:				;
2018:				
2019:				;; N/L-KEY
2020: 5540+17	060C  CD1F0A  	L060C:  CALL    L0A1F           ; routine LINE-ENDS
2021:				
2022: 5557+10	060F  217204  	        LD      HL,L0472        ; prepare address: LOWER
2023:				
2024: 5567+20	0612  FDCB2D6E	        BIT     5,(IY+$2D)      ; sv FLAGX
2025: 5587+7+5	0616  2011    	        JR      NZ,L0629        ; to NOW-SCAN
2026:				
2027: 5594+16	0618  2A1440  	        LD      HL,($4014)      ; sv E_LINE_lo
2028: 5610+7	061B  7E      	        LD      A,(HL)          ;
2029: 5617+7	061C  FEFF    	        CP      $FF             ;
2030: 5624+7+5	061E  2806    	        JR      Z,L0626         ; to STK-UPPER
2031:				
2032: 5631+17	0620  CDE208  	        CALL    L08E2           ; routine CLEAR-PRB
2033: 5648+17	0623  CD2A0A  	        CALL    L0A2A           ; routine CLS
2034:				
2035:				;; STK-UPPER
2036: 5665+10	0626  211904  	L0626:  LD      HL,L0419        ; Address: UPPER
2037:				
2038:				;; NOW-SCAN
2039: 5675+11	0629  E5      	L0629:  PUSH    HL              ; push routine address (LOWER or UPPER).
2040: 5686+17	062A  CDBA0C  	        CALL    L0CBA           ; routine LINE-SCAN
2041: 5703+10	062D  E1      	        POP     HL              ;
2042: 5713+17	062E  CD3705  	        CALL    L0537           ; routine CURSOR
2043: 5730+17	0631  CD5C05  	        CALL    L055C           ; routine CLEAR-ONE
2044: 5747+17	0634  CD730A  	        CALL    L0A73           ; routine E-LINE-NO
2045: 5764+7+5	0637  2015    	        JR      NZ,L064E        ; to N/L-INP
2046:				
2047: 5771+4	0639  78      	        LD      A,B             ;
2048: 5775+4	063A  B1      	        OR      C               ;
2049: 5779+10	063B  C2E006  	        JP      NZ,L06E0        ; to N/L-LINE
2050:				
2051: 5789+6	063E  0B      	        DEC     BC              ;
2052: 5795+6	063F  0B      	        DEC     BC              ;
2053: 5801+20	0640  ED430740	        LD      ($4007),BC      ; sv PPC_lo
2054: 5821+19	0644  FD362202	        LD      (IY+$22),$02    ; sv DF_SZ
2055: 5840+20	0648  ED5B0C40	        LD      DE,($400C)      ; sv D_FILE_lo
2056:				
2057: 5860+12	064C  1813    	        JR      L0661           ; forward to TEST-NULL
2058:				
2059:				; ---
2060:				
2061:				;; N/L-INP
2062: 5872+7	064E  FE76    	L064E:  CP      $76             ;
2063: 5879+7+5	0650  2812    	        JR      Z,L0664         ; to N/L-NULL
2064:				
2065: 5886+20	0652  ED4B3040	        LD      BC,($4030)      ; sv T_ADDR_lo
2066: 5906+17	0656  CD1809  	        CALL    L0918           ; routine LOC-ADDR
2067: 5923+20	0659  ED5B2940	        LD      DE,($4029)      ; sv NXTLIN_lo
2068: 5943+19	065D  FD362202	        LD      (IY+$22),$02    ; sv DF_SZ
2069:				
2070:				;; TEST-NULL
2071: 5962+11	0661  DF      	L0661:  RST     18H             ; GET-CHAR
2072: 5973+7	0662  FE76    	        CP      $76             ;
2073:				
2074:				;; N/L-NULL
2075: 5980+10	0664  CA1304  	L0664:  JP      Z,L0413         ; to N/L-ONLY
2076:				
2077: 5990+19	0667  FD360180	        LD      (IY+$01),$80    ; sv FLAGS
2078: 6009+4	066B  EB      	        EX      DE,HL           ;
2079:				
2080:				;; NEXT-LINE
2081: 6013+16	066C  222940  	L066C:  LD      ($4029),HL      ; sv NXTLIN_lo
2082: 6029+4	066F  EB      	        EX      DE,HL           ;
2083: 6033+17	0670  CD4D00  	        CALL    L004D           ; routine TEMP-PTR-2
2084: 6050+17	0673  CDC10C  	        CALL    L0CC1           ; routine LINE-RUN
2085: 6067+23	0676  FDCB018E	        RES     1,(IY+$01)      ; sv FLAGS  - Signal printer not in use
2086: 6090+7	067A  3EC0    	        LD      A,$C0           ;
2087: 6097+19	067C  FD7719  	        LD      (IY+$19),A      ; sv X_PTR_lo
2088: 6116+17	067F  CDA314  	        CALL    L14A3           ; routine X-TEMP
2089: 6133+23	0682  FDCB2DAE	        RES     5,(IY+$2D)      ; sv FLAGX
2090: 6156+20	0686  FDCB007E	        BIT     7,(IY+$00)      ; sv ERR_NR
2091: 6176+7+5	068A  2822    	        JR      Z,L06AE         ; to STOP-LINE
2092:				
2093: 6183+16	068C  2A2940  	        LD      HL,($4029)      ; sv NXTLIN_lo
2094: 6199+7	068F  A6      	        AND     (HL)            ;
2095: 6206+7+5	0690  201C    	        JR       NZ,L06AE       ; to STOP-LINE
2096:				
2097: 6213+7	0692  56      	        LD      D,(HL)          ;
2098: 6220+6	0693  23      	        INC     HL              ;
2099: 6226+7	0694  5E      	        LD      E,(HL)          ;
2100: 6233+20	0695  ED530740	        LD      ($4007),DE      ; sv PPC_lo
2101: 6253+6	0699  23      	        INC     HL              ;
2102: 6259+7	069A  5E      	        LD      E,(HL)          ;
2103: 6266+6	069B  23      	        INC     HL              ;
2104: 6272+7	069C  56      	        LD      D,(HL)          ;
2105: 6279+6	069D  23      	        INC     HL              ;
2106: 6285+4	069E  EB      	        EX      DE,HL           ;
2107: 6289+11	069F  19      	        ADD     HL,DE           ;
2108: 6300+17	06A0  CD460F  	        CALL    L0F46           ; routine BREAK-1
2109: 6317+7+5	06A3  38C7    	        JR      C,L066C         ; to NEXT-LINE
2110:				
2111: 6324+10	06A5  210040  	        LD      HL,$4000        ; sv ERR_NR
2112: 6334+12	06A8  CB7E    	        BIT     7,(HL)          ;
2113: 6346+7+5	06AA  2802    	        JR      Z,L06AE         ; to STOP-LINE
2114:				
2115: 6353+10	06AC  360C    	        LD      (HL),$0C        ;
2116:				
2117:				;; STOP-LINE
2118: 6363+20	06AE  FDCB387E	L06AE:  BIT     7,(IY+$38)      ; sv PR_CC
2119: 6383+10+7	06B2  CC7108  	        CALL    Z,L0871         ; routine COPY-BUFF
2120: 6393+10	06B5  012101  	        LD      BC,$0121        ;
2121: 6403+17	06B8  CD1809  	        CALL    L0918           ; routine LOC-ADDR
2122: 6420+13	06BB  3A0040  	        LD      A,($4000)       ; sv ERR_NR
2123: 6433+20	06BE  ED4B0740	        LD      BC,($4007)      ; sv PPC_lo
2124: 6453+4	06C2  3C      	        INC     A               ;
2125: 6457+7+5	06C3  280C    	        JR      Z,L06D1         ; to REPORT
2126:				
2127: 6464+7	06C5  FE09    	        CP      $09             ;
2128: 6471+7+5	06C7  2001    	        JR      NZ,L06CA        ; to CONTINUE
2129:				
2130: 6478+6	06C9  03      	        INC     BC              ;
2131:				
2132:				;; CONTINUE
2133: 6484+20	06CA  ED432B40	L06CA:  LD      ($402B),BC      ; sv OLDPPC_lo
2134: 6504+7+5	06CE  2001    	        JR      NZ,L06D1        ; to REPORT
2135:				
2136: 6511+6	06D0  0B      	        DEC     BC              ;
2137:				
2138:				;; REPORT
2139: 6517+17	06D1  CDEB07  	L06D1:  CALL    L07EB           ; routine OUT-CODE
2140: 6534+7	06D4  3E18    	        LD      A,$18           ;
2141:				
2142: 6541+11	06D6  D7      	        RST     10H             ; PRINT-A
2143: 6552+17	06D7  CD980A  	        CALL    L0A98           ; routine OUT-NUM
2144: 6569+17	06DA  CDAD14  	        CALL    L14AD           ; routine CURSOR-IN
2145: 6586+10	06DD  C3C104  	        JP      L04C1           ; to DISPLAY-6
2146:				
2147:				; ---
2148:				
2149:				;; N/L-LINE
2150: 6596+20	06E0  ED430A40	L06E0:  LD      ($400A),BC      ; sv E_PPC_lo
2151: 6616+16	06E4  2A1640  	        LD      HL,($4016)      ; sv CH_ADD_lo
2152: 6632+4	06E7  EB      	        EX      DE,HL           ;
2153: 6636+10	06E8  211304  	        LD      HL,L0413        ; Address: N/L-ONLY
2154: 6646+11	06EB  E5      	        PUSH    HL              ;
2155: 6657+16	06EC  2A1A40  	        LD      HL,($401A)      ; sv STKBOT_lo
2156: 6673+15	06EF  ED52    	        SBC     HL,DE           ;
2157: 6688+11	06F1  E5      	        PUSH    HL              ;
2158: 6699+11	06F2  C5      	        PUSH    BC              ;
2159: 6710+17	06F3  CDE702  	        CALL    L02E7           ; routine SET-FAST
2160: 6727+17	06F6  CD2A0A  	        CALL    L0A2A           ; routine CLS
2161: 6744+10	06F9  E1      	        POP     HL              ;
2162: 6754+17	06FA  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
2163: 6771+7+5	06FD  2006    	        JR      NZ,L0705        ; to COPY-OVER
2164:				
2165: 6778+17	06FF  CDF209  	        CALL    L09F2           ; routine NEXT-ONE
2166: 6795+17	0702  CD600A  	        CALL    L0A60           ; routine RECLAIM-2
2167:				
2168:				;; COPY-OVER
2169: 6812+10	0705  C1      	L0705:  POP     BC              ;
2170: 6822+4	0706  79      	        LD      A,C             ;
2171: 6826+4	0707  3D      	        DEC     A               ;
2172: 6830+4	0708  B0      	        OR      B               ;
2173: 6834+5+6	0709  C8      	        RET     Z               ;
2174:				
2175: 6839+11	070A  C5      	        PUSH    BC              ;
2176: 6850+6	070B  03      	        INC     BC              ;
2177: 6856+6	070C  03      	        INC     BC              ;
2178: 6862+6	070D  03      	        INC     BC              ;
2179: 6868+6	070E  03      	        INC     BC              ;
2180: 6874+6	070F  2B      	        DEC     HL              ;
2181: 6880+17	0710  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
2182: 6897+17	0713  CD0702  	        CALL    L0207           ; routine SLOW/FAST
2183: 6914+10	0716  C1      	        POP     BC              ;
2184: 6924+11	0717  C5      	        PUSH    BC              ;
2185: 6935+6	0718  13      	        INC     DE              ;
2186: 6941+16	0719  2A1A40  	        LD      HL,($401A)      ; sv STKBOT_lo
2187: 6957+6	071C  2B      	        DEC     HL              ;
2188: 6963+16+5	071D  EDB8    	        LDDR                    ; copy bytes
2189: 6979+16	071F  2A0A40  	        LD      HL,($400A)      ; sv E_PPC_lo
2190: 6995+4	0722  EB      	        EX      DE,HL           ;
2191: 6999+10	0723  C1      	        POP     BC              ;
2192: 7009+7	0724  70      	        LD      (HL),B          ;
2193: 7016+6	0725  2B      	        DEC     HL              ;
2194: 7022+7	0726  71      	        LD      (HL),C          ;
2195: 7029+6	0727  2B      	        DEC     HL              ;
2196: 7035+7	0728  73      	        LD      (HL),E          ;
2197: 7042+6	0729  2B      	        DEC     HL              ;
2198: 7048+7	072A  72      	        LD      (HL),D          ;
2199:				
2200: 7055+10	072B  C9      	        RET                     ; return.
2201:				
2202:				; ---------------------------------------
2203:				; THE 'LIST' AND 'LLIST' COMMAND ROUTINES
2204:				; ---------------------------------------
2205:				;
2206:				;
2207:				
2208:				;; LLIST
2209: 7065+23	072C  FDCB01CE	L072C:  SET     1,(IY+$01)      ; sv FLAGS  - signal printer in use
2210:				
2211:				;; LIST
2212: 7088+17	0730  CDA70E  	L0730:  CALL    L0EA7           ; routine FIND-INT
2213:				
2214: 7105+4	0733  78      	        LD      A,B             ; fetch high byte of user-supplied line number.
2215: 7109+7	0734  E63F    	        AND     $3F             ; and crudely limit to range 1-16383.
2216:				
2217: 7116+4	0736  67      	        LD      H,A             ;
2218: 7120+4	0737  69      	        LD      L,C             ;
2219: 7124+16	0738  220A40  	        LD      ($400A),HL      ; sv E_PPC_lo
2220: 7140+17	073B  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
2221:				
2222:				;; LIST-PROG
2223: 7157+7	073E  1E00    	L073E:  LD      E,$00           ;
2224:				
2225:				;; UNTIL-END
2226: 7164+17	0740  CD4507  	L0740:  CALL    L0745           ; routine OUT-LINE lists one line of BASIC
2227:				                                ; making an early return when the screen is
2228:				                                ; full or the end of program is reached.    >>
2229: 7181+12	0743  18FB    	        JR      L0740           ; loop back to UNTIL-END
2230:				
2231:				; -----------------------------------
2232:				; THE 'PRINT A BASIC LINE' SUBROUTINE
2233:				; -----------------------------------
2234:				;
2235:				;
2236:				
2237:				;; OUT-LINE
2238: 7193+20	0745  ED4B0A40	L0745:  LD      BC,($400A)      ; sv E_PPC_lo
2239: 7213+17	0749  CDEA09  	        CALL    L09EA           ; routine CP-LINES
2240: 7230+7	074C  1692    	        LD      D,$92           ;
2241: 7237+7+5	074E  2805    	        JR      Z,L0755         ; to TEST-END
2242:				
2243: 7244+10	0750  110000  	        LD      DE,$0000        ;
2244: 7254+8	0753  CB13    	        RL      E               ;
2245:				
2246:				;; TEST-END
2247: 7262+19	0755  FD731E  	L0755:  LD      (IY+$1E),E      ; sv BERG
2248: 7281+7	0758  7E      	        LD      A,(HL)          ;
2249: 7288+7	0759  FE40    	        CP      $40             ;
2250: 7295+10	075B  C1      	        POP     BC              ;
2251: 7305+5+6	075C  D0      	        RET     NC              ;
2252:				
2253: 7310+11	075D  C5      	        PUSH    BC              ;
2254: 7321+17	075E  CDA50A  	        CALL    L0AA5           ; routine OUT-NO
2255: 7338+6	0761  23      	        INC     HL              ;
2256: 7344+4	0762  7A      	        LD      A,D             ;
2257:				
2258: 7348+11	0763  D7      	        RST     10H             ; PRINT-A
2259: 7359+6	0764  23      	        INC     HL              ;
2260: 7365+6	0765  23      	        INC     HL              ;
2261:				
2262:				;; COPY-LINE
2263: 7371+16	0766  221640  	L0766:  LD      ($4016),HL      ; sv CH_ADD_lo
2264: 7387+23	0769  FDCB01C6	        SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
2265:				
2266:				;; MORE-LINE
2267: 7410+20	076D  ED4B1840	L076D:  LD      BC,($4018)      ; sv X_PTR_lo
2268: 7430+16	0771  2A1640  	        LD      HL,($4016)      ; sv CH_ADD_lo
2269: 7446+4	0774  A7      	        AND      A              ;
2270: 7450+15	0775  ED42    	        SBC     HL,BC           ;
2271: 7465+7+5	0777  2003    	        JR      NZ,L077C        ; to TEST-NUM
2272:				
2273: 7472+7	0779  3EB8    	        LD      A,$B8           ;
2274:				
2275: 7479+11	077B  D7      	        RST     10H             ; PRINT-A
2276:				
2277:				;; TEST-NUM
2278: 7490+16	077C  2A1640  	L077C:  LD      HL,($4016)      ; sv CH_ADD_lo
2279: 7506+7	077F  7E      	        LD      A,(HL)          ;
2280: 7513+6	0780  23      	        INC     HL              ;
2281: 7519+17	0781  CDB407  	        CALL    L07B4           ; routine NUMBER
2282: 7536+16	0784  221640  	        LD      ($4016),HL      ; sv CH_ADD_lo
2283: 7552+7+5	0787  28E4    	        JR      Z,L076D         ; to MORE-LINE
2284:				
2285: 7559+7	0789  FE7F    	        CP      $7F             ;
2286: 7566+7+5	078B  2810    	        JR      Z,L079D         ; to OUT-CURS
2287:				
2288: 7573+7	078D  FE76    	        CP      $76             ;
2289: 7580+7+5	078F  285D    	        JR      Z,L07EE         ; to OUT-CH
2290:				
2291: 7587+8	0791  CB77    	        BIT     6,A             ;
2292: 7595+7+5	0793  2805    	        JR      Z,L079A         ; to NOT-TOKEN
2293:				
2294: 7602+17	0795  CD4B09  	        CALL    L094B           ; routine TOKENS
2295: 7619+12	0798  18D3    	        JR      L076D           ; to MORE-LINE
2296:				
2297:				; ---
2298:				
2299:				
2300:				;; NOT-TOKEN
2301: 7631+11	079A  D7      	L079A:  RST     10H             ; PRINT-A
2302: 7642+12	079B  18D0    	        JR      L076D           ; to MORE-LINE
2303:				
2304:				; ---
2305:				
2306:				;; OUT-CURS
2307: 7654+13	079D  3A0640  	L079D:  LD      A,($4006)       ; Fetch value of system variable MODE
2308: 7667+7	07A0  06AB    	        LD      B,$AB           ; Prepare an inverse [F] for function cursor.
2309:				
2310: 7674+4	07A2  A7      	        AND     A               ; Test for zero -
2311: 7678+7+5	07A3  2005    	        JR      NZ,L07AA        ; forward if not to FLAGS-2
2312:				
2313: 7685+13	07A5  3A0140  	        LD      A,($4001)       ; Fetch system variable FLAGS.
2314: 7698+7	07A8  06B0    	        LD      B,$B0           ; Prepare an inverse [K] for keyword cursor.
2315:				
2316:				;; FLAGS-2
2317: 7705+4	07AA  1F      	L07AA:  RRA                     ; 00000?00 -> 000000?0
2318: 7709+4	07AB  1F      	        RRA                     ; 000000?0 -> 0000000?
2319: 7713+7	07AC  E601    	        AND     $01             ; 0000000?    0000000x
2320:				
2321: 7720+4	07AE  80      	        ADD     A,B             ; Possibly [F] -> [G]  or  [K] -> [L]
2322:				
2323: 7724+17	07AF  CDF507  	        CALL    L07F5           ; routine PRINT-SP prints character 
2324: 7741+12	07B2  18B9    	        JR      L076D           ; back to MORE-LINE
2325:				
2326:				; -----------------------
2327:				; THE 'NUMBER' SUBROUTINE
2328:				; -----------------------
2329:				;
2330:				;
2331:				
2332:				;; NUMBER
2333: 7753+7	07B4  FE7E    	L07B4:  CP      $7E             ;
2334: 7760+5+6	07B6  C0      	        RET     NZ              ;
2335:				
2336: 7765+6	07B7  23      	        INC     HL              ;
2337: 7771+6	07B8  23      	        INC     HL              ;
2338: 7777+6	07B9  23      	        INC     HL              ;
2339: 7783+6	07BA  23      	        INC     HL              ;
2340: 7789+6	07BB  23      	        INC     HL              ;
2341: 7795+10	07BC  C9      	        RET                     ;
2342:				
2343:				; --------------------------------
2344:				; THE 'KEYBOARD DECODE' SUBROUTINE
2345:				; --------------------------------
2346:				;
2347:				; The different 'key values', held in the BC register pair, are 'decoded' into
2348:				; the usual ZX81 character codes by looking-up the key table at 007E.
2349:				; (007D + 1) The character code specified as (HL).
2350:				
2351:				;; DECODE
2352:				; B - active low column bits with shift in bit 0, so we have
2353:				; $FD, $FB, $F7, $EF, $DF or
2354:				; $FC, $FA, $F6, $EE, $DE if shifted.
2355:				; C - active low row bits (0x7f, 0xbf, 0xdf, 0xef, 0xf7, 0xfb, 0xfd, 0xfe)
2356: 7805+7	07BD  1600    	L07BD:  LD      D,$00           ;
2357: 7812+8	07BF  CB28    	        SRA     B               ; Put shift bit into carry
2358: 7820+4	07C1  9F      	        SBC     A,A             ;
2359:				; A is 0x00 if shift active or 0xff.
2360: 7824+7	07C2  F626    	        OR      $26             ;
2361:				; A is 0x26 if shift active or 0xff.
2362: 7831+7	07C4  2E05    	        LD      L,$05           ; Keys per row
2363: 7838+4	07C6  95      	        SUB     L               ; Allow for first add in loop
2364:				; A is 0x21 if shift active or 0xfa.
2365:				
2366:				;; KEY-LINE
2367:				; Initially add keys per row (5) to A until an active column is found. Later,
2368:				; add one until an active row is found.
2369: 7842+4	07C7  85      	L07C7:  ADD     A,L             ; Add keys per row / column
2370: 7846+4	07C8  37      	        SCF                     ; Set Carry Flag
2371: 7850+8	07C9  CB19    	        RR      C               ; Put next row bit into carry
2372: 7858+7+5	07CB  38FA    	        JR      C,L07C7         ; Jump KEY-LINE if not active
2373:				
2374: 7865+4	07CD  0C      	        INC     C               ; Row
2375:				; Row is zero if there is no other active row.
2376: 7869+5+6	07CE  C0      	        RET     NZ              ; Return with carry = 0 if more than one row
2377:				                                ; or column is active
2378:				
2379: 7874+4	07CF  48      	        LD      C,B             ; Column bits (without shift bit)
2380: 7878+4	07D0  2D      	        DEC     L               ; Offset
2381: 7882+7	07D1  2E01    	        LD      L,$01           ; Column offset
2382: 7889+7+5	07D3  20F2    	        JR      NZ,L07C7        ; to KEY-LINE if columns not already added.
2383:				; A is (0x26 if shift active or 0xff) + 5 x row number + column number.
2384:				
2385: 7896+10	07D5  217D00  	        LD      HL,$007D        ; (expr reqd)
2386: 7906+4	07D8  5F      	        LD      E,A             ;
2387: 7910+11	07D9  19      	        ADD     HL,DE           ;
2388: 7921+4	07DA  37      	        SCF                     ; Flag valid (single) keypress
2389: 7925+10	07DB  C9      	        RET                     ;
2390:				
2391:				; -------------------------
2392:				; THE 'PRINTING' SUBROUTINE
2393:				; -------------------------
2394:				;
2395:				;
2396:				
2397:				;; LEAD-SP
2398: 7935+4	07DC  7B      	L07DC:  LD      A,E             ;
2399: 7939+4	07DD  A7      	        AND     A               ;
2400: 7943+5+6	07DE  F8      	        RET     M               ;
2401:				
2402: 7948+12	07DF  1810    	        JR      L07F1           ; to PRINT-CH
2403:				
2404:				; ---
2405:				
2406:				;; OUT-DIGIT
2407: 7960+4	07E1  AF      	L07E1:  XOR     A               ;
2408:				
2409:				;; DIGIT-INC
2410: 7964+11	07E2  09      	L07E2:  ADD     HL,BC           ;
2411: 7975+4	07E3  3C      	        INC     A               ;
2412: 7979+7+5	07E4  38FC    	        JR      C,L07E2         ; to DIGIT-INC
2413:				
2414: 7986+15	07E6  ED42    	        SBC     HL,BC           ;
2415: 8001+4	07E8  3D      	        DEC     A               ;
2416: 8005+7+5	07E9  28F1    	        JR      Z,L07DC         ; to LEAD-SP
2417:				
2418:				;; OUT-CODE
2419: 8012+7	07EB  1E1C    	L07EB:  LD      E,$1C           ;
2420: 8019+4	07ED  83      	        ADD     A,E             ;
2421:				
2422:				;; OUT-CH
2423: 8023+4	07EE  A7      	L07EE:  AND     A               ;
2424: 8027+7+5	07EF  2804    	        JR      Z,L07F5         ; to PRINT-SP
2425:				
2426:				;; PRINT-CH
2427: 8034+23	07F1  FDCB0186	L07F1:  RES     0,(IY+$01)      ; update FLAGS - signal leading space permitted
2428:				
2429:				;; PRINT-SP
2430: 8057+4	07F5  D9      	L07F5:  EXX                     ;
2431: 8061+11	07F6  E5      	        PUSH    HL              ;
2432: 8072+20	07F7  FDCB014E	        BIT     1,(IY+$01)      ; test FLAGS - is printer in use ?
2433: 8092+7+5	07FB  2005    	        JR      NZ,L0802        ; to LPRINT-A
2434:				
2435: 8099+17	07FD  CD0808  	        CALL    L0808           ; routine ENTER-CH
2436: 8116+12	0800  1803    	        JR      L0805           ; to PRINT-EXX
2437:				
2438:				; ---
2439:				
2440:				;; LPRINT-A
2441: 8128+17	0802  CD5108  	L0802:  CALL    L0851           ; routine LPRINT-CH
2442:				
2443:				;; PRINT-EXX
2444: 8145+10	0805  E1      	L0805:  POP     HL              ;
2445: 8155+4	0806  D9      	        EXX                     ;
2446: 8159+10	0807  C9      	        RET                     ;
2447:				
2448:				; ---
2449:				
2450:				;; ENTER-CH
2451: 8169+4	0808  57      	L0808:  LD      D,A             ;
2452: 8173+20	0809  ED4B3940	        LD      BC,($4039)      ; sv S_POSN_x
2453: 8193+4	080D  79      	        LD      A,C             ;
2454: 8197+7	080E  FE21    	        CP      $21             ;
2455: 8204+7+5	0810  281A    	        JR      Z,L082C         ; to TEST-LOW
2456:				
2457:				;; TEST-N/L
2458: 8211+7	0812  3E76    	L0812:  LD      A,$76           ;
2459: 8218+4	0814  BA      	        CP      D               ;
2460: 8222+7+5	0815  2830    	        JR      Z,L0847         ; to WRITE-N/L
2461:				
2462: 8229+16	0817  2A0E40  	        LD      HL,($400E)      ; sv DF_CC_lo
2463: 8245+7	081A  BE      	        CP      (HL)            ;
2464: 8252+4	081B  7A      	        LD      A,D             ;
2465: 8256+7+5	081C  2020    	        JR      NZ,L083E        ; to WRITE-CH
2466:				
2467: 8263+4	081E  0D      	        DEC     C               ;
2468: 8267+7+5	081F  2019    	        JR      NZ,L083A        ; to EXPAND-1
2469:				
2470: 8274+6	0821  23      	        INC     HL              ;
2471: 8280+16	0822  220E40  	        LD       ($400E),HL     ; sv DF_CC_lo
2472: 8296+7	0825  0E21    	        LD      C,$21           ;
2473: 8303+4	0827  05      	        DEC     B               ;
2474: 8307+20	0828  ED433940	        LD      ($4039),BC      ; sv S_POSN_x
2475:				
2476:				;; TEST-LOW
2477: 8327+4	082C  78      	L082C:  LD      A,B             ;
2478: 8331+19	082D  FDBE22  	        CP      (IY+$22)        ; sv DF_SZ
2479: 8350+7+5	0830  2803    	        JR      Z,L0835         ; to REPORT-5
2480:				
2481: 8357+4	0832  A7      	        AND     A               ;
2482: 8361+7+5	0833  20DD    	        JR      NZ,L0812        ; to TEST-N/L
2483:				
2484:				;; REPORT-5
2485: 8368+7	0835  2E04    	L0835:  LD      L,$04           ; 'No more room on screen'
2486: 8375+10	0837  C35800  	        JP      L0058           ; to ERROR-3
2487:				
2488:				; ---
2489:				
2490:				;; EXPAND-1
2491: 8385+17	083A  CD9B09  	L083A:  CALL    L099B           ; routine ONE-SPACE
2492: 8402+4	083D  EB      	        EX      DE,HL           ;
2493:				
2494:				;; WRITE-CH
2495: 8406+7	083E  77      	L083E:  LD      (HL),A          ;
2496: 8413+6	083F  23      	        INC     HL              ;
2497: 8419+16	0840  220E40  	        LD      ($400E),HL      ; sv DF_CC_lo
2498:				;        DEC     (IY+$39)        ; sv S_POSN_x
2499: 8435+10	0843  C3251E  	        jp em_write_ch
2500: 8445+10	0846  C9      	        RET                     ; No path to this now
2501:				
2502:				; ---
2503:				
2504:				;; WRITE-N/L
2505: 8455+7	0847  0E21    	L0847:  LD      C,$21           ;
2506: 8462+4	0849  05      	        DEC     B               ;
2507: 8466+23	084A  FDCB01C6	        SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
2508: 8489+10	084E  C31809  	        JP      L0918           ; to LOC-ADDR
2509:				;
2510:     -	0001          	                assert $ = 0x0851       ; This address must be maintained
2511:				;
2512:				; --------------------------
2513:				; THE 'LPRINT-CH' SUBROUTINE
2514:				; --------------------------
2515:				; This routine sends a character to the ZX-Printer placing the code for the
2516:				; character in the Printer Buffer.
2517:				; Note. PR-CC contains the low byte of the buffer address. The high order byte 
2518:				; is always constant. 
2519:				
2520:				
2521:				;; LPRINT-CH
2522: 8499+7	0851  FE76    	L0851:  CP      $76             ; compare to NEWLINE.
2523: 8506+7+5	0853  281C    	        JR      Z,L0871         ; forward if so to COPY-BUFF
2524:				
2525: 8513+4	0855  4F      	        LD      C,A             ; take a copy of the character in C.
2526: 8517+13	0856  3A3840  	        LD      A,($4038)       ; fetch print location from PR_CC
2527: 8530+7	0859  E67F    	        AND     $7F             ; ignore bit 7 to form true position.
2528: 8537+7	085B  FE5C    	        CP      $5C             ; compare to 33rd location
2529:				
2530: 8544+4	085D  6F      	        LD      L,A             ; form low-order byte.
2531: 8548+7	085E  2640    	        LD      H,$40           ; the high-order byte is fixed.
2532:				
2533: 8555+10+7	0860  CC7108  	        CALL    Z,L0871         ; routine COPY-BUFF to send full buffer to 
2534:				                                ; the printer if first 32 bytes full.
2535:				                                ; (this will reset HL to start.)
2536:				
2537: 8565+7	0863  71      	        LD      (HL),C          ; place character at location.
2538: 8572+4	0864  2C      	        INC     L               ; increment - will not cross a 256 boundary.
2539: 8576+19	0865  FD7538  	        LD      (IY+$38),L      ; update system variable PR_CC
2540:				                                ; automatically resetting bit 7 to show that
2541:				                                ; the buffer is not empty.
2542: 8595+10	0868  C9      	        RET                     ; return.
2543:				
2544:				; --------------------------
2545:				; THE 'COPY' COMMAND ROUTINE
2546:				; --------------------------
2547:				; The full character-mapped screen is copied to the ZX-Printer.
2548:				; All twenty-four text/graphic lines are printed.
2549:				
2550:				;; COPY
2551: 8605+7	0869  1616    	L0869:  LD      D,$16           ; prepare to copy twenty four text lines.
2552: 8612+16	086B  2A0C40  	        LD      HL,($400C)      ; set HL to start of display file from D_FILE.
2553: 8628+6	086E  23      	        INC     HL              ; 
2554: 8634+12	086F  1805    	        JR      L0876           ; forward to COPY*D
2555:				
2556:				; ---
2557:				
2558:				; A single character-mapped printer buffer is copied to the ZX-Printer.
2559:				
2560:				;; COPY-BUFF
2561: 8646+7	0871  1601    	L0871:  LD      D,$01           ; prepare to copy a single text line.
2562: 8653+10	0873  213C40  	        LD      HL,$403C        ; set HL to start of printer buffer PRBUFF.
2563:				
2564:				; both paths converge here.
2565:				
2566:				;; COPY*D
2567: 8663+17	0876  CDE702  	L0876:  CALL    L02E7           ; routine SET-FAST
2568:				
2569: 8680+11	0879  C5      	        PUSH    BC              ; *** preserve BC throughout.
2570:				                                ; a pending character may be present 
2571:				                                ; in C from LPRINT-CH
2572:				
2573:				;; COPY-LOOP
2574: 8691+11	087A  E5      	L087A:  PUSH    HL              ; save first character of line pointer. (*)
2575: 8702+4	087B  AF      	        XOR     A               ; clear accumulator.
2576: 8706+4	087C  5F      	        LD      E,A             ; set pixel line count, range 0-7, to zero.
2577:				
2578:				; this inner loop deals with each horizontal pixel line.
2579:				
2580:				;; COPY-TIME
2581:     -	087D          	L087D:  ;OUT     ($FB),A         ; bit 2 reset starts the printer motor
2582: 8710+4	087D  00      	        nop
2583: 8714+4	087E  00      	        nop
2584:				                                ; with an inactive stylus - bit 7 reset.
2585: 8718+10	087F  E1      	        POP     HL              ; pick up first character of line pointer (*)
2586:				                                ; on inner loop.
2587:				
2588:				;; COPY-BRK
2589: 8728+17	0880  CD460F  	L0880:  CALL    L0F46           ; routine BREAK-1
2590: 8745+7+5	0883  3805    	        JR      C,L088A         ; forward with no keypress to COPY-CONT
2591:				
2592:				; else A will hold 11111111 0
2593:				
2594: 8752+4	0885  1F      	        RRA                     ; 0111 1111
2595:				        ;OUT     ($FB),A         ; stop ZX printer motor, de-activate stylus.
2596: 8756+4	0886  00      	        nop
2597: 8760+4	0887  00      	        nop
2598:				
2599:				;; REPORT-D2
2600: 8764+11	0888  CF      	L0888:  RST     08H             ; ERROR-1
2601:     -	0889  0C      	        DEFB    $0C             ; Error Report: BREAK - CONT repeats
2602:				
2603:				; ---
2604:				
2605:				;; COPY-CONT
2606:     -	088A          	L088A:  ;IN      A,($FB)         ; read from printer port.
2607: 8775+7	088A  3EFF    	        ld a, 0xff              ; No key pressed
2608:				
2609: 8782+4	088C  87      	        ADD     A,A             ; test bit 6 and 7
2610: 8786+10	088D  FADE08  	        JP      M,L08DE         ; jump forward with no printer to COPY-END
2611:				
2612: 8796+7+5	0890  30EE    	        JR      NC,L0880        ; back if stylus not in position to COPY-BRK
2613:				
2614: 8803+11	0892  E5      	        PUSH    HL              ; save first character of line pointer (*)
2615: 8814+11	0893  D5      	        PUSH    DE              ; ** preserve character line and pixel line.
2616:				
2617: 8825+4	0894  7A      	        LD      A,D             ; text line count to A?
2618: 8829+7	0895  FE02    	        CP      $02             ; sets carry if last line.
2619: 8836+4	0897  9F      	        SBC     A,A             ; now $FF if last line else zero.
2620:				
2621:				; now cleverly prepare a printer control mask setting bit 2 (later moved to 1)
2622:				; of D to slow printer for the last two pixel lines ( E = 6 and 7)
2623:				
2624: 8840+4	0898  A3      	        AND     E               ; and with pixel line offset 0-7
2625: 8844+4	0899  07      	        RLCA                    ; shift to left.
2626: 8848+4	089A  A3      	        AND     E               ; and again.
2627: 8852+4	089B  57      	        LD      D,A             ; store control mask in D.
2628:				
2629:				;; COPY-NEXT
2630: 8856+7	089C  4E      	L089C:  LD      C,(HL)          ; load character from screen or buffer.
2631: 8863+4	089D  79      	        LD      A,C             ; save a copy in C for later inverse test.
2632: 8867+6	089E  23      	        INC     HL              ; update pointer for next time.
2633: 8873+7	089F  FE76    	        CP      $76             ; is character a NEWLINE ?
2634: 8880+7+5	08A1  2824    	        JR      Z,L08C7         ; forward, if so, to COPY-N/L
2635:				
2636: 8887+11	08A3  E5      	        PUSH    HL              ; * else preserve the character pointer.
2637:				
2638: 8898+8	08A4  CB27    	        SLA     A               ; (?) multiply by two
2639: 8906+4	08A6  87      	        ADD     A,A             ; multiply by four
2640: 8910+4	08A7  87      	        ADD     A,A             ; multiply by eight
2641:				
2642: 8914+7	08A8  260F    	        LD      H,$0F           ; load H with half the address of character set.
2643: 8921+8	08AA  CB14    	        RL      H               ; now $1E or $1F (with carry)
2644: 8929+4	08AC  83      	        ADD     A,E             ; add byte offset 0-7
2645: 8933+4	08AD  6F      	        LD      L,A             ; now HL addresses character source byte
2646:				
2647: 8937+8	08AE  CB11    	        RL      C               ; test character, setting carry if inverse.
2648: 8945+4	08B0  9F      	        SBC     A,A             ; accumulator now $00 if normal, $FF if inverse.
2649:				
2650: 8949+7	08B1  AE      	        XOR     (HL)            ; combine with bit pattern at end or ROM.
2651: 8956+4	08B2  4F      	        LD      C,A             ; transfer the byte to C.
2652: 8960+7	08B3  0608    	        LD      B,$08           ; count eight bits to output.
2653:				
2654:				;; COPY-BITS
2655: 8967+4	08B5  7A      	L08B5:  LD      A,D             ; fetch speed control mask from D.
2656: 8971+8	08B6  CB01    	        RLC     C               ; rotate a bit from output byte to carry.
2657: 8979+4	08B8  1F      	        RRA                     ; pick up in bit 7, speed bit to bit 1
2658: 8983+4	08B9  67      	        LD      H,A             ; store aligned mask in H register.
2659:				
2660:				;; COPY-WAIT
2661: 8987+11	08BA  DBFB    	L08BA:  IN      A,($FB)         ; read the printer port
2662: 8998+4	08BC  1F      	        RRA                     ; test for alignment signal from encoder.
2663: 9002+7+5	08BD  30FB    	        JR      NC,L08BA        ; loop if not present to COPY-WAIT
2664:				
2665: 9009+4	08BF  7C      	        LD      A,H             ; control byte to A.
2666:				        ;OUT     ($FB),A         ; and output to printer port.
2667: 9013+4	08C0  00      	        nop
2668: 9017+4	08C1  00      	        nop
2669: 9021+8+5	08C2  10F1    	        DJNZ    L08B5           ; loop for all eight bits to COPY-BITS
2670:				
2671: 9029+10	08C4  E1      	        POP     HL              ; * restore character pointer.
2672: 9039+12	08C5  18D5    	        JR      L089C           ; back for adjacent character line to COPY-NEXT
2673:				
2674:				; ---
2675:				
2676:				; A NEWLINE has been encountered either following a text line or as the 
2677:				; first character of the screen or printer line.
2678:				
2679:				;; COPY-N/L
2680: 9051+11	08C7  DBFB    	L08C7:  IN      A,($FB)         ; read printer port.
2681: 9062+4	08C9  1F      	        RRA                     ; wait for encoder signal.
2682: 9066+7+5	08CA  30FB    	        JR      NC,L08C7        ; loop back if not to COPY-N/L
2683:				
2684: 9073+4	08CC  7A      	        LD      A,D             ; transfer speed mask to A.
2685: 9077+4	08CD  0F      	        RRCA                    ; rotate speed bit to bit 1. 
2686:				                                ; bit 7, stylus control is reset.
2687:				        ;OUT     ($FB),A         ; set the printer speed.
2688: 9081+4	08CE  00      	        nop
2689: 9085+4	08CF  00      	        nop
2690:				
2691: 9089+10	08D0  D1      	        POP     DE              ; ** restore character line and pixel line.
2692: 9099+4	08D1  1C      	        INC     E               ; increment pixel line 0-7.
2693: 9103+8	08D2  CB5B    	        BIT     3,E             ; test if value eight reached.
2694: 9111+7+5	08D4  28A7    	        JR      Z,L087D         ; back if not to COPY-TIME
2695:				
2696:				; eight pixel lines, a text line have been completed.
2697:				
2698: 9118+10	08D6  C1      	        POP     BC              ; lose the now redundant first character 
2699:				                                ; pointer
2700: 9128+4	08D7  15      	        DEC     D               ; decrease text line count.
2701: 9132+7+5	08D8  20A0    	        JR      NZ,L087A        ; back if not zero to COPY-LOOP
2702:				
2703: 9139+7	08DA  3E04    	        LD      A,$04           ; stop the already slowed printer motor.
2704:				        ;OUT     ($FB),A         ; output to printer port.
2705: 9146+4	08DC  00      	        nop
2706: 9150+4	08DD  00      	        nop
2707:				
2708:				;; COPY-END
2709: 9154+17	08DE  CD0702  	L08DE:  CALL    L0207           ; routine SLOW/FAST
2710: 9171+10	08E1  C1      	        POP     BC              ; *** restore preserved BC.
2711:				
2712:				; -------------------------------------
2713:				; THE 'CLEAR PRINTER BUFFER' SUBROUTINE
2714:				; -------------------------------------
2715:				; This subroutine sets 32 bytes of the printer buffer to zero (space) and
2716:				; the 33rd character is set to a NEWLINE.
2717:				; This occurs after the printer buffer is sent to the printer but in addition
2718:				; after the 24 lines of the screen are sent to the printer. 
2719:				; Note. This is a logic error as the last operation does not involve the 
2720:				; buffer at all. Logically one should be able to use 
2721:				; 10 LPRINT "HELLO ";
2722:				; 20 COPY
2723:				; 30 LPRINT ; "WORLD"
2724:				; and expect to see the entire greeting emerge from the printer.
2725:				; Surprisingly this logic error was never discovered and although one can argue
2726:				; if the above is a bug, the repetition of this error on the Spectrum was most
2727:				; definitely a bug.
2728:				; Since the printer buffer is fixed at the end of the system variables, and
2729:				; the print position is in the range $3C - $5C, then bit 7 of the system
2730:				; variable is set to show the buffer is empty and automatically reset when
2731:				; the variable is updated with any print position - neat.
2732:				
2733:				;; CLEAR-PRB
2734: 9181+10	08E2  215C40  	L08E2:  LD      HL,$405C        ; address fixed end of PRBUFF
2735: 9191+10	08E5  3676    	        LD      (HL),$76        ; place a newline at last position.
2736: 9201+7	08E7  0620    	        LD      B,$20           ; prepare to blank 32 preceding characters. 
2737:				
2738:				;; PRB-BYTES
2739: 9208+6	08E9  2B      	L08E9:  DEC     HL              ; decrement address - could be DEC L.
2740: 9214+10	08EA  3600    	        LD      (HL),$00        ; place a zero byte.
2741: 9224+8+5	08EC  10FB    	        DJNZ    L08E9           ; loop for all thirty-two to PRB-BYTES
2742:				
2743: 9232+4	08EE  7D      	        LD      A,L             ; fetch character print position.
2744: 9236+8	08EF  CBFF    	        SET     7,A             ; signal the printer buffer is clear.
2745: 9244+13	08F1  323840  	        LD      ($4038),A       ; update one-byte system variable PR_CC
2746: 9257+10	08F4  C9      	        RET                     ; return.
2747:				
2748:				; -------------------------
2749:				; THE 'PRINT AT' SUBROUTINE
2750:				; -------------------------
2751:				;
2752:				;
2753:				
2754:				;; PRINT-AT
2755: 9267+7	08F5  3E17    	L08F5:  LD      A,$17           ;
2756: 9274+4	08F7  90      	        SUB     B               ;
2757: 9278+7+5	08F8  380B    	        JR      C,L0905         ; to WRONG-VAL
2758:				
2759:				;; TEST-VAL
2760: 9285+19	08FA  FDBE22  	L08FA:  CP      (IY+$22)        ; sv DF_SZ
2761: 9304+10	08FD  DA3508  	        JP      C,L0835         ; to REPORT-5
2762:				
2763: 9314+4	0900  3C      	        INC     A               ;
2764: 9318+4	0901  47      	        LD      B,A             ;
2765: 9322+7	0902  3E1F    	        LD      A,$1F           ;
2766: 9329+4	0904  91      	        SUB     C               ;
2767:				
2768:				;; WRONG-VAL
2769: 9333+10	0905  DAAD0E  	L0905:  JP      C,L0EAD         ; to REPORT-B
2770:				
2771: 9343+7	0908  C602    	        ADD     A,$02           ;
2772: 9350+4	090A  4F      	        LD      C,A             ;
2773:				
2774:				;; SET-FIELD
2775: 9354+20	090B  FDCB014E	L090B:  BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
2776: 9374+7+5	090F  2807    	        JR      Z,L0918         ; to LOC-ADDR
2777:				
2778: 9381+7	0911  3E5D    	        LD      A,$5D           ;
2779: 9388+4	0913  91      	        SUB     C               ;
2780: 9392+13	0914  323840  	        LD      ($4038),A       ; sv PR_CC
2781: 9405+10	0917  C9      	        RET                     ;
2782:				
2783:				; ----------------------------
2784:				; THE 'LOCATE ADDRESS' ROUTINE
2785:				; ----------------------------
2786:				;
2787:				;
2788:				
2789:				;; LOC-ADDR
2790: 9415+20	0918  ED433940	L0918:  LD      ($4039),BC      ; sv S_POSN_x
2791: 9435+16	091C  2A1040  	        LD      HL,($4010)      ; sv VARS_lo
2792: 9451+4	091F  51      	        LD      D,C             ;
2793: 9455+7	0920  3E22    	        LD      A,$22           ;
2794: 9462+4	0922  91      	        SUB     C               ;
2795: 9466+4	0923  4F      	        LD      C,A             ;
2796: 9470+7	0924  3E76    	        LD      A,$76           ;
2797: 9477+4	0926  04      	        INC     B               ;
2798:				
2799:				;; LOOK-BACK
2800: 9481+6	0927  2B      	L0927:  DEC     HL              ;
2801: 9487+7	0928  BE      	        CP      (HL)            ;
2802: 9494+7+5	0929  20FC    	        JR      NZ,L0927        ; to LOOK-BACK
2803:				
2804: 9501+8+5	092B  10FA    	        DJNZ    L0927           ; to LOOK-BACK
2805:				
2806: 9509+6	092D  23      	        INC     HL              ;
2807: 9515+16+5	092E  EDB1    	        CPIR                    ;
2808: 9531+6	0930  2B      	        DEC     HL              ;
2809: 9537+16	0931  220E40  	        LD      ($400E),HL      ; sv DF_CC_lo
2810: 9553+4	0934  37      	        SCF                     ; Set Carry Flag
2811: 9557+5+6	0935  E0      	        RET     PO              ;
2812:				
2813: 9562+4	0936  15      	        DEC     D               ;
2814: 9566+5+6	0937  C8      	        RET     Z               ;
2815:				
2816: 9571+11	0938  C5      	        PUSH    BC              ;
2817: 9582+17	0939  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
2818: 9599+10	093C  C1      	        POP     BC              ;
2819: 9609+4	093D  41      	        LD      B,C             ;
2820: 9613+4	093E  62      	        LD      H,D             ;
2821: 9617+4	093F  6B      	        LD       L,E            ;
2822:				
2823:				;; EXPAND-2
2824: 9621+10	0940  3600    	L0940:  LD      (HL),$00        ;
2825: 9631+6	0942  2B      	        DEC     HL              ;
2826: 9637+8+5	0943  10FB    	        DJNZ    L0940           ; to EXPAND-2
2827:				
2828: 9645+4	0945  EB      	        EX      DE,HL           ;
2829: 9649+6	0946  23      	        INC     HL              ;
2830: 9655+16	0947  220E40  	        LD      ($400E),HL      ; sv DF_CC_lo
2831: 9671+10	094A  C9      	        RET                     ;
2832:				
2833:				; ------------------------------
2834:				; THE 'EXPAND TOKENS' SUBROUTINE
2835:				; ------------------------------
2836:				;
2837:				;
2838:				
2839:				;; TOKENS
2840: 9681+11	094B  F5      	L094B:  PUSH    AF              ;
2841: 9692+17	094C  CD7509  	        CALL    L0975           ; routine TOKEN-ADD
2842: 9709+7+5	094F  3008    	        JR      NC,L0959        ; to ALL-CHARS
2843:				
2844: 9716+20	0951  FDCB0146	        BIT     0,(IY+$01)      ; sv FLAGS  - Leading space if set
2845: 9736+7+5	0955  2002    	        JR      NZ,L0959        ; to ALL-CHARS
2846:				
2847: 9743+4	0957  AF      	        XOR     A               ;
2848:				
2849: 9747+11	0958  D7      	        RST     10H             ; PRINT-A
2850:				
2851:				;; ALL-CHARS
2852: 9758+7	0959  0A      	L0959:  LD      A,(BC)          ;
2853: 9765+7	095A  E63F    	        AND     $3F             ;
2854:				
2855: 9772+11	095C  D7      	        RST     10H             ; PRINT-A
2856: 9783+7	095D  0A      	        LD      A,(BC)          ;
2857: 9790+6	095E  03      	        INC     BC              ;
2858: 9796+4	095F  87      	        ADD     A,A             ;
2859: 9800+7+5	0960  30F7    	        JR      NC,L0959        ; to ALL-CHARS
2860:				
2861: 9807+10	0962  C1      	        POP     BC              ;
2862: 9817+8	0963  CB78    	        BIT     7,B             ;
2863: 9825+5+6	0965  C8      	        RET     Z               ;
2864:				
2865: 9830+7	0966  FE1A    	        CP      $1A             ;
2866: 9837+7+5	0968  2803    	        JR      Z,L096D         ; to TRAIL-SP
2867:				
2868: 9844+7	096A  FE38    	        CP      $38             ;
2869: 9851+5+6	096C  D8      	        RET     C               ;
2870:				
2871:				;; TRAIL-SP
2872: 9856+4	096D  AF      	L096D:  XOR     A               ;
2873: 9860+23	096E  FDCB01C6	        SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
2874: 9883+10	0972  C3F507  	        JP      L07F5           ; to PRINT-SP
2875:				
2876:				; ---
2877:				
2878:				;; TOKEN-ADD
2879: 9893+11	0975  E5      	L0975:  PUSH    HL              ;
2880: 9904+10	0976  211101  	        LD      HL,L0111        ; Address of TOKENS
2881: 9914+8	0979  CB7F    	        BIT     7,A             ;
2882: 9922+7+5	097B  2802    	        JR      Z,L097F         ; to TEST-HIGH
2883:				
2884: 9929+7	097D  E63F    	        AND     $3F             ;
2885:				
2886:				;; TEST-HIGH
2887: 9936+7	097F  FE43    	L097F:  CP      $43             ;
2888: 9943+7+5	0981  3010    	        JR      NC,L0993        ; to FOUND
2889:				
2890: 9950+4	0983  47      	        LD      B,A             ;
2891: 9954+4	0984  04      	        INC     B               ;
2892:				
2893:				;; WORDS
2894: 9958+12	0985  CB7E    	L0985:  BIT     7,(HL)          ;
2895: 9970+6	0987  23      	        INC     HL              ;
2896: 9976+7+5	0988  28FB    	        JR      Z,L0985         ; to WORDS
2897:				
2898: 9983+8+5	098A  10F9    	        DJNZ    L0985           ; to WORDS
2899:				
2900: 9991+8	098C  CB77    	        BIT     6,A             ;
2901: 9999+7+5	098E  2002    	        JR      NZ,L0992        ; to COMP-FLAG
2902:				
2903:10006+7	0990  FE18    	        CP      $18             ;
2904:				
2905:				;; COMP-FLAG
2906:10013+4	0992  3F      	L0992:  CCF                     ; Complement Carry Flag
2907:				
2908:				;; FOUND
2909:10017+4	0993  44      	L0993:  LD      B,H             ;
2910:10021+4	0994  4D      	        LD       C,L            ;
2911:10025+10	0995  E1      	        POP     HL              ;
2912:10035+5+6	0996  D0      	        RET     NC              ;
2913:				
2914:10040+7	0997  0A      	        LD      A,(BC)          ;
2915:10047+7	0998  C6E4    	        ADD     A,$E4           ;
2916:10054+10	099A  C9      	        RET                     ;
2917:				
2918:				; --------------------------
2919:				; THE 'ONE SPACE' SUBROUTINE
2920:				; --------------------------
2921:				;
2922:				;
2923:				
2924:				;; ONE-SPACE
2925:10064+10	099B  010100  	L099B:  LD      BC,$0001        ;
2926:				
2927:				; --------------------------
2928:				; THE 'MAKE ROOM' SUBROUTINE
2929:				; --------------------------
2930:				;
2931:				;
2932:				
2933:				;; MAKE-ROOM
2934:10074+11	099E  E5      	L099E:  PUSH    HL              ;
2935:10085+17	099F  CDC50E  	        CALL    L0EC5           ; routine TEST-ROOM
2936:10102+10	09A2  E1      	        POP     HL              ;
2937:10112+17	09A3  CDAD09  	        CALL    L09AD           ; routine POINTERS
2938:10129+16	09A6  2A1C40  	        LD      HL,($401C)      ; sv STKEND_lo
2939:10145+4	09A9  EB      	        EX      DE,HL           ;
2940:10149+16+5	09AA  EDB8    	        LDDR                    ; Copy Bytes
2941:10165+10	09AC  C9      	        RET                     ;
2942:				
2943:				; -------------------------
2944:				; THE 'POINTERS' SUBROUTINE
2945:				; -------------------------
2946:				;
2947:				;
2948:				
2949:				;; POINTERS
2950:10175+11	09AD  F5      	L09AD:  PUSH    AF              ;
2951:10186+11	09AE  E5      	        PUSH    HL              ;
2952:10197+10	09AF  210C40  	        LD      HL,$400C        ; sv D_FILE_lo
2953:10207+7	09B2  3E09    	        LD      A,$09           ;
2954:				
2955:				;; NEXT-PTR
2956:10214+7	09B4  5E      	L09B4:  LD      E,(HL)          ;
2957:10221+6	09B5  23      	        INC     HL              ;
2958:10227+7	09B6  56      	        LD      D,(HL)          ;
2959:10234+19	09B7  E3      	        EX      (SP),HL         ;
2960:10253+4	09B8  A7      	        AND     A               ;
2961:10257+15	09B9  ED52    	        SBC     HL,DE           ;
2962:10272+11	09BB  19      	        ADD     HL,DE           ;
2963:10283+19	09BC  E3      	        EX      (SP),HL         ;
2964:10302+7+5	09BD  3009    	        JR      NC,L09C8        ; to PTR-DONE
2965:				
2966:10309+11	09BF  D5      	        PUSH    DE              ;
2967:10320+4	09C0  EB      	        EX      DE,HL           ;
2968:10324+11	09C1  09      	        ADD     HL,BC           ;
2969:10335+4	09C2  EB      	        EX      DE,HL           ;
2970:10339+7	09C3  72      	        LD      (HL),D          ;
2971:10346+6	09C4  2B      	        DEC     HL              ;
2972:10352+7	09C5  73      	        LD      (HL),E          ;
2973:10359+6	09C6  23      	        INC     HL              ;
2974:10365+10	09C7  D1      	        POP     DE              ;
2975:				
2976:				;; PTR-DONE
2977:10375+6	09C8  23      	L09C8:  INC     HL              ;
2978:10381+4	09C9  3D      	        DEC     A               ;
2979:10385+7+5	09CA  20E8    	        JR      NZ,L09B4        ; to NEXT-PTR
2980:				
2981:10392+4	09CC  EB      	        EX      DE,HL           ;
2982:10396+10	09CD  D1      	        POP     DE              ;
2983:10406+10	09CE  F1      	        POP     AF              ;
2984:10416+4	09CF  A7      	        AND     A               ;
2985:10420+15	09D0  ED52    	        SBC     HL,DE           ;
2986:10435+4	09D2  44      	        LD      B,H             ;
2987:10439+4	09D3  4D      	        LD      C,L             ;
2988:10443+6	09D4  03      	        INC     BC              ;
2989:10449+11	09D5  19      	        ADD     HL,DE           ;
2990:10460+4	09D6  EB      	        EX      DE,HL           ;
2991:10464+10	09D7  C9      	        RET                     ;
2992:				
2993:				; -----------------------------
2994:				; THE 'LINE ADDRESS' SUBROUTINE
2995:				; -----------------------------
2996:				;
2997:				;
2998:				
2999:				;; LINE-ADDR
3000:10474+11	09D8  E5      	L09D8:  PUSH    HL              ;
3001:10485+10	09D9  217D40  	        LD      HL,$407D        ;
3002:10495+4	09DC  54      	        LD      D,H             ;
3003:10499+4	09DD  5D      	        LD      E,L             ;
3004:				
3005:				;; NEXT-TEST
3006:10503+10	09DE  C1      	L09DE:  POP     BC              ;
3007:10513+17	09DF  CDEA09  	        CALL    L09EA           ; routine CP-LINES
3008:10530+5+6	09E2  D0      	        RET     NC              ;
3009:				
3010:10535+11	09E3  C5      	        PUSH    BC              ;
3011:10546+17	09E4  CDF209  	        CALL     L09F2          ; routine NEXT-ONE
3012:10563+4	09E7  EB      	        EX      DE,HL           ;
3013:10567+12	09E8  18F4    	        JR      L09DE           ; to NEXT-TEST
3014:				
3015:				; -------------------------------------
3016:				; THE 'COMPARE LINE NUMBERS' SUBROUTINE
3017:				; -------------------------------------
3018:				;
3019:				;
3020:				
3021:				;; CP-LINES
3022:10579+7	09EA  7E      	L09EA:  LD      A,(HL)          ;
3023:10586+4	09EB  B8      	        CP      B               ;
3024:10590+5+6	09EC  C0      	        RET     NZ              ;
3025:				
3026:10595+6	09ED  23      	        INC     HL              ;
3027:10601+7	09EE  7E      	        LD      A,(HL)          ;
3028:10608+6	09EF  2B      	        DEC     HL              ;
3029:10614+4	09F0  B9      	        CP      C               ;
3030:10618+10	09F1  C9      	        RET                     ;
3031:				
3032:				; --------------------------------------
3033:				; THE 'NEXT LINE OR VARIABLE' SUBROUTINE
3034:				; --------------------------------------
3035:				;
3036:				;
3037:				
3038:				;; NEXT-ONE
3039:10628+11	09F2  E5      	L09F2:  PUSH    HL              ;
3040:10639+7	09F3  7E      	        LD      A,(HL)          ;
3041:10646+7	09F4  FE40    	        CP      $40             ;
3042:10653+7+5	09F6  3817    	        JR      C,L0A0F         ; to LINES
3043:				
3044:10660+8	09F8  CB6F    	        BIT     5,A             ;
3045:10668+7+5	09FA  2814    	        JR      Z,L0A10         ; forward to NEXT-O-4
3046:				
3047:10675+4	09FC  87      	        ADD     A,A             ;
3048:10679+10	09FD  FA010A  	        JP      M,L0A01         ; to NEXT+FIVE
3049:				
3050:10689+4	0A00  3F      	        CCF                     ; Complement Carry Flag
3051:				
3052:				;; NEXT+FIVE
3053:10693+10	0A01  010500  	L0A01:  LD      BC,$0005        ;
3054:10703+7+5	0A04  3002    	        JR      NC,L0A08        ; to NEXT-LETT
3055:				
3056:10710+7	0A06  0E11    	        LD      C,$11           ;
3057:				
3058:				;; NEXT-LETT
3059:10717+4	0A08  17      	L0A08:  RLA                     ;
3060:10721+6	0A09  23      	        INC     HL              ;
3061:10727+7	0A0A  7E      	        LD      A,(HL)          ;
3062:10734+7+5	0A0B  30FB    	        JR      NC,L0A08        ; to NEXT-LETT
3063:				
3064:10741+12	0A0D  1806    	        JR      L0A15           ; to NEXT-ADD
3065:				
3066:				; ---
3067:				
3068:				;; LINES
3069:10753+6	0A0F  23      	L0A0F:  INC     HL              ;
3070:				
3071:				;; NEXT-O-4
3072:10759+6	0A10  23      	L0A10:  INC     HL              ;
3073:10765+7	0A11  4E      	        LD      C,(HL)          ;
3074:10772+6	0A12  23      	        INC     HL              ;
3075:10778+7	0A13  46      	        LD      B,(HL)          ;
3076:10785+6	0A14  23      	        INC     HL              ;
3077:				
3078:				;; NEXT-ADD
3079:10791+11	0A15  09      	L0A15:  ADD     HL,BC           ;
3080:10802+10	0A16  D1      	        POP     DE              ;
3081:				
3082:				; ---------------------------
3083:				; THE 'DIFFERENCE' SUBROUTINE
3084:				; ---------------------------
3085:				;
3086:				;
3087:				
3088:				;; DIFFER
3089:10812+4	0A17  A7      	L0A17:  AND     A               ;
3090:10816+15	0A18  ED52    	        SBC     HL,DE           ;
3091:10831+4	0A1A  44      	        LD      B,H             ;
3092:10835+4	0A1B  4D      	        LD      C,L             ;
3093:10839+11	0A1C  19      	        ADD     HL,DE           ;
3094:10850+4	0A1D  EB      	        EX      DE,HL           ;
3095:10854+10	0A1E  C9      	        RET                     ;
3096:				
3097:				; --------------------------
3098:				; THE 'LINE-ENDS' SUBROUTINE
3099:				; --------------------------
3100:				;
3101:				;
3102:				
3103:				;; LINE-ENDS
3104:10864+19	0A1F  FD4622  	L0A1F:  LD      B,(IY+$22)      ; sv DF_SZ
3105:10883+11	0A22  C5      	        PUSH    BC              ;
3106:10894+17	0A23  CD2C0A  	        CALL    L0A2C           ; routine B-LINES
3107:10911+10	0A26  C1      	        POP     BC              ;
3108:10921+4	0A27  05      	        DEC     B               ;
3109:10925+12	0A28  1802    	        JR      L0A2C           ; to B-LINES
3110:				
3111:				; -------------------------
3112:				; THE 'CLS' COMMAND ROUTINE
3113:				; -------------------------
3114:				;
3115:				;
3116:				
3117:				;; CLS
3118:10937+7	0A2A  0618    	L0A2A:  LD      B,$18           ;
3119:				
3120:				;; B-LINES
3121:10944+23	0A2C  FDCB018E	L0A2C:  RES     1,(IY+$01)      ; sv FLAGS  - Signal printer not in use
3122:10967+7	0A30  0E21    	        LD      C,$21           ;
3123:10974+11	0A32  C5      	        PUSH    BC              ;
3124:10985+17	0A33  CD1809  	        CALL    L0918           ; routine LOC-ADDR
3125:11002+10	0A36  C1      	        POP     BC              ;
3126:11012+13	0A37  3A0540  	        LD      A,($4005)       ; sv RAMTOP_hi
3127:11025+7	0A3A  FE4D    	        CP      $4D             ;
3128:11032+7+5	0A3C  3814    	        JR      C,L0A52         ; to COLLAPSED
3129:				
3130:11039+23	0A3E  FDCB3AFE	        SET     7,(IY+$3A)      ; sv S_POSN_y
3131:				
3132:				;; CLEAR-LOC
3133:11062+4	0A42  AF      	L0A42:  XOR     A               ; prepare a space
3134:11066+17	0A43  CDF507  	        CALL    L07F5           ; routine PRINT-SP prints a space
3135:11083+16	0A46  2A3940  	        LD      HL,($4039)      ; sv S_POSN_x
3136:11099+4	0A49  7D      	        LD      A,L             ;
3137:11103+4	0A4A  B4      	        OR      H               ;
3138:11107+7	0A4B  E67E    	        AND     $7E             ;
3139:11114+7+5	0A4D  20F3    	        JR      NZ,L0A42        ; to CLEAR-LOC
3140:				
3141:11121+10	0A4F  C31809  	        JP      L0918           ; to LOC-ADDR
3142:				
3143:				; ---
3144:				
3145:				;; COLLAPSED
3146:11131+4	0A52  54      	L0A52:  LD      D,H             ;
3147:11135+4	0A53  5D      	        LD      E,L             ;
3148:11139+6	0A54  2B      	        DEC     HL              ;
3149:11145+4	0A55  48      	        LD      C,B             ;
3150:11149+7	0A56  0600    	        LD      B,$00           ;
3151:11156+16+5	0A58  EDB0    	        LDIR                    ; Copy Bytes
3152:11172+16	0A5A  2A1040  	        LD      HL,($4010)      ; sv VARS_lo
3153:				
3154:				; ----------------------------
3155:				; THE 'RECLAIMING' SUBROUTINES
3156:				; ----------------------------
3157:				;
3158:				;
3159:				
3160:				;; RECLAIM-1
3161:11188+17	0A5D  CD170A  	L0A5D:  CALL    L0A17           ; routine DIFFER
3162:				
3163:				;; RECLAIM-2
3164:11205+11	0A60  C5      	L0A60:  PUSH    BC              ;
3165:11216+4	0A61  78      	        LD      A,B             ;
3166:11220+4	0A62  2F      	        CPL                     ;
3167:11224+4	0A63  47      	        LD      B,A             ;
3168:11228+4	0A64  79      	        LD      A,C             ;
3169:11232+4	0A65  2F      	        CPL                     ;
3170:11236+4	0A66  4F      	        LD      C,A             ;
3171:11240+6	0A67  03      	        INC     BC              ;
3172:11246+17	0A68  CDAD09  	        CALL    L09AD           ; routine POINTERS
3173:11263+4	0A6B  EB      	        EX      DE,HL           ;
3174:11267+10	0A6C  E1      	        POP     HL              ;
3175:11277+11	0A6D  19      	        ADD     HL,DE           ;
3176:11288+11	0A6E  D5      	        PUSH    DE              ;
3177:11299+16+5	0A6F  EDB0    	        LDIR                    ; Copy Bytes
3178:11315+10	0A71  E1      	        POP     HL              ;
3179:11325+10	0A72  C9      	        RET                     ;
3180:				
3181:				; ------------------------------
3182:				; THE 'E-LINE NUMBER' SUBROUTINE
3183:				; ------------------------------
3184:				;
3185:				;
3186:				
3187:				;; E-LINE-NO
3188:11335+16	0A73  2A1440  	L0A73:  LD      HL,($4014)      ; sv E_LINE_lo
3189:11351+17	0A76  CD4D00  	        CALL    L004D           ; routine TEMP-PTR-2
3190:				
3191:11368+11	0A79  DF      	        RST     18H             ; GET-CHAR
3192:11379+20	0A7A  FDCB2D6E	        BIT     5,(IY+$2D)      ; sv FLAGX
3193:11399+5+6	0A7E  C0      	        RET     NZ              ;
3194:				
3195:11404+10	0A7F  215D40  	        LD      HL,$405D        ; sv MEM-0-1st
3196:11414+16	0A82  221C40  	        LD      ($401C),HL      ; sv STKEND_lo
3197:11430+17	0A85  CD4815  	        CALL    L1548           ; routine INT-TO-FP
3198:11447+17	0A88  CD8A15  	        CALL    L158A           ; routine FP-TO-BC
3199:11464+7+5	0A8B  3804    	        JR      C,L0A91         ; to NO-NUMBER
3200:				
3201:11471+10	0A8D  21F0D8  	        LD      HL,$D8F0        ; value '-10000'
3202:11481+11	0A90  09      	        ADD     HL,BC           ;
3203:				
3204:				;; NO-NUMBER
3205:11492+10	0A91  DA9A0D  	L0A91:  JP      C,L0D9A         ; to REPORT-C
3206:				
3207:11502+4	0A94  BF      	        CP      A               ;
3208:11506+10	0A95  C3BC14  	        JP      L14BC           ; routine SET-MIN
3209:				
3210:				; -------------------------------------------------
3211:				; THE 'REPORT AND LINE NUMBER' PRINTING SUBROUTINES
3212:				; -------------------------------------------------
3213:				;
3214:				;
3215:				
3216:				;; OUT-NUM
3217:11516+11	0A98  D5      	L0A98:  PUSH    DE              ;
3218:11527+11	0A99  E5      	        PUSH    HL              ;
3219:11538+4	0A9A  AF      	        XOR     A               ;
3220:11542+8	0A9B  CB78    	        BIT     7,B             ;
3221:11550+7+5	0A9D  2020    	        JR      NZ,L0ABF        ; to UNITS
3222:				
3223:11557+4	0A9F  60      	        LD       H,B            ;
3224:11561+4	0AA0  69      	        LD      L,C             ;
3225:11565+7	0AA1  1EFF    	        LD      E,$FF           ;
3226:11572+12	0AA3  1808    	        JR      L0AAD           ; to THOUSAND
3227:				
3228:				; ---
3229:				
3230:				;; OUT-NO
3231:11584+11	0AA5  D5      	L0AA5:  PUSH    DE              ;
3232:11595+7	0AA6  56      	        LD      D,(HL)          ;
3233:11602+6	0AA7  23      	        INC     HL              ;
3234:11608+7	0AA8  5E      	        LD      E,(HL)          ;
3235:11615+11	0AA9  E5      	        PUSH    HL              ;
3236:11626+4	0AAA  EB      	        EX      DE,HL           ;
3237:11630+7	0AAB  1E00    	        LD      E,$00           ; set E to leading space.
3238:				
3239:				;; THOUSAND
3240:11637+10	0AAD  0118FC  	L0AAD:  LD      BC,$FC18        ;
3241:11647+17	0AB0  CDE107  	        CALL    L07E1           ; routine OUT-DIGIT
3242:11664+10	0AB3  019CFF  	        LD      BC,$FF9C        ;
3243:11674+17	0AB6  CDE107  	        CALL    L07E1           ; routine OUT-DIGIT
3244:11691+7	0AB9  0EF6    	        LD      C,$F6           ;
3245:11698+17	0ABB  CDE107  	        CALL    L07E1           ; routine OUT-DIGIT
3246:11715+4	0ABE  7D      	        LD      A,L             ;
3247:				
3248:				;; UNITS
3249:11719+17	0ABF  CDEB07  	L0ABF:  CALL    L07EB           ; routine OUT-CODE
3250:11736+10	0AC2  E1      	        POP     HL              ;
3251:11746+10	0AC3  D1      	        POP     DE              ;
3252:11756+10	0AC4  C9      	        RET                     ;
3253:				
3254:				; --------------------------
3255:				; THE 'UNSTACK-Z' SUBROUTINE
3256:				; --------------------------
3257:				; This subroutine is used to return early from a routine when checking syntax.
3258:				; On the ZX81 the same routines that execute commands also check the syntax
3259:				; on line entry. This enables precise placement of the error marker in a line
3260:				; that fails syntax.
3261:				; The sequence CALL SYNTAX-Z ; RET Z can be replaced by a call to this routine
3262:				; although it has not replaced every occurrence of the above two instructions.
3263:				; Even on the ZX-80 this routine was not fully utilized.
3264:				
3265:				;; UNSTACK-Z
3266:11766+17	0AC5  CDA60D  	L0AC5:  CALL    L0DA6           ; routine SYNTAX-Z resets the ZERO flag if
3267:				                                ; checking syntax.
3268:11783+10	0AC8  E1      	        POP     HL              ; drop the return address.
3269:11793+5+6	0AC9  C8      	        RET     Z               ; return to previous calling routine if 
3270:				                                ; checking syntax.
3271:				
3272:11798+4	0ACA  E9      	        JP      (HL)            ; else jump to the continuation address in
3273:				                                ; the calling routine as RET would have done.
3274:				
3275:				; ----------------------------
3276:				; THE 'LPRINT' COMMAND ROUTINE
3277:				; ----------------------------
3278:				;
3279:				;
3280:				
3281:				;; LPRINT
3282:11802+23	0ACB  FDCB01CE	L0ACB:  SET     1,(IY+$01)      ; sv FLAGS  - Signal printer in use
3283:				
3284:				; ---------------------------
3285:				; THE 'PRINT' COMMAND ROUTINE
3286:				; ---------------------------
3287:				;
3288:				;
3289:				
3290:				;; PRINT
3291:11825+7	0ACF  7E      	L0ACF:  LD      A,(HL)          ;
3292:11832+7	0AD0  FE76    	        CP      $76             ;
3293:11839+10	0AD2  CA840B  	        JP      Z,L0B84         ; to PRINT-END
3294:				
3295:				;; PRINT-1
3296:11849+7	0AD5  D61A    	L0AD5:  SUB     $1A             ;
3297:11856+7	0AD7  CE00    	        ADC     A,$00           ;
3298:11863+7+5	0AD9  2869    	        JR      Z,L0B44         ; to SPACING
3299:				
3300:11870+7	0ADB  FEA7    	        CP      $A7             ;
3301:11877+7+5	0ADD  201B    	        JR      NZ,L0AFA        ; to NOT-AT
3302:				
3303:				
3304:11884+11	0ADF  E7      	        RST     20H             ; NEXT-CHAR
3305:11895+17	0AE0  CD920D  	        CALL    L0D92           ; routine CLASS-6
3306:11912+7	0AE3  FE1A    	        CP      $1A             ;
3307:11919+10	0AE5  C29A0D  	        JP      NZ,L0D9A        ; to REPORT-C
3308:				
3309:				
3310:11929+11	0AE8  E7      	        RST     20H             ; NEXT-CHAR
3311:11940+17	0AE9  CD920D  	        CALL    L0D92           ; routine CLASS-6
3312:11957+17	0AEC  CD4E0B  	        CALL    L0B4E           ; routine SYNTAX-ON
3313:				
3314:11974+11	0AEF  EF      	        RST     28H             ;; FP-CALC
3315:     -	0AF0  01      	        DEFB    $01             ;;exchange
3316:     -	0AF1  34      	        DEFB    $34             ;;end-calc
3317:				
3318:11985+17	0AF2  CDF50B  	        CALL    L0BF5           ; routine STK-TO-BC
3319:12002+17	0AF5  CDF508  	        CALL    L08F5           ; routine PRINT-AT
3320:12019+12	0AF8  183D    	        JR      L0B37           ; to PRINT-ON
3321:				
3322:				; ---
3323:				
3324:				;; NOT-AT
3325:12031+7	0AFA  FEA8    	L0AFA:  CP      $A8             ;
3326:12038+7+5	0AFC  2033    	        JR      NZ,L0B31        ; to NOT-TAB
3327:				
3328:				
3329:12045+11	0AFE  E7      	        RST     20H             ; NEXT-CHAR
3330:12056+17	0AFF  CD920D  	        CALL    L0D92           ; routine CLASS-6
3331:12073+17	0B02  CD4E0B  	        CALL    L0B4E           ; routine SYNTAX-ON
3332:12090+17	0B05  CD020C  	        CALL    L0C02           ; routine STK-TO-A
3333:12107+10	0B08  C2AD0E  	        JP      NZ,L0EAD        ; to REPORT-B
3334:				
3335:12117+7	0B0B  E61F    	        AND     $1F             ;
3336:12124+4	0B0D  4F      	        LD      C,A             ;
3337:12128+20	0B0E  FDCB014E	        BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
3338:12148+7+5	0B12  280A    	        JR      Z,L0B1E         ; to TAB-TEST
3339:				
3340:12155+19	0B14  FD9638  	        SUB     (IY+$38)        ; sv PR_CC
3341:12174+8	0B17  CBFF    	        SET     7,A             ;
3342:12182+7	0B19  C63C    	        ADD     A,$3C           ;
3343:12189+10+7	0B1B  D47108  	        CALL    NC,L0871        ; routine COPY-BUFF
3344:				
3345:				;; TAB-TEST
3346:12199+19	0B1E  FD8639  	L0B1E:  ADD     A,(IY+$39)      ; sv S_POSN_x
3347:12218+7	0B21  FE21    	        CP      $21             ;
3348:12225+13	0B23  3A3A40  	        LD      A,($403A)       ; sv S_POSN_y
3349:12238+7	0B26  DE01    	        SBC     A,$01           ;
3350:12245+17	0B28  CDFA08  	        CALL    L08FA           ; routine TEST-VAL
3351:12262+23	0B2B  FDCB01C6	        SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
3352:12285+12	0B2F  1806    	        JR      L0B37           ; to PRINT-ON
3353:				
3354:				; ---
3355:				
3356:				;; NOT-TAB
3357:12297+17	0B31  CD550F  	L0B31:  CALL    L0F55           ; routine SCANNING
3358:12314+17	0B34  CD550B  	        CALL    L0B55           ; routine PRINT-STK
3359:				
3360:				;; PRINT-ON
3361:12331+11	0B37  DF      	L0B37:  RST     18H             ; GET-CHAR
3362:12342+7	0B38  D61A    	        SUB     $1A             ;
3363:12349+7	0B3A  CE00    	        ADC     A,$00           ;
3364:12356+7+5	0B3C  2806    	        JR      Z,L0B44         ; to SPACING
3365:				
3366:12363+17	0B3E  CD1D0D  	        CALL    L0D1D           ; routine CHECK-END
3367:12380+10	0B41  C3840B  	        JP      L0B84           ;;; to PRINT-END
3368:				
3369:				; ---
3370:				
3371:				;; SPACING
3372:12390+10+7	0B44  D48B0B  	L0B44:  CALL    NC,L0B8B        ; routine FIELD
3373:				
3374:12400+11	0B47  E7      	        RST     20H             ; NEXT-CHAR
3375:12411+7	0B48  FE76    	        CP      $76             ;
3376:12418+5+6	0B4A  C8      	        RET     Z               ;
3377:				
3378:12423+10	0B4B  C3D50A  	        JP      L0AD5           ;;; to PRINT-1
3379:				
3380:				; ---
3381:				
3382:				;; SYNTAX-ON
3383:12433+17	0B4E  CDA60D  	L0B4E:  CALL    L0DA6           ; routine SYNTAX-Z
3384:12450+5+6	0B51  C0      	        RET     NZ              ;
3385:				
3386:12455+10	0B52  E1      	        POP     HL              ;
3387:12465+12	0B53  18E2    	        JR      L0B37           ; to PRINT-ON
3388:				
3389:				; ---
3390:				
3391:				;; PRINT-STK
3392:12477+17	0B55  CDC50A  	L0B55:  CALL    L0AC5           ; routine UNSTACK-Z
3393:12494+20	0B58  FDCB0176	        BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
3394:12514+10+7	0B5C  CCF813  	        CALL    Z,L13F8         ; routine STK-FETCH
3395:12524+7+5	0B5F  280A    	        JR      Z,L0B6B         ; to PR-STR-4
3396:				
3397:12531+10	0B61  C3DB15  	        JP      L15DB           ; jump forward to PRINT-FP
3398:				
3399:				; ---
3400:				
3401:				;; PR-STR-1
3402:12541+7	0B64  3E0B    	L0B64:  LD      A,$0B           ;
3403:				
3404:				;; PR-STR-2
3405:12548+11	0B66  D7      	L0B66:  RST     10H             ; PRINT-A
3406:				
3407:				;; PR-STR-3
3408:12559+20	0B67  ED5B1840	L0B67:  LD      DE,($4018)      ; sv X_PTR_lo
3409:				
3410:				;; PR-STR-4
3411:12579+4	0B6B  78      	L0B6B:  LD      A,B             ;
3412:12583+4	0B6C  B1      	        OR      C               ;
3413:12587+6	0B6D  0B      	        DEC     BC              ;
3414:12593+5+6	0B6E  C8      	        RET     Z               ;
3415:				
3416:12598+7	0B6F  1A      	        LD      A,(DE)          ;
3417:12605+6	0B70  13      	        INC     DE              ;
3418:12611+20	0B71  ED531840	        LD      ($4018),DE      ; sv X_PTR_lo
3419:12631+8	0B75  CB77    	        BIT      6,A            ;
3420:12639+7+5	0B77  28ED    	        JR      Z,L0B66         ; to PR-STR-2
3421:				
3422:12646+7	0B79  FEC0    	        CP      $C0             ;
3423:12653+7+5	0B7B  28E7    	        JR      Z,L0B64         ; to PR-STR-1
3424:				
3425:12660+11	0B7D  C5      	        PUSH    BC              ;
3426:12671+17	0B7E  CD4B09  	        CALL    L094B           ; routine TOKENS
3427:12688+10	0B81  C1      	        POP     BC              ;
3428:12698+12	0B82  18E3    	        JR      L0B67           ; to PR-STR-3
3429:				
3430:				; ---
3431:				
3432:				;; PRINT-END
3433:12710+17	0B84  CDC50A  	L0B84:  CALL    L0AC5           ; routine UNSTACK-Z
3434:12727+7	0B87  3E76    	        LD      A,$76           ;
3435:				
3436:12734+11	0B89  D7      	        RST     10H             ; PRINT-A
3437:12745+10	0B8A  C9      	        RET                     ;
3438:				
3439:				; ---
3440:				
3441:				;; FIELD
3442:12755+17	0B8B  CDC50A  	L0B8B:  CALL    L0AC5           ; routine UNSTACK-Z
3443:12772+23	0B8E  FDCB01C6	        SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
3444:12795+4	0B92  AF      	        XOR     A               ;
3445:				
3446:12799+11	0B93  D7      	        RST     10H             ; PRINT-A
3447:12810+20	0B94  ED4B3940	        LD      BC,($4039)      ; sv S_POSN_x
3448:12830+4	0B98  79      	        LD      A,C             ;
3449:12834+20	0B99  FDCB014E	        BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
3450:12854+7+5	0B9D  2805    	        JR      Z,L0BA4         ; to CENTRE
3451:				
3452:12861+7	0B9F  3E5D    	        LD      A,$5D           ;
3453:12868+19	0BA1  FD9638  	        SUB     (IY+$38)        ; sv PR_CC
3454:				
3455:				;; CENTRE
3456:12887+7	0BA4  0E11    	L0BA4:  LD      C,$11           ;
3457:12894+4	0BA6  B9      	        CP      C               ;
3458:12898+7+5	0BA7  3002    	        JR      NC,L0BAB        ; to RIGHT
3459:				
3460:12905+7	0BA9  0E01    	        LD      C,$01           ;
3461:				
3462:				;; RIGHT
3463:12912+17	0BAB  CD0B09  	L0BAB:  CALL    L090B           ; routine SET-FIELD
3464:12929+10	0BAE  C9      	        RET                     ;
3465:				
3466:				; --------------------------------------
3467:				; THE 'PLOT AND UNPLOT' COMMAND ROUTINES
3468:				; --------------------------------------
3469:				;
3470:				;
3471:				
3472:				;; PLOT/UNP
3473:12939+17	0BAF  CDF50B  	L0BAF:  CALL    L0BF5           ; routine STK-TO-BC
3474:12956+20	0BB2  ED433640	        LD      ($4036),BC      ; sv COORDS_x
3475:12976+7	0BB6  3E2B    	        LD      A,$2B           ;
3476:12983+4	0BB8  90      	        SUB     B               ;
3477:12987+10	0BB9  DAAD0E  	        JP      C,L0EAD         ; to REPORT-B
3478:				
3479:12997+4	0BBC  47      	        LD      B,A             ;
3480:13001+7	0BBD  3E01    	        LD      A,$01           ;
3481:13008+8	0BBF  CB28    	        SRA     B               ;
3482:13016+7+5	0BC1  3002    	        JR      NC,L0BC5        ; to COLUMNS
3483:				
3484:13023+7	0BC3  3E04    	        LD      A,$04           ;
3485:				
3486:				;; COLUMNS
3487:13030+8	0BC5  CB29    	L0BC5:  SRA     C               ;
3488:13038+7+5	0BC7  3001    	        JR      NC,L0BCA        ; to FIND-ADDR
3489:				
3490:13045+4	0BC9  07      	        RLCA                    ;
3491:				
3492:				;; FIND-ADDR
3493:13049+11	0BCA  F5      	L0BCA:  PUSH    AF              ;
3494:13060+17	0BCB  CDF508  	        CALL    L08F5           ; routine PRINT-AT
3495:13077+7	0BCE  7E      	        LD      A,(HL)          ;
3496:13084+4	0BCF  07      	        RLCA                    ;
3497:13088+7	0BD0  FE10    	        CP      $10             ;
3498:13095+7+5	0BD2  3006    	        JR      NC,L0BDA        ; to TABLE-PTR
3499:				
3500:13102+4	0BD4  0F      	        RRCA                    ;
3501:13106+7+5	0BD5  3002    	        JR      NC,L0BD9        ; to SQ-SAVED
3502:				
3503:13113+7	0BD7  EE8F    	        XOR     $8F             ;
3504:				
3505:				;; SQ-SAVED
3506:13120+4	0BD9  47      	L0BD9:  LD      B,A             ;
3507:				
3508:				;; TABLE-PTR
3509:13124+10	0BDA  119E0C  	L0BDA:  LD      DE,L0C9E        ; Address: P-UNPLOT
3510:13134+13	0BDD  3A3040  	        LD      A,($4030)       ; sv T_ADDR_lo
3511:13147+4	0BE0  93      	        SUB     E               ;
3512:13151+10	0BE1  FAE90B  	        JP      M,L0BE9         ; to PLOT
3513:				
3514:13161+10	0BE4  F1      	        POP     AF              ;
3515:13171+4	0BE5  2F      	        CPL                     ;
3516:13175+4	0BE6  A0      	        AND     B               ;
3517:13179+12	0BE7  1802    	        JR      L0BEB           ; to UNPLOT
3518:				
3519:				; ---
3520:				
3521:				;; PLOT
3522:13191+10	0BE9  F1      	L0BE9:  POP     AF              ;
3523:13201+4	0BEA  B0      	        OR      B               ;
3524:				
3525:				;; UNPLOT
3526:13205+7	0BEB  FE08    	L0BEB:  CP      $08             ;
3527:13212+7+5	0BED  3802    	        JR      C,L0BF1         ; to PLOT-END
3528:				
3529:13219+7	0BEF  EE8F    	        XOR     $8F             ;
3530:				
3531:				;; PLOT-END
3532:13226+4	0BF1  D9      	L0BF1:  EXX                     ;
3533:				
3534:13230+11	0BF2  D7      	        RST     10H             ; PRINT-A
3535:13241+4	0BF3  D9      	        EXX                     ;
3536:13245+10	0BF4  C9      	        RET                     ;
3537:				
3538:				; ----------------------------
3539:				; THE 'STACK-TO-BC' SUBROUTINE
3540:				; ----------------------------
3541:				;
3542:				;
3543:				
3544:				;; STK-TO-BC
3545:13255+17	0BF5  CD020C  	L0BF5:  CALL    L0C02           ; routine STK-TO-A
3546:13272+4	0BF8  47      	        LD      B,A             ;
3547:13276+11	0BF9  C5      	        PUSH    BC              ;
3548:13287+17	0BFA  CD020C  	        CALL    L0C02           ; routine STK-TO-A
3549:13304+4	0BFD  59      	        LD      E,C             ;
3550:13308+10	0BFE  C1      	        POP     BC              ;
3551:13318+4	0BFF  51      	        LD      D,C             ;
3552:13322+4	0C00  4F      	        LD      C,A             ;
3553:13326+10	0C01  C9      	        RET                     ;
3554:				
3555:				; ---------------------------
3556:				; THE 'STACK-TO-A' SUBROUTINE
3557:				; ---------------------------
3558:				;
3559:				;
3560:				
3561:				;; STK-TO-A
3562:13336+17	0C02  CDCD15  	L0C02:  CALL    L15CD           ; routine FP-TO-A
3563:13353+10	0C05  DAAD0E  	        JP      C,L0EAD         ; to REPORT-B
3564:				
3565:13363+7	0C08  0E01    	        LD      C,$01           ;
3566:13370+5+6	0C0A  C8      	        RET     Z               ;
3567:				
3568:13375+7	0C0B  0EFF    	        LD      C,$FF           ;
3569:13382+10	0C0D  C9      	        RET                     ;
3570:				
3571:				; -----------------------
3572:				; THE 'SCROLL' SUBROUTINE
3573:				; -----------------------
3574:				;
3575:				;
3576:				
3577:				;; SCROLL
3578:13392+19	0C0E  FD4622  	L0C0E:  LD      B,(IY+$22)      ; sv DF_SZ
3579:13411+7	0C11  0E21    	        LD      C,$21           ;
3580:13418+17	0C13  CD1809  	        CALL    L0918           ; routine LOC-ADDR
3581:13435+17	0C16  CD9B09  	        CALL    L099B           ; routine ONE-SPACE
3582:13452+7	0C19  7E      	        LD      A,(HL)          ;
3583:13459+7	0C1A  12      	        LD      (DE),A          ;
3584:13466+23	0C1B  FD343A  	        INC     (IY+$3A)        ; sv S_POSN_y
3585:13489+16	0C1E  2A0C40  	        LD      HL,($400C)      ; sv D_FILE_lo
3586:13505+6	0C21  23      	        INC     HL              ;
3587:13511+4	0C22  54      	        LD      D,H             ;
3588:13515+4	0C23  5D      	        LD      E,L             ;
3589:13519+16+5	0C24  EDB1    	        CPIR                    ;
3590:13535+10	0C26  C3971E  	        jp em_scroll            ; Go to emulator code.
3591:				;        JP      L0A5D           ; to RECLAIM-1
3592:				
3593:				; -------------------
3594:				; THE 'SYNTAX' TABLES
3595:				; -------------------
3596:				
3597:				; i) The Offset table
3598:				
3599:				;; offset-t
3600:     -	0C29  8B      	L0C29:  DEFB    L0CB4 - $       ; 8B offset to; Address: P-LPRINT
3601:     -	0C2A  8D      	        DEFB    L0CB7 - $       ; 8D offset to; Address: P-LLIST
3602:     -	0C2B  2D      	        DEFB    L0C58 - $       ; 2D offset to; Address: P-STOP
3603:     -	0C2C  7F      	        DEFB    L0CAB - $       ; 7F offset to; Address: P-SLOW
3604:     -	0C2D  81      	        DEFB    L0CAE - $       ; 81 offset to; Address: P-FAST
3605:     -	0C2E  49      	        DEFB    L0C77 - $       ; 49 offset to; Address: P-NEW
3606:     -	0C2F  75      	        DEFB    L0CA4 - $       ; 75 offset to; Address: P-SCROLL
3607:     -	0C30  5F      	        DEFB    L0C8F - $       ; 5F offset to; Address: P-CONT
3608:     -	0C31  40      	        DEFB    L0C71 - $       ; 40 offset to; Address: P-DIM
3609:     -	0C32  42      	        DEFB    L0C74 - $       ; 42 offset to; Address: P-REM
3610:     -	0C33  2B      	        DEFB    L0C5E - $       ; 2B offset to; Address: P-FOR
3611:     -	0C34  17      	        DEFB    L0C4B - $       ; 17 offset to; Address: P-GOTO
3612:     -	0C35  1F      	        DEFB    L0C54 - $       ; 1F offset to; Address: P-GOSUB
3613:     -	0C36  37      	        DEFB    L0C6D - $       ; 37 offset to; Address: P-INPUT
3614:     -	0C37  52      	        DEFB    L0C89 - $       ; 52 offset to; Address: P-LOAD
3615:     -	0C38  45      	        DEFB    L0C7D - $       ; 45 offset to; Address: P-LIST
3616:     -	0C39  0F      	        DEFB    L0C48 - $       ; 0F offset to; Address: P-LET
3617:     -	0C3A  6D      	        DEFB    L0CA7 - $       ; 6D offset to; Address: P-PAUSE
3618:     -	0C3B  2B      	        DEFB    L0C66 - $       ; 2B offset to; Address: P-NEXT
3619:     -	0C3C  44      	        DEFB    L0C80 - $       ; 44 offset to; Address: P-POKE
3620:     -	0C3D  2D      	        DEFB    L0C6A - $       ; 2D offset to; Address: P-PRINT
3621:     -	0C3E  5A      	        DEFB    L0C98 - $       ; 5A offset to; Address: P-PLOT
3622:     -	0C3F  3B      	        DEFB    L0C7A - $       ; 3B offset to; Address: P-RUN
3623:     -	0C40  4C      	        DEFB    L0C8C - $       ; 4C offset to; Address: P-SAVE
3624:     -	0C41  45      	        DEFB    L0C86 - $       ; 45 offset to; Address: P-RAND
3625:     -	0C42  0D      	        DEFB    L0C4F - $       ; 0D offset to; Address: P-IF
3626:     -	0C43  52      	        DEFB    L0C95 - $       ; 52 offset to; Address: P-CLS
3627:     -	0C44  5A      	        DEFB    L0C9E - $       ; 5A offset to; Address: P-UNPLOT
3628:     -	0C45  4D      	        DEFB    L0C92 - $       ; 4D offset to; Address: P-CLEAR
3629:     -	0C46  15      	        DEFB    L0C5B - $       ; 15 offset to; Address: P-RETURN
3630:     -	0C47  6A      	        DEFB    L0CB1 - $       ; 6A offset to; Address: P-COPY
3631:				
3632:				; ii) The parameter table.
3633:				
3634:				
3635:				;; P-LET
3636:     -	0C48  01      	L0C48:  DEFB    $01             ; Class-01 - A variable is required.
3637:     -	0C49  14      	        DEFB    $14             ; Separator:  '='
3638:     -	0C4A  02      	        DEFB    $02             ; Class-02 - An expression, numeric or string,
3639:				                                ; must follow.
3640:				
3641:				;; P-GOTO
3642:     -	0C4B  06      	L0C4B:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3643:     -	0C4C  00      	        DEFB    $00             ; Class-00 - No further operands.
3644:     -	0C4D  810E    	        DEFW    L0E81           ; Address: $0E81; Address: GOTO
3645:				
3646:				;; P-IF
3647:     -	0C4F  06      	L0C4F:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3648:     -	0C50  DE      	        DEFB    $DE             ; Separator:  'THEN'
3649:     -	0C51  05      	        DEFB    $05             ; Class-05 - Variable syntax checked entirely
3650:				                                ; by routine.
3651:     -	0C52  AB0D    	        DEFW    L0DAB           ; Address: $0DAB; Address: IF
3652:				
3653:				;; P-GOSUB
3654:     -	0C54  06      	L0C54:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3655:     -	0C55  00      	        DEFB    $00             ; Class-00 - No further operands.
3656:     -	0C56  B50E    	        DEFW    L0EB5           ; Address: $0EB5; Address: GOSUB
3657:				
3658:				;; P-STOP
3659:     -	0C58  00      	L0C58:  DEFB    $00             ; Class-00 - No further operands.
3660:     -	0C59  DC0C    	        DEFW    L0CDC           ; Address: $0CDC; Address: STOP
3661:				
3662:				;; P-RETURN
3663:     -	0C5B  00      	L0C5B:  DEFB    $00             ; Class-00 - No further operands.
3664:     -	0C5C  D80E    	        DEFW    L0ED8           ; Address: $0ED8; Address: RETURN
3665:				
3666:				;; P-FOR
3667:     -	0C5E  04      	L0C5E:  DEFB    $04             ; Class-04 - A single character variable must
3668:				                                ; follow.
3669:     -	0C5F  14      	        DEFB    $14             ; Separator:  '='
3670:     -	0C60  06      	        DEFB    $06             ; Class-06 - A numeric expression must follow.
3671:     -	0C61  DF      	        DEFB    $DF             ; Separator:  'TO'
3672:     -	0C62  06      	        DEFB    $06             ; Class-06 - A numeric expression must follow.
3673:     -	0C63  05      	        DEFB    $05             ; Class-05 - Variable syntax checked entirely
3674:				                                ; by routine.
3675:     -	0C64  B90D    	        DEFW    L0DB9           ; Address: $0DB9; Address: FOR
3676:				
3677:				;; P-NEXT
3678:     -	0C66  04      	L0C66:  DEFB    $04             ; Class-04 - A single character variable must
3679:				                                ; follow.
3680:     -	0C67  00      	        DEFB    $00             ; Class-00 - No further operands.
3681:     -	0C68  2E0E    	        DEFW    L0E2E           ; Address: $0E2E; Address: NEXT
3682:				
3683:				;; P-PRINT
3684:     -	0C6A  05      	L0C6A:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3685:				                                ; by routine.
3686:     -	0C6B  CF0A    	        DEFW    L0ACF           ; Address: $0ACF; Address: PRINT
3687:				
3688:				;; P-INPUT
3689:     -	0C6D  01      	L0C6D:  DEFB    $01             ; Class-01 - A variable is required.
3690:     -	0C6E  00      	        DEFB    $00             ; Class-00 - No further operands.
3691:     -	0C6F  E90E    	        DEFW    L0EE9           ; Address: $0EE9; Address: INPUT
3692:				
3693:				;; P-DIM
3694:     -	0C71  05      	L0C71:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3695:				                                ; by routine.
3696:     -	0C72  0914    	        DEFW    L1409           ; Address: $1409; Address: DIM
3697:				
3698:				;; P-REM
3699:     -	0C74  05      	L0C74:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3700:				                                ; by routine.
3701:     -	0C75  6A0D    	        DEFW    L0D6A           ; Address: $0D6A; Address: REM
3702:				
3703:				;; P-NEW
3704:     -	0C77  00      	L0C77:  DEFB    $00             ; Class-00 - No further operands.
3705:     -	0C78  C303    	        DEFW    L03C3           ; Address: $03C3; Address: NEW
3706:				
3707:				;; P-RUN
3708:     -	0C7A  03      	L0C7A:  DEFB    $03             ; Class-03 - A numeric expression may follow
3709:				                                ; else default to zero.
3710:     -	0C7B  AF0E    	        DEFW    L0EAF           ; Address: $0EAF; Address: RUN
3711:				
3712:				;; P-LIST
3713:     -	0C7D  03      	L0C7D:  DEFB    $03             ; Class-03 - A numeric expression may follow
3714:				                                ; else default to zero.
3715:     -	0C7E  3007    	        DEFW    L0730           ; Address: $0730; Address: LIST
3716:				
3717:				;; P-POKE
3718:     -	0C80  06      	L0C80:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3719:     -	0C81  1A      	        DEFB    $1A             ; Separator:  ','
3720:     -	0C82  06      	        DEFB    $06             ; Class-06 - A numeric expression must follow.
3721:     -	0C83  00      	        DEFB    $00             ; Class-00 - No further operands.
3722:     -	0C84  920E    	        DEFW    L0E92           ; Address: $0E92; Address: POKE
3723:				
3724:				;; P-RAND
3725:     -	0C86  03      	L0C86:  DEFB    $03             ; Class-03 - A numeric expression may follow
3726:				                                ; else default to zero.
3727:     -	0C87  6C0E    	        DEFW    L0E6C           ; Address: $0E6C; Address: RAND
3728:				
3729:				;; P-LOAD
3730:     -	0C89  05      	L0C89:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3731:				                                ; by routine.
3732:     -	0C8A  4003    	        DEFW    L0340           ; Address: $0340; Address: LOAD
3733:				
3734:				;; P-SAVE
3735:     -	0C8C  05      	L0C8C:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3736:				                                ; by routine.
3737:     -	0C8D  F602    	        DEFW    L02F6           ; Address: $02F6; Address: SAVE
3738:				
3739:				;; P-CONT
3740:     -	0C8F  00      	L0C8F:  DEFB    $00             ; Class-00 - No further operands.
3741:     -	0C90  7C0E    	        DEFW    L0E7C           ; Address: $0E7C; Address: CONT
3742:				
3743:				;; P-CLEAR
3744:     -	0C92  00      	L0C92:  DEFB    $00             ; Class-00 - No further operands.
3745:     -	0C93  9A14    	        DEFW    L149A           ; Address: $149A; Address: CLEAR
3746:				
3747:				;; P-CLS
3748:     -	0C95  00      	L0C95:  DEFB    $00             ; Class-00 - No further operands.
3749:     -	0C96  2A0A    	        DEFW    L0A2A           ; Address: $0A2A; Address: CLS
3750:				
3751:				;; P-PLOT
3752:     -	0C98  06      	L0C98:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3753:     -	0C99  1A      	        DEFB    $1A             ; Separator:  ','
3754:     -	0C9A  06      	        DEFB    $06             ; Class-06 - A numeric expression must follow.
3755:     -	0C9B  00      	        DEFB    $00             ; Class-00 - No further operands.
3756:     -	0C9C  AF0B    	        DEFW    L0BAF           ; Address: $0BAF; Address: PLOT/UNP
3757:				
3758:				;; P-UNPLOT
3759:     -	0C9E  06      	L0C9E:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3760:     -	0C9F  1A      	        DEFB    $1A             ; Separator:  ','
3761:     -	0CA0  06      	        DEFB    $06             ; Class-06 - A numeric expression must follow.
3762:     -	0CA1  00      	        DEFB    $00             ; Class-00 - No further operands.
3763:     -	0CA2  AF0B    	        DEFW    L0BAF           ; Address: $0BAF; Address: PLOT/UNP
3764:				
3765:				;; P-SCROLL
3766:     -	0CA4  00      	L0CA4:  DEFB    $00             ; Class-00 - No further operands.
3767:     -	0CA5  0E0C    	        DEFW    L0C0E           ; Address: $0C0E; Address: SCROLL
3768:				
3769:				;; P-PAUSE
3770:     -	0CA7  06      	L0CA7:  DEFB    $06             ; Class-06 - A numeric expression must follow.
3771:     -	0CA8  00      	        DEFB    $00             ; Class-00 - No further operands.
3772:     -	0CA9  320F    	        DEFW    L0F32           ; Address: $0F32; Address: PAUSE
3773:				
3774:				;; P-SLOW
3775:     -	0CAB  00      	L0CAB:  DEFB    $00             ; Class-00 - No further operands.
3776:     -	0CAC  2B0F    	        DEFW    L0F2B           ; Address: $0F2B; Address: SLOW
3777:				
3778:				;; P-FAST
3779:     -	0CAE  00      	L0CAE:  DEFB    $00             ; Class-00 - No further operands.
3780:     -	0CAF  230F    	        DEFW    L0F23           ; Address: $0F23; Address: FAST
3781:				
3782:				;; P-COPY
3783:     -	0CB1  00      	L0CB1:  DEFB    $00             ; Class-00 - No further operands.
3784:     -	0CB2  6908    	        DEFW    L0869           ; Address: $0869; Address: COPY
3785:				
3786:				;; P-LPRINT
3787:     -	0CB4  05      	L0CB4:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
3788:				                                ; by routine.
3789:     -	0CB5  CB0A    	        DEFW    L0ACB           ; Address: $0ACB; Address: LPRINT
3790:				
3791:				;; P-LLIST
3792:     -	0CB7  03      	L0CB7:  DEFB    $03             ; Class-03 - A numeric expression may follow
3793:				                                ; else default to zero.
3794:     -	0CB8  2C07    	        DEFW    L072C           ; Address: $072C; Address: LLIST
3795:				
3796:				
3797:				; ---------------------------
3798:				; THE 'LINE SCANNING' ROUTINE
3799:				; ---------------------------
3800:				;
3801:				;
3802:				
3803:				;; LINE-SCAN
3804:13545+19	0CBA  FD360101	L0CBA:  LD      (IY+$01),$01    ; sv FLAGS
3805:13564+17	0CBE  CD730A  	        CALL    L0A73           ; routine E-LINE-NO
3806:				
3807:				;; LINE-RUN
3808:13581+17	0CC1  CDBC14  	L0CC1:  CALL    L14BC           ; routine SET-MIN
3809:13598+10	0CC4  210040  	        LD      HL,$4000        ; sv ERR_NR
3810:13608+10	0CC7  36FF    	        LD      (HL),$FF        ;
3811:13618+10	0CC9  212D40  	        LD      HL,$402D        ; sv FLAGX
3812:13628+12	0CCC  CB6E    	        BIT     5,(HL)          ;
3813:13640+7+5	0CCE  280E    	        JR      Z,L0CDE         ; to LINE-NULL
3814:				
3815:13647+7	0CD0  FEE3    	        CP      $E3             ; 'STOP' ?
3816:13654+7	0CD2  7E      	        LD      A,(HL)          ;
3817:13661+10	0CD3  C26F0D  	        JP      NZ,L0D6F        ; to INPUT-REP
3818:				
3819:13671+17	0CD6  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
3820:13688+5+6	0CD9  C8      	        RET     Z               ;
3821:				
3822:				
3823:13693+11	0CDA  CF      	        RST     08H             ; ERROR-1
3824:     -	0CDB  0C      	        DEFB    $0C             ; Error Report: BREAK - CONT repeats
3825:				
3826:				
3827:				; --------------------------
3828:				; THE 'STOP' COMMAND ROUTINE
3829:				; --------------------------
3830:				;
3831:				;
3832:				
3833:				;; STOP
3834:13704+11	0CDC  CF      	L0CDC:  RST     08H             ; ERROR-1
3835:     -	0CDD  08      	        DEFB    $08             ; Error Report: STOP statement
3836:				
3837:				; ---
3838:				
3839:				; the interpretation of a line continues with a check for just spaces
3840:				; followed by a carriage return.
3841:				; The IF command also branches here with a true value to execute the
3842:				; statement after the THEN but the statement can be null so
3843:				; 10 IF 1 = 1 THEN
3844:				; passes syntax (on all ZX computers).
3845:				
3846:				;; LINE-NULL
3847:13715+11	0CDE  DF      	L0CDE:  RST     18H             ; GET-CHAR
3848:13726+7	0CDF  0600    	        LD      B,$00           ; prepare to index - early.
3849:13733+7	0CE1  FE76    	        CP      $76             ; compare to NEWLINE.
3850:13740+5+6	0CE3  C8      	        RET     Z               ; return if so.
3851:				
3852:13745+4	0CE4  4F      	        LD      C,A             ; transfer character to C.
3853:				
3854:13749+11	0CE5  E7      	        RST     20H             ; NEXT-CHAR advances.
3855:13760+4	0CE6  79      	        LD      A,C             ; character to A
3856:13764+7	0CE7  D6E1    	        SUB     $E1             ; subtract 'LPRINT' - lowest command.
3857:13771+7+5	0CE9  383B    	        JR      C,L0D26         ; forward if less to REPORT-C2
3858:				
3859:13778+4	0CEB  4F      	        LD      C,A             ; reduced token to C
3860:13782+10	0CEC  21290C  	        LD      HL,L0C29        ; set HL to address of offset table.
3861:13792+11	0CEF  09      	        ADD     HL,BC           ; index into offset table.
3862:13803+7	0CF0  4E      	        LD      C,(HL)          ; fetch offset
3863:13810+11	0CF1  09      	        ADD     HL,BC           ; index into parameter table.
3864:13821+12	0CF2  1803    	        JR      L0CF7           ; to GET-PARAM
3865:				
3866:				; ---
3867:				
3868:				;; SCAN-LOOP
3869:13833+16	0CF4  2A3040  	L0CF4:  LD      HL,($4030)      ; sv T_ADDR_lo
3870:				
3871:				; -> Entry Point to Scanning Loop
3872:				
3873:				;; GET-PARAM
3874:13849+7	0CF7  7E      	L0CF7:  LD      A,(HL)          ;
3875:13856+6	0CF8  23      	        INC     HL              ;
3876:13862+16	0CF9  223040  	        LD      ($4030),HL      ; sv T_ADDR_lo
3877:				
3878:13878+10	0CFC  01F40C  	        LD      BC,L0CF4        ; Address: SCAN-LOOP
3879:13888+11	0CFF  C5      	        PUSH    BC              ; is pushed on machine stack.
3880:				
3881:13899+4	0D00  4F      	        LD      C,A             ;
3882:13903+7	0D01  FE0B    	        CP      $0B             ;
3883:13910+7+5	0D03  300B    	        JR      NC,L0D10        ; to SEPARATOR
3884:				
3885:13917+10	0D05  21160D  	        LD      HL,L0D16        ; class-tbl - the address of the class table.
3886:13927+7	0D08  0600    	        LD      B,$00           ;
3887:13934+11	0D0A  09      	        ADD     HL,BC           ;
3888:13945+7	0D0B  4E      	        LD      C,(HL)          ;
3889:13952+11	0D0C  09      	        ADD     HL,BC           ;
3890:13963+11	0D0D  E5      	        PUSH    HL              ;
3891:				
3892:13974+11	0D0E  DF      	        RST     18H             ; GET-CHAR
3893:13985+10	0D0F  C9      	        RET                     ; indirect jump to class routine and
3894:				                                ; by subsequent RET to SCAN-LOOP.
3895:				
3896:				; -----------------------
3897:				; THE 'SEPARATOR' ROUTINE
3898:				; -----------------------
3899:				
3900:				;; SEPARATOR
3901:13995+11	0D10  DF      	L0D10:  RST     18H             ; GET-CHAR
3902:14006+4	0D11  B9      	        CP      C               ;
3903:14010+7+5	0D12  2012    	        JR      NZ,L0D26        ; to REPORT-C2
3904:				                                ; 'Nonsense in BASIC'
3905:				
3906:14017+11	0D14  E7      	        RST     20H             ; NEXT-CHAR
3907:14028+10	0D15  C9      	        RET                     ; return
3908:				
3909:				
3910:				; -------------------------
3911:				; THE 'COMMAND CLASS' TABLE
3912:				; -------------------------
3913:				;
3914:				
3915:				;; class-tbl
3916:     -	0D16  17      	L0D16:  DEFB    L0D2D - $       ; 17 offset to; Address: CLASS-0
3917:     -	0D17  25      	        DEFB    L0D3C - $       ; 25 offset to; Address: CLASS-1
3918:     -	0D18  53      	        DEFB    L0D6B - $       ; 53 offset to; Address: CLASS-2
3919:     -	0D19  0F      	        DEFB    L0D28 - $       ; 0F offset to; Address: CLASS-3
3920:     -	0D1A  6B      	        DEFB    L0D85 - $       ; 6B offset to; Address: CLASS-4
3921:     -	0D1B  13      	        DEFB    L0D2E - $       ; 13 offset to; Address: CLASS-5
3922:     -	0D1C  76      	        DEFB    L0D92 - $       ; 76 offset to; Address: CLASS-6
3923:				
3924:				
3925:				; --------------------------
3926:				; THE 'CHECK END' SUBROUTINE
3927:				; --------------------------
3928:				; Check for end of statement and that no spurious characters occur after
3929:				; a correctly parsed statement. Since only one statement is allowed on each
3930:				; line, the only character that may follow a statement is a NEWLINE.
3931:				;
3932:				
3933:				;; CHECK-END
3934:14038+17	0D1D  CDA60D  	L0D1D:  CALL    L0DA6           ; routine SYNTAX-Z
3935:14055+5+6	0D20  C0      	        RET     NZ              ; return in runtime.
3936:				
3937:14060+10	0D21  C1      	        POP     BC              ; else drop return address.
3938:				
3939:				;; CHECK-2
3940:14070+7	0D22  7E      	L0D22:  LD      A,(HL)          ; fetch character.
3941:14077+7	0D23  FE76    	        CP      $76             ; compare to NEWLINE.
3942:14084+5+6	0D25  C8      	        RET     Z               ; return if so.
3943:				
3944:				;; REPORT-C2
3945:14089+12	0D26  1872    	L0D26:  JR      L0D9A           ; to REPORT-C
3946:				                                ; 'Nonsense in BASIC'
3947:				
3948:				; --------------------------
3949:				; COMMAND CLASSES 03, 00, 05
3950:				; --------------------------
3951:				;
3952:				;
3953:				
3954:				;; CLASS-3
3955:14101+7	0D28  FE76    	L0D28:  CP      $76             ;
3956:14108+17	0D2A  CD9C0D  	        CALL    L0D9C           ; routine NO-TO-STK
3957:				
3958:				;; CLASS-0
3959:14125+4	0D2D  BF      	L0D2D:  CP      A               ;
3960:				
3961:				;; CLASS-5
3962:14129+10	0D2E  C1      	L0D2E:  POP     BC              ;
3963:14139+10+7	0D2F  CC1D0D  	        CALL    Z,L0D1D         ; routine CHECK-END
3964:14149+4	0D32  EB      	        EX      DE,HL           ;
3965:14153+16	0D33  2A3040  	        LD      HL,($4030)      ; sv T_ADDR_lo
3966:14169+7	0D36  4E      	        LD      C,(HL)          ;
3967:14176+6	0D37  23      	        INC     HL              ;
3968:14182+7	0D38  46      	        LD      B,(HL)          ;
3969:14189+4	0D39  EB      	        EX      DE,HL           ;
3970:				
3971:				;; CLASS-END
3972:14193+11	0D3A  C5      	L0D3A:  PUSH    BC              ;
3973:14204+10	0D3B  C9      	        RET                     ;
3974:				
3975:				; ------------------------------
3976:				; COMMAND CLASSES 01, 02, 04, 06
3977:				; ------------------------------
3978:				;
3979:				;
3980:				
3981:				;; CLASS-1
3982:14214+17	0D3C  CD1C11  	L0D3C:  CALL    L111C           ; routine LOOK-VARS
3983:				
3984:				;; CLASS-4-2
3985:14231+19	0D3F  FD362D00	L0D3F:  LD      (IY+$2D),$00    ; sv FLAGX
3986:14250+7+5	0D43  3008    	        JR      NC,L0D4D        ; to SET-STK
3987:				
3988:14257+23	0D45  FDCB2DCE	        SET     1,(IY+$2D)      ; sv FLAGX
3989:14280+7+5	0D49  2018    	        JR      NZ,L0D63        ; to SET-STRLN
3990:				
3991:				
3992:				;; REPORT-2
3993:14287+11	0D4B  CF      	L0D4B:  RST     08H             ; ERROR-1
3994:     -	0D4C  01      	        DEFB    $01             ; Error Report: Variable not found
3995:				
3996:				; ---
3997:				
3998:				;; SET-STK
3999:14298+10+7	0D4D  CCA711  	L0D4D:  CALL    Z,L11A7         ; routine STK-VAR
4000:14308+20	0D50  FDCB0176	        BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
4001:14328+7+5	0D54  200D    	        JR      NZ,L0D63        ; to SET-STRLN
4002:				
4003:14335+4	0D56  AF      	        XOR     A               ;
4004:14339+17	0D57  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
4005:14356+10+7	0D5A  C4F813  	        CALL    NZ,L13F8        ; routine STK-FETCH
4006:14366+10	0D5D  212D40  	        LD      HL,$402D        ; sv FLAGX
4007:14376+7	0D60  B6      	        OR      (HL)            ;
4008:14383+7	0D61  77      	        LD      (HL),A          ;
4009:14390+4	0D62  EB      	        EX      DE,HL           ;
4010:				
4011:				;; SET-STRLN
4012:14394+20	0D63  ED432E40	L0D63:  LD      ($402E),BC      ; sv STRLEN_lo
4013:14414+16	0D67  221240  	        LD      ($4012),HL      ; sv DEST-lo
4014:				
4015:				; THE 'REM' COMMAND ROUTINE
4016:				
4017:				;; REM
4018:14430+10	0D6A  C9      	L0D6A:  RET                     ;
4019:				
4020:				; ---
4021:				
4022:				;; CLASS-2
4023:14440+10	0D6B  C1      	L0D6B:  POP     BC              ;
4024:14450+13	0D6C  3A0140  	        LD      A,($4001)       ; sv FLAGS
4025:				
4026:				;; INPUT-REP
4027:14463+11	0D6F  F5      	L0D6F:  PUSH    AF              ;
4028:14474+17	0D70  CD550F  	        CALL    L0F55           ; routine SCANNING
4029:14491+10	0D73  F1      	        POP     AF              ;
4030:14501+10	0D74  012113  	        LD      BC,L1321        ; Address: LET
4031:14511+19	0D77  FD5601  	        LD      D,(IY+$01)      ; sv FLAGS
4032:14530+4	0D7A  AA      	        XOR     D               ;
4033:14534+7	0D7B  E640    	        AND     $40             ;
4034:14541+7+5	0D7D  201B    	        JR      NZ,L0D9A        ; to REPORT-C
4035:				
4036:14548+8	0D7F  CB7A    	        BIT     7,D             ;
4037:14556+7+5	0D81  20B7    	        JR      NZ,L0D3A        ; to CLASS-END
4038:				
4039:14563+12	0D83  189D    	        JR      L0D22           ; to CHECK-2
4040:				
4041:				; ---
4042:				
4043:				;; CLASS-4
4044:14575+17	0D85  CD1C11  	L0D85:  CALL    L111C           ; routine LOOK-VARS
4045:14592+11	0D88  F5      	        PUSH    AF              ;
4046:14603+4	0D89  79      	        LD      A,C             ;
4047:14607+7	0D8A  F69F    	        OR      $9F             ;
4048:14614+4	0D8C  3C      	        INC     A               ;
4049:14618+7+5	0D8D  200B    	        JR       NZ,L0D9A       ; to REPORT-C
4050:				
4051:14625+10	0D8F  F1      	        POP     AF              ;
4052:14635+12	0D90  18AD    	        JR      L0D3F           ; to CLASS-4-2
4053:				
4054:				; ---
4055:				
4056:				;; CLASS-6
4057:14647+17	0D92  CD550F  	L0D92:  CALL    L0F55           ; routine SCANNING
4058:14664+20	0D95  FDCB0176	        BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
4059:14684+5+6	0D99  C0      	        RET     NZ              ;
4060:				
4061:				
4062:				;; REPORT-C
4063:14689+11	0D9A  CF      	L0D9A:  RST     08H             ; ERROR-1
4064:     -	0D9B  0B      	        DEFB    $0B             ; Error Report: Nonsense in BASIC
4065:				
4066:				; --------------------------------
4067:				; THE 'NUMBER TO STACK' SUBROUTINE
4068:				; --------------------------------
4069:				;
4070:				;
4071:				
4072:				;; NO-TO-STK
4073:14700+7+5	0D9C  20F4    	L0D9C:  JR      NZ,L0D92        ; back to CLASS-6 with a non-zero number.
4074:				
4075:14707+17	0D9E  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
4076:14724+5+6	0DA1  C8      	        RET     Z               ; return if checking syntax.
4077:				
4078:				; in runtime a zero default is placed on the calculator stack.
4079:				
4080:14729+11	0DA2  EF      	        RST     28H             ;; FP-CALC
4081:     -	0DA3  A0      	        DEFB    $A0             ;;stk-zero
4082:     -	0DA4  34      	        DEFB    $34             ;;end-calc
4083:				
4084:14740+10	0DA5  C9      	        RET                     ; return.
4085:				
4086:				; -------------------------
4087:				; THE 'SYNTAX-Z' SUBROUTINE
4088:				; -------------------------
4089:				; This routine returns with zero flag set if checking syntax.
4090:				; Calling this routine uses three instruction bytes compared to four if the
4091:				; bit test is implemented inline.
4092:				
4093:				;; SYNTAX-Z
4094:14750+20	0DA6  FDCB017E	L0DA6:  BIT     7,(IY+$01)      ; test FLAGS  - checking syntax only?
4095:14770+10	0DAA  C9      	        RET                     ; return.
4096:				
4097:				; ------------------------
4098:				; THE 'IF' COMMAND ROUTINE
4099:				; ------------------------
4100:				; In runtime, the class routines have evaluated the test expression and
4101:				; the result, true or false, is on the stack.
4102:				
4103:				;; IF
4104:14780+17	0DAB  CDA60D  	L0DAB:  CALL    L0DA6           ; routine SYNTAX-Z
4105:14797+7+5	0DAE  2806    	        JR      Z,L0DB6         ; forward if checking syntax to IF-END
4106:				
4107:				; else delete the Boolean value on the calculator stack.
4108:				
4109:14804+11	0DB0  EF      	        RST     28H             ;; FP-CALC
4110:     -	0DB1  02      	        DEFB    $02             ;;delete
4111:     -	0DB2  34      	        DEFB    $34             ;;end-calc
4112:				
4113:				; register DE points to exponent of floating point value.
4114:				
4115:14815+7	0DB3  1A      	        LD      A,(DE)          ; fetch exponent.
4116:14822+4	0DB4  A7      	        AND     A               ; test for zero - FALSE.
4117:14826+5+6	0DB5  C8      	        RET     Z               ; return if so.
4118:				
4119:				;; IF-END
4120:14831+10	0DB6  C3DE0C  	L0DB6:  JP      L0CDE           ; jump back to LINE-NULL
4121:				
4122:				; -------------------------
4123:				; THE 'FOR' COMMAND ROUTINE
4124:				; -------------------------
4125:				;
4126:				;
4127:				
4128:				;; FOR
4129:14841+7	0DB9  FEE0    	L0DB9:  CP      $E0             ; is current character 'STEP' ?
4130:14848+7+5	0DBB  2009    	        JR      NZ,L0DC6        ; forward if not to F-USE-ONE
4131:				
4132:				
4133:14855+11	0DBD  E7      	        RST     20H             ; NEXT-CHAR
4134:14866+17	0DBE  CD920D  	        CALL    L0D92           ; routine CLASS-6 stacks the number
4135:14883+17	0DC1  CD1D0D  	        CALL    L0D1D           ; routine CHECK-END
4136:14900+12	0DC4  1806    	        JR      L0DCC           ; forward to F-REORDER
4137:				
4138:				; ---
4139:				
4140:				;; F-USE-ONE
4141:14912+17	0DC6  CD1D0D  	L0DC6:  CALL    L0D1D           ; routine CHECK-END
4142:				
4143:14929+11	0DC9  EF      	        RST     28H             ;; FP-CALC
4144:     -	0DCA  A1      	        DEFB    $A1             ;;stk-one
4145:     -	0DCB  34      	        DEFB    $34             ;;end-calc
4146:				
4147:				
4148:				
4149:				;; F-REORDER
4150:14940+11	0DCC  EF      	L0DCC:  RST     28H             ;; FP-CALC      v, l, s.
4151:     -	0DCD  C0      	        DEFB    $C0             ;;st-mem-0      v, l, s.
4152:     -	0DCE  02      	        DEFB    $02             ;;delete        v, l.
4153:     -	0DCF  01      	        DEFB    $01             ;;exchange      l, v.
4154:     -	0DD0  E0      	        DEFB    $E0             ;;get-mem-0     l, v, s.
4155:     -	0DD1  01      	        DEFB    $01             ;;exchange      l, s, v.
4156:     -	0DD2  34      	        DEFB    $34             ;;end-calc      l, s, v.
4157:				
4158:14951+17	0DD3  CD2113  	        CALL    L1321           ; routine LET
4159:				
4160:14968+16	0DD6  221F40  	        LD      ($401F),HL      ; set MEM to address variable.
4161:14984+6	0DD9  2B      	        DEC     HL              ; point to letter.
4162:14990+7	0DDA  7E      	        LD      A,(HL)          ;
4163:14997+15	0DDB  CBFE    	        SET     7,(HL)          ;
4164:15012+10	0DDD  010600  	        LD      BC,$0006        ;
4165:15022+11	0DE0  09      	        ADD     HL,BC           ;
4166:15033+4	0DE1  07      	        RLCA                    ;
4167:15037+7+5	0DE2  3806    	        JR      C,L0DEA         ; to F-LMT-STP
4168:				
4169:15044+8	0DE4  CB21    	        SLA     C               ;
4170:15052+17	0DE6  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
4171:15069+6	0DE9  23      	        INC     HL              ;
4172:				
4173:				;; F-LMT-STP
4174:15075+11	0DEA  E5      	L0DEA:  PUSH    HL              ;
4175:				
4176:15086+11	0DEB  EF      	        RST     28H             ;; FP-CALC
4177:     -	0DEC  02      	        DEFB    $02             ;;delete
4178:     -	0DED  02      	        DEFB    $02             ;;delete
4179:     -	0DEE  34      	        DEFB    $34             ;;end-calc
4180:				
4181:15097+10	0DEF  E1      	        POP     HL              ;
4182:15107+4	0DF0  EB      	        EX      DE,HL           ;
4183:				
4184:15111+7	0DF1  0E0A    	        LD      C,$0A           ; ten bytes to be moved.
4185:15118+16+5	0DF3  EDB0    	        LDIR                    ; copy bytes
4186:				
4187:15134+16	0DF5  2A0740  	        LD      HL,($4007)      ; set HL to system variable PPC current line.
4188:15150+4	0DF8  EB      	        EX      DE,HL           ; transfer to DE, variable pointer to HL.
4189:15154+6	0DF9  13      	        INC     DE              ; loop start will be this line + 1 at least.
4190:15160+7	0DFA  73      	        LD      (HL),E          ;
4191:15167+6	0DFB  23      	        INC     HL              ;
4192:15173+7	0DFC  72      	        LD      (HL),D          ;
4193:15180+17	0DFD  CD5A0E  	        CALL    L0E5A           ; routine NEXT-LOOP considers an initial pass.
4194:15197+5+6	0E00  D0      	        RET     NC              ; return if possible.
4195:				
4196:				; else program continues from point following matching NEXT.
4197:				
4198:15202+20	0E01  FDCB087E	        BIT     7,(IY+$08)      ; test PPC_hi
4199:15222+5+6	0E05  C0      	        RET     NZ              ; return if over 32767 ???
4200:				
4201:15227+19	0E06  FD462E  	        LD      B,(IY+$2E)      ; fetch variable name from STRLEN_lo
4202:15246+8	0E09  CBB0    	        RES     6,B             ; make a true letter.
4203:15254+16	0E0B  2A2940  	        LD      HL,($4029)      ; set HL from NXTLIN
4204:				
4205:				; now enter a loop to look for matching next.
4206:				
4207:				;; NXTLIN-NO
4208:15270+7	0E0E  7E      	L0E0E:  LD      A,(HL)          ; fetch high byte of line number.
4209:15277+7	0E0F  E6C0    	        AND     $C0             ; mask off low bits $3F
4210:15284+7+5	0E11  2017    	        JR      NZ,L0E2A        ; forward at end of program to FOR-END
4211:				
4212:15291+11	0E13  C5      	        PUSH    BC              ; save letter
4213:15302+17	0E14  CDF209  	        CALL    L09F2           ; routine NEXT-ONE finds next line.
4214:15319+10	0E17  C1      	        POP     BC              ; restore letter
4215:				
4216:15329+6	0E18  23      	        INC     HL              ; step past low byte
4217:15335+6	0E19  23      	        INC     HL              ; past the
4218:15341+6	0E1A  23      	        INC     HL              ; line length.
4219:15347+17	0E1B  CD4C00  	        CALL    L004C           ; routine TEMP-PTR1 sets CH_ADD
4220:				
4221:15364+11	0E1E  DF      	        RST     18H             ; GET-CHAR
4222:15375+7	0E1F  FEF3    	        CP      $F3             ; compare to 'NEXT'.
4223:15382+4	0E21  EB      	        EX      DE,HL           ; next line to HL.
4224:15386+7+5	0E22  20EA    	        JR      NZ,L0E0E        ; back with no match to NXTLIN-NO
4225:				
4226:				;
4227:				
4228:15393+4	0E24  EB      	        EX      DE,HL           ; restore pointer.
4229:				
4230:15397+11	0E25  E7      	        RST     20H             ; NEXT-CHAR advances and gets letter in A.
4231:15408+4	0E26  EB      	        EX      DE,HL           ; save pointer
4232:15412+4	0E27  B8      	        CP      B               ; compare to variable name.
4233:15416+7+5	0E28  20E4    	        JR      NZ,L0E0E        ; back with mismatch to NXTLIN-NO
4234:				
4235:				;; FOR-END
4236:15423+16	0E2A  222940  	L0E2A:  LD      ($4029),HL      ; update system variable NXTLIN
4237:15439+10	0E2D  C9      	        RET                     ; return.
4238:				
4239:				; --------------------------
4240:				; THE 'NEXT' COMMAND ROUTINE
4241:				; --------------------------
4242:				;
4243:				;
4244:				
4245:				;; NEXT
4246:15449+20	0E2E  FDCB2D4E	L0E2E:  BIT     1,(IY+$2D)      ; sv FLAGX
4247:15469+10	0E32  C24B0D  	        JP      NZ,L0D4B        ; to REPORT-2
4248:				
4249:15479+16	0E35  2A1240  	        LD      HL,($4012)      ; DEST
4250:15495+12	0E38  CB7E    	        BIT     7,(HL)          ;
4251:15507+7+5	0E3A  281C    	        JR      Z,L0E58         ; to REPORT-1
4252:				
4253:15514+6	0E3C  23      	        INC     HL              ;
4254:15520+16	0E3D  221F40  	        LD      ($401F),HL      ; sv MEM_lo
4255:				
4256:15536+11	0E40  EF      	        RST     28H             ;; FP-CALC
4257:     -	0E41  E0      	        DEFB    $E0             ;;get-mem-0
4258:     -	0E42  E2      	        DEFB    $E2             ;;get-mem-2
4259:     -	0E43  0F      	        DEFB    $0F             ;;addition
4260:     -	0E44  C0      	        DEFB    $C0             ;;st-mem-0
4261:     -	0E45  02      	        DEFB    $02             ;;delete
4262:     -	0E46  34      	        DEFB    $34             ;;end-calc
4263:				
4264:15547+17	0E47  CD5A0E  	        CALL    L0E5A           ; routine NEXT-LOOP
4265:15564+5+6	0E4A  D8      	        RET     C               ;
4266:				
4267:15569+16	0E4B  2A1F40  	        LD      HL,($401F)      ; sv MEM_lo
4268:15585+10	0E4E  110F00  	        LD      DE,$000F        ;
4269:15595+11	0E51  19      	        ADD     HL,DE           ;
4270:15606+7	0E52  5E      	        LD      E,(HL)          ;
4271:15613+6	0E53  23      	        INC     HL              ;
4272:15619+7	0E54  56      	        LD      D,(HL)          ;
4273:15626+4	0E55  EB      	        EX      DE,HL           ;
4274:15630+12	0E56  182E    	        JR      L0E86           ; to GOTO-2
4275:				
4276:				; ---
4277:				
4278:				
4279:				;; REPORT-1
4280:15642+11	0E58  CF      	L0E58:  RST     08H             ; ERROR-1
4281:     -	0E59  00      	        DEFB    $00             ; Error Report: NEXT without FOR
4282:				
4283:				
4284:				; --------------------------
4285:				; THE 'NEXT-LOOP' SUBROUTINE
4286:				; --------------------------
4287:				;
4288:				;
4289:				
4290:				;; NEXT-LOOP
4291:15653+11	0E5A  EF      	L0E5A:  RST     28H             ;; FP-CALC
4292:     -	0E5B  E1      	        DEFB    $E1             ;;get-mem-1
4293:     -	0E5C  E0      	        DEFB    $E0             ;;get-mem-0
4294:     -	0E5D  E2      	        DEFB    $E2             ;;get-mem-2
4295:     -	0E5E  32      	        DEFB    $32             ;;less-0
4296:     -	0E5F  00      	        DEFB    $00             ;;jump-true
4297:     -	0E60  02      	        DEFB    $02             ;;to L0E62, LMT-V-VAL
4298:				
4299:     -	0E61  01      	        DEFB    $01             ;;exchange
4300:				
4301:				;; LMT-V-VAL
4302:     -	0E62  03      	L0E62:  DEFB    $03             ;;subtract
4303:     -	0E63  33      	        DEFB    $33             ;;greater-0
4304:     -	0E64  00      	        DEFB    $00             ;;jump-true
4305:     -	0E65  04      	        DEFB    $04             ;;to L0E69, IMPOSS
4306:				
4307:     -	0E66  34      	        DEFB    $34             ;;end-calc
4308:				
4309:15664+4	0E67  A7      	        AND     A               ; clear carry flag
4310:15668+10	0E68  C9      	        RET                     ; return.
4311:				
4312:				; ---
4313:				
4314:				
4315:				;; IMPOSS
4316:     -	0E69  34      	L0E69:  DEFB    $34             ;;end-calc
4317:				
4318:15678+4	0E6A  37      	        SCF                     ; set carry flag
4319:15682+10	0E6B  C9      	        RET                     ; return.
4320:				
4321:				; --------------------------
4322:				; THE 'RAND' COMMAND ROUTINE
4323:				; --------------------------
4324:				; The keyword was 'RANDOMISE' on the ZX80, is 'RAND' here on the ZX81 and
4325:				; becomes 'RANDOMIZE' on the ZX Spectrum.
4326:				; In all invocations the procedure is the same - to set the SEED system variable
4327:				; with a supplied integer value or to use a time-based value if no number, or
4328:				; zero, is supplied.
4329:				
4330:				;; RAND
4331:15692+17	0E6C  CDA70E  	L0E6C:  CALL    L0EA7           ; routine FIND-INT
4332:15709+4	0E6F  78      	        LD      A,B             ; test value
4333:15713+4	0E70  B1      	        OR      C               ; for zero
4334:15717+7+5	0E71  2004    	        JR      NZ,L0E77        ; forward if not zero to SET-SEED
4335:				
4336:15724+20	0E73  ED4B3440	        LD      BC,($4034)      ; fetch value of FRAMES system variable.
4337:				
4338:				;; SET-SEED
4339:15744+20	0E77  ED433240	L0E77:  LD       ($4032),BC     ; update the SEED system variable.
4340:15764+10	0E7B  C9      	        RET                     ; return.
4341:				
4342:				; --------------------------
4343:				; THE 'CONT' COMMAND ROUTINE
4344:				; --------------------------
4345:				; Another abbreviated command. ROM space was really tight.
4346:				; CONTINUE at the line number that was set when break was pressed.
4347:				; Sometimes the current line, sometimes the next line.
4348:				
4349:				;; CONT
4350:15774+16	0E7C  2A2B40  	L0E7C:  LD      HL,($402B)      ; set HL from system variable OLDPPC
4351:15790+12	0E7F  1805    	        JR      L0E86           ; forward to GOTO-2
4352:				
4353:				; --------------------------
4354:				; THE 'GOTO' COMMAND ROUTINE
4355:				; --------------------------
4356:				; This token also suffered from the shortage of room and there is no space
4357:				; getween GO and TO as there is on the ZX80 and ZX Spectrum. The same also 
4358:				; applies to the GOSUB keyword.
4359:				
4360:				;; GOTO
4361:15802+17	0E81  CDA70E  	L0E81:  CALL    L0EA7           ; routine FIND-INT
4362:15819+4	0E84  60      	        LD      H,B             ;
4363:15823+4	0E85  69      	        LD      L,C             ;
4364:				
4365:				;; GOTO-2
4366:15827+4	0E86  7C      	L0E86:  LD      A,H             ;
4367:15831+7	0E87  FEF0    	        CP      $F0             ;
4368:15838+7+5	0E89  3022    	        JR      NC,L0EAD        ; to REPORT-B
4369:				
4370:15845+17	0E8B  CDD809  	        CALL    L09D8           ; routine LINE-ADDR
4371:15862+16	0E8E  222940  	        LD      ($4029),HL      ; sv NXTLIN_lo
4372:15878+10	0E91  C9      	        RET                     ;
4373:				
4374:				; --------------------------
4375:				; THE 'POKE' COMMAND ROUTINE
4376:				; --------------------------
4377:				;
4378:				;
4379:				
4380:				;; POKE
4381:15888+17	0E92  CDCD15  	L0E92:  CALL    L15CD           ; routine FP-TO-A
4382:15905+7+5	0E95  3816    	        JR      C,L0EAD         ; forward, with overflow, to REPORT-B
4383:				
4384:15912+7+5	0E97  2802    	        JR      Z,L0E9B         ; forward, if positive, to POKE-SAVE
4385:				
4386:15919+8	0E99  ED44    	        NEG                     ; negate
4387:				
4388:				;; POKE-SAVE
4389:15927+11	0E9B  F5      	L0E9B:  PUSH    AF              ; preserve value.
4390:15938+17	0E9C  CDA70E  	        CALL    L0EA7           ; routine FIND-INT gets address in BC
4391:				                                ; invoking the error routine with overflow
4392:				                                ; or a negative number.
4393:15955+10	0E9F  F1      	        POP     AF              ; restore value.
4394:				
4395:				; Note. the next two instructions are legacy code from the ZX80 and
4396:				; inappropriate here.
4397:				
4398:15965+20	0EA0  FDCB007E	        BIT     7,(IY+$00)      ; test ERR_NR - is it still $FF ?
4399:15985+5+6	0EA4  C8      	        RET     Z               ; return with error.
4400:				
4401:15990+7	0EA5  02      	        LD      (BC),A          ; update the address contents.
4402:15997+10	0EA6  C9      	        RET                     ; return.
4403:				
4404:				; -----------------------------
4405:				; THE 'FIND INTEGER' SUBROUTINE
4406:				; -----------------------------
4407:				;
4408:				;
4409:				
4410:				;; FIND-INT
4411:16007+17	0EA7  CD8A15  	L0EA7:  CALL    L158A           ; routine FP-TO-BC
4412:16024+7+5	0EAA  3801    	        JR      C,L0EAD         ; forward with overflow to REPORT-B
4413:				
4414:16031+5+6	0EAC  C8      	        RET     Z               ; return if positive (0-65535).
4415:				
4416:				
4417:				;; REPORT-B
4418:16036+11	0EAD  CF      	L0EAD:  RST     08H             ; ERROR-1
4419:     -	0EAE  0A      	        DEFB    $0A             ; Error Report: Integer out of range
4420:				
4421:				; -------------------------
4422:				; THE 'RUN' COMMAND ROUTINE
4423:				; -------------------------
4424:				;
4425:				;
4426:				
4427:				;; RUN
4428:16047+17	0EAF  CD810E  	L0EAF:  CALL    L0E81           ; routine GOTO
4429:16064+10	0EB2  C39A14  	        JP      L149A           ; to CLEAR
4430:				
4431:				; ---------------------------
4432:				; THE 'GOSUB' COMMAND ROUTINE
4433:				; ---------------------------
4434:				;
4435:				;
4436:				
4437:				;; GOSUB
4438:16074+16	0EB5  2A0740  	L0EB5:  LD      HL,($4007)      ; sv PPC_lo
4439:16090+6	0EB8  23      	        INC     HL              ;
4440:16096+19	0EB9  E3      	        EX      (SP),HL         ;
4441:16115+11	0EBA  E5      	        PUSH    HL              ;
4442:16126+20	0EBB  ED730240	        LD      ($4002),SP      ; set the error stack pointer - ERR_SP
4443:16146+17	0EBF  CD810E  	        CALL    L0E81           ; routine GOTO
4444:16163+10	0EC2  010600  	        LD      BC,$0006        ;
4445:				
4446:				; --------------------------
4447:				; THE 'TEST ROOM' SUBROUTINE
4448:				; --------------------------
4449:				;
4450:				;
4451:				
4452:				;; TEST-ROOM
4453:16173+16	0EC5  2A1C40  	L0EC5:  LD      HL,($401C)      ; sv STKEND_lo
4454:16189+11	0EC8  09      	        ADD     HL,BC           ;
4455:16200+7+5	0EC9  3808    	        JR      C,L0ED3         ; to REPORT-4
4456:				
4457:16207+4	0ECB  EB      	        EX      DE,HL           ;
4458:16211+10	0ECC  212400  	        LD      HL,$0024        ;
4459:16221+11	0ECF  19      	        ADD     HL,DE           ;
4460:16232+15	0ED0  ED72    	        SBC     HL,SP           ;
4461:16247+5+6	0ED2  D8      	        RET     C               ;
4462:				
4463:				;; REPORT-4
4464:16252+7	0ED3  2E03    	L0ED3:  LD      L,$03           ;
4465:16259+10	0ED5  C35800  	        JP      L0058           ; to ERROR-3
4466:				
4467:				; ----------------------------
4468:				; THE 'RETURN' COMMAND ROUTINE
4469:				; ----------------------------
4470:				;
4471:				;
4472:				
4473:				;; RETURN
4474:16269+10	0ED8  E1      	L0ED8:  POP     HL              ;
4475:16279+19	0ED9  E3      	        EX      (SP),HL         ;
4476:16298+4	0EDA  7C      	        LD      A,H             ;
4477:16302+7	0EDB  FE3E    	        CP      $3E             ;
4478:16309+7+5	0EDD  2806    	        JR      Z,L0EE5         ; to REPORT-7
4479:				
4480:16316+20	0EDF  ED730240	        LD      ($4002),SP      ; sv ERR_SP_lo
4481:16336+12	0EE3  18A1    	        JR      L0E86           ; back to GOTO-2
4482:				
4483:				; ---
4484:				
4485:				;; REPORT-7
4486:16348+19	0EE5  E3      	L0EE5:  EX      (SP),HL         ;
4487:16367+11	0EE6  E5      	        PUSH    HL              ;
4488:				
4489:16378+11	0EE7  CF      	        RST     08H             ; ERROR-1
4490:     -	0EE8  06      	        DEFB    $06             ; Error Report: RETURN without GOSUB
4491:				
4492:				; ---------------------------
4493:				; THE 'INPUT' COMMAND ROUTINE
4494:				; ---------------------------
4495:				;
4496:				;
4497:				
4498:				;; INPUT
4499:16389+20	0EE9  FDCB087E	L0EE9:  BIT     7,(IY+$08)      ; sv PPC_hi
4500:16409+7+5	0EED  2032    	        JR      NZ,L0F21        ; to REPORT-8
4501:				
4502:16416+17	0EEF  CDA314  	        CALL    L14A3           ; routine X-TEMP
4503:16433+10	0EF2  212D40  	        LD      HL,$402D        ; sv FLAGX
4504:16443+15	0EF5  CBEE    	        SET     5,(HL)          ;
4505:16458+15	0EF7  CBB6    	        RES     6,(HL)          ;
4506:16473+13	0EF9  3A0140  	        LD      A,($4001)       ; sv FLAGS
4507:16486+7	0EFC  E640    	        AND     $40             ;
4508:16493+10	0EFE  010200  	        LD      BC,$0002        ;
4509:16503+7+5	0F01  2002    	        JR      NZ,L0F05        ; to PROMPT
4510:				
4511:16510+7	0F03  0E04    	        LD      C,$04           ;
4512:				
4513:				;; PROMPT
4514:16517+7	0F05  B6      	L0F05:  OR      (HL)            ;
4515:16524+7	0F06  77      	        LD      (HL),A          ;
4516:				
4517:16531+11	0F07  F7      	        RST     30H             ; BC-SPACES
4518:16542+10	0F08  3676    	        LD      (HL),$76        ;
4519:16552+4	0F0A  79      	        LD      A,C             ;
4520:16556+4	0F0B  0F      	        RRCA                    ;
4521:16560+4	0F0C  0F      	        RRCA                    ;
4522:16564+7+5	0F0D  3805    	        JR      C,L0F14         ; to ENTER-CUR
4523:				
4524:16571+7	0F0F  3E0B    	        LD      A,$0B           ;
4525:16578+7	0F11  12      	        LD      (DE),A          ;
4526:16585+6	0F12  2B      	        DEC     HL              ;
4527:16591+7	0F13  77      	        LD      (HL),A          ;
4528:				
4529:				;; ENTER-CUR
4530:16598+6	0F14  2B      	L0F14:  DEC     HL              ;
4531:16604+10	0F15  367F    	        LD      (HL),$7F        ;
4532:16614+16	0F17  2A3940  	        LD      HL,($4039)      ; sv S_POSN_x
4533:16630+16	0F1A  223040  	        LD      ($4030),HL      ; sv T_ADDR_lo
4534:16646+10	0F1D  E1      	        POP     HL              ;
4535:16656+10	0F1E  C37204  	        JP      L0472           ; to LOWER
4536:				
4537:				; ---
4538:				
4539:				;; REPORT-8
4540:16666+11	0F21  CF      	L0F21:  RST     08H             ; ERROR-1
4541:     -	0F22  07      	        DEFB    $07             ; Error Report: End of file
4542:				
4543:				; ---------------------------
4544:				; THE 'FAST' COMMAND ROUTINE
4545:				; ---------------------------
4546:				;
4547:				;
4548:				
4549:				;; FAST
4550:16677+17	0F23  CDE702  	L0F23:  CALL    L02E7           ; routine SET-FAST
4551:16694+23	0F26  FDCB3BB6	        RES     6,(IY+$3B)      ; sv CDFLAG
4552:16717+10	0F2A  C9      	        RET                     ; return.
4553:				
4554:				; --------------------------
4555:				; THE 'SLOW' COMMAND ROUTINE
4556:				; --------------------------
4557:				;
4558:				;
4559:				
4560:				;; SLOW
4561:16727+23	0F2B  FDCB3BF6	L0F2B:  SET     6,(IY+$3B)      ; sv CDFLAG
4562:16750+10	0F2F  C30702  	        JP      L0207           ; to SLOW/FAST
4563:				
4564:				; ---------------------------
4565:				; THE 'PAUSE' COMMAND ROUTINE
4566:				; ---------------------------
4567:				
4568:				;; PAUSE
4569:16760+17	0F32  CDA70E  	L0F32:  CALL    L0EA7           ; routine FIND-INT
4570:16777+17	0F35  CDE702  	        CALL    L02E7           ; routine SET-FAST
4571:16794+4	0F38  60      	        LD      H,B             ;
4572:16798+4	0F39  69      	        LD      L,C             ;
4573:16802+17	0F3A  CD2D02  	        CALL    L022D           ; routine DISPLAY-P
4574:				
4575:16819+19	0F3D  FD3635FF	        LD      (IY+$35),$FF    ; sv FRAMES_hi
4576:				
4577:16838+17	0F41  CD0702  	        CALL    L0207           ; routine SLOW/FAST
4578:16855+12	0F44  1805    	        JR      L0F4B           ; routine DEBOUNCE
4579:				
4580:				; ----------------------
4581:				; THE 'BREAK' SUBROUTINE
4582:				; ----------------------
4583:				;
4584:				;
4585:				; This checks the state of of the space key. Note that this means that there
4586:				; is no way to use space in a BASIC program.
4587:				;; BREAK-1
4588:16867+7	0F46  3E7F    	L0F46:  LD      A,$7F           ; read port $7FFE - keys B,N,M,.,SPACE.
4589:				;        IN      A,($FE)         ;
4590:				;        RRA                     ; carry will be set if space not pressed.
4591:16874+17	0F48  CD5A1E  	        call em_break
4592:				;
4593:     -	0001          	                assert $ = 0x0F4B       ; This address must be maintained
4594:				;
4595:				; -------------------------
4596:				; THE 'DEBOUNCE' SUBROUTINE
4597:				; -------------------------
4598:				;
4599:				;
4600:				
4601:				;; DEBOUNCE
4602:16891+23	0F4B  FDCB3B86	L0F4B:  RES     0,(IY+$3B)      ; update system variable CDFLAG
4603:16914+7	0F4F  3EFF    	        LD      A,$FF           ;
4604:16921+13	0F51  322740  	        LD      ($4027),A       ; update system variable DEBOUNCE
4605:16934+10	0F54  C9      	        RET                     ; return.
4606:				
4607:				
4608:				; -------------------------
4609:				; THE 'SCANNING' SUBROUTINE
4610:				; -------------------------
4611:				; This recursive routine is where the ZX81 gets its power. Provided there is
4612:				; enough memory it can evaluate an expression of unlimited complexity.
4613:				; Note. there is no unary plus so, as on the ZX80, PRINT +1 gives a syntax error.
4614:				; PRINT +1 works on the Spectrum but so too does PRINT + "STRING".
4615:				
4616:				;; SCANNING
4617:16944+11	0F55  DF      	L0F55:  RST     18H             ; GET-CHAR
4618:16955+7	0F56  0600    	        LD      B,$00           ; set B register to zero.
4619:16962+11	0F58  C5      	        PUSH    BC              ; stack zero as a priority end-marker.
4620:				
4621:				;; S-LOOP-1
4622:16973+7	0F59  FE40    	L0F59:  CP      $40             ; compare to the 'RND' character
4623:16980+7+5	0F5B  202F    	        JR      NZ,L0F8C        ; forward, if not, to S-TEST-PI
4624:				
4625:				; ------------------
4626:				; THE 'RND' FUNCTION
4627:				; ------------------
4628:				
4629:16987+17	0F5D  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
4630:17004+7+5	0F60  2828    	        JR      Z,L0F8A         ; forward if checking syntax to S-JPI-END
4631:				
4632:17011+20	0F62  ED4B3240	        LD      BC,($4032)      ; sv SEED_lo
4633:17031+17	0F66  CD2015  	        CALL    L1520           ; routine STACK-BC
4634:				
4635:17048+11	0F69  EF      	        RST     28H             ;; FP-CALC
4636:     -	0F6A  A1      	        DEFB    $A1             ;;stk-one
4637:     -	0F6B  0F      	        DEFB    $0F             ;;addition
4638:     -	0F6C  30      	        DEFB    $30             ;;stk-data
4639:     -	0F6D  37      	        DEFB    $37             ;;Exponent: $87, Bytes: 1
4640:     -	0F6E  16      	        DEFB    $16             ;;(+00,+00,+00)
4641:     -	0F6F  04      	        DEFB    $04             ;;multiply
4642:     -	0F70  30      	        DEFB    $30             ;;stk-data
4643:     -	0F71  80      	        DEFB    $80             ;;Bytes: 3
4644:     -	0F72  41      	        DEFB    $41             ;;Exponent $91
4645:     -	0F73  000080  	        DEFB    $00,$00,$80     ;;(+00)
4646:     -	0F76  2E      	        DEFB    $2E             ;;n-mod-m
4647:     -	0F77  02      	        DEFB    $02             ;;delete
4648:     -	0F78  A1      	        DEFB    $A1             ;;stk-one
4649:     -	0F79  03      	        DEFB    $03             ;;subtract
4650:     -	0F7A  2D      	        DEFB    $2D             ;;duplicate
4651:     -	0F7B  34      	        DEFB    $34             ;;end-calc
4652:				
4653:17059+17	0F7C  CD8A15  	        CALL    L158A           ; routine FP-TO-BC
4654:17076+20	0F7F  ED433240	        LD      ($4032),BC      ; update the SEED system variable.
4655:17096+7	0F83  7E      	        LD      A,(HL)          ; HL addresses the exponent of the last value.
4656:17103+4	0F84  A7      	        AND     A               ; test for zero
4657:17107+7+5	0F85  2803    	        JR      Z,L0F8A         ; forward, if so, to S-JPI-END
4658:				
4659:17114+7	0F87  D610    	        SUB     $10             ; else reduce exponent by sixteen
4660:17121+7	0F89  77      	        LD      (HL),A          ; thus dividing by 65536 for last value.
4661:				
4662:				;; S-JPI-END
4663:17128+12	0F8A  180D    	L0F8A:  JR      L0F99           ; forward to S-PI-END
4664:				
4665:				; ---
4666:				
4667:				;; S-TEST-PI
4668:17140+7	0F8C  FE42    	L0F8C:  CP      $42             ; the 'PI' character
4669:17147+7+5	0F8E  200D    	        JR      NZ,L0F9D        ; forward, if not, to S-TST-INK
4670:				
4671:				; -------------------
4672:				; THE 'PI' EVALUATION
4673:				; -------------------
4674:				
4675:17154+17	0F90  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
4676:17171+7+5	0F93  2804    	        JR      Z,L0F99         ; forward if checking syntax to S-PI-END
4677:				
4678:				
4679:17178+11	0F95  EF      	        RST     28H             ;; FP-CALC
4680:     -	0F96  A3      	        DEFB    $A3             ;;stk-pi/2
4681:     -	0F97  34      	        DEFB    $34             ;;end-calc
4682:				
4683:17189+11	0F98  34      	        INC     (HL)            ; double the exponent giving PI on the stack.
4684:				
4685:				;; S-PI-END
4686:17200+11	0F99  E7      	L0F99:  RST     20H             ; NEXT-CHAR advances character pointer.
4687:				
4688:17211+10	0F9A  C38310  	        JP      L1083           ; jump forward to S-NUMERIC to set the flag
4689:				                                ; to signal numeric result before advancing.
4690:				
4691:				; ---
4692:				
4693:				;; S-TST-INK
4694:17221+7	0F9D  FE41    	L0F9D:  CP      $41             ; compare to character 'INKEY$'
4695:17228+7+5	0F9F  2011    	        JR      NZ,L0FB2        ; forward, if not, to S-ALPHANUM
4696:				
4697:				; -----------------------
4698:				; THE 'INKEY$' EVALUATION
4699:				; -----------------------
4700:				
4701:				;        CALL    L02BB           ; routine KEYBOARD
4702:17235+17	0FA1  CD4E1E  	        call em_inkey           ; Emulator inkey code
4703:				; H - active low column bits with shift in bit 0, so we have
4704:				; $FD, $FB, $F7, $EF, $DF or
4705:				; $FC, $FA, $F6, $EE, $DE if shifted.
4706:				; L - active low row bits
4707:17252+4	0FA4  44      	        LD      B,H             ;
4708:17256+4	0FA5  4D      	        LD      C,L             ;
4709:17260+4	0FA6  51      	        LD      D,C             ;
4710:17264+4	0FA7  14      	        INC     D               ;
4711:				; Key row in B and column in C.
4712:17268+10+7	0FA8  C4BD07  	        CALL    NZ,L07BD        ; routine DECODE
4713:17278+4	0FAB  7A      	        LD      A,D             ;
4714:17282+4	0FAC  8A      	        ADC     A,D             ;
4715:17286+4	0FAD  42      	        LD      B,D             ;
4716:17290+4	0FAE  4F      	        LD      C,A             ;
4717:17294+4	0FAF  EB      	        EX      DE,HL           ;
4718:17298+12	0FB0  183B    	        JR      L0FED           ; forward to S-STRING
4719:				
4720:				; ---
4721:				
4722:				;; S-ALPHANUM
4723:17310+17	0FB2  CDD214  	L0FB2:  CALL    L14D2           ; routine ALPHANUM
4724:17327+7+5	0FB5  386E    	        JR      C,L1025         ; forward, if alphanumeric to S-LTR-DGT
4725:				
4726:17334+7	0FB7  FE1B    	        CP      $1B             ; is character a '.' ?
4727:17341+10	0FB9  CA4710  	        JP      Z,L1047         ; jump forward if so to S-DECIMAL
4728:				
4729:17351+10	0FBC  01D809  	        LD      BC,$09D8        ; prepare priority 09, operation 'subtract'
4730:17361+7	0FBF  FE16    	        CP      $16             ; is character unary minus '-' ?
4731:17368+7+5	0FC1  285D    	        JR      Z,L1020         ; forward, if so, to S-PUSH-PO
4732:				
4733:17375+7	0FC3  FE10    	        CP      $10             ; is character a '(' ?
4734:17382+7+5	0FC5  200F    	        JR      NZ,L0FD6        ; forward if not to S-QUOTE
4735:				
4736:17389+17	0FC7  CD4900  	        CALL    L0049           ; routine CH-ADD+1 advances character pointer.
4737:				
4738:17406+17	0FCA  CD550F  	        CALL    L0F55           ; recursively call routine SCANNING to
4739:				                                ; evaluate the sub-expression.
4740:				
4741:17423+7	0FCD  FE11    	        CP      $11             ; is subsequent character a ')' ?
4742:17430+7+5	0FCF  202E    	        JR      NZ,L0FFF        ; forward if not to S-RPT-C
4743:				
4744:				
4745:17437+17	0FD1  CD4900  	        CALL    L0049           ; routine CH-ADD+1  advances.
4746:17454+12	0FD4  1822    	        JR      L0FF8           ; relative jump to S-JP-CONT3 and then S-CONT3
4747:				
4748:				; ---
4749:				
4750:				; consider a quoted string e.g. PRINT "Hooray!"
4751:				; Note. quotes are not allowed within a string.
4752:				
4753:				;; S-QUOTE
4754:17466+7	0FD6  FE0B    	L0FD6:  CP      $0B             ; is character a quote (") ?
4755:17473+7+5	0FD8  2028    	        JR      NZ,L1002        ; forward, if not, to S-FUNCTION
4756:				
4757:17480+17	0FDA  CD4900  	        CALL    L0049           ; routine CH-ADD+1 advances
4758:17497+11	0FDD  E5      	        PUSH    HL              ; * save start of string.
4759:17508+12	0FDE  1803    	        JR      L0FE3           ; forward to S-QUOTE-S
4760:				
4761:				; ---
4762:				
4763:				
4764:				;; S-Q-AGAIN
4765:17520+17	0FE0  CD4900  	L0FE0:  CALL    L0049           ; routine CH-ADD+1
4766:				
4767:				;; S-QUOTE-S
4768:17537+7	0FE3  FE0B    	L0FE3:  CP      $0B             ; is character a '"' ?
4769:17544+7+5	0FE5  2014    	        JR      NZ,L0FFB        ; forward if not to S-Q-NL
4770:				
4771:17551+10	0FE7  D1      	        POP     DE              ; * retrieve start of string
4772:17561+4	0FE8  A7      	        AND     A               ; prepare to subtract.
4773:17565+15	0FE9  ED52    	        SBC     HL,DE           ; subtract start from current position.
4774:17580+4	0FEB  44      	        LD      B,H             ; transfer this length
4775:17584+4	0FEC  4D      	        LD      C,L             ; to the BC register pair.
4776:				
4777:				;; S-STRING
4778:17588+10	0FED  210140  	L0FED:  LD      HL,$4001        ; address system variable FLAGS
4779:17598+15	0FF0  CBB6    	        RES     6,(HL)          ; signal string result
4780:17613+12	0FF2  CB7E    	        BIT     7,(HL)          ; test if checking syntax.
4781:				
4782:17625+10+7	0FF4  C4C312  	        CALL    NZ,L12C3        ; in run-time routine STK-STO-$ stacks the
4783:				                                ; string descriptor - start DE, length BC.
4784:				
4785:17635+11	0FF7  E7      	        RST     20H             ; NEXT-CHAR advances pointer.
4786:				
4787:				;; S-J-CONT-3
4788:17646+10	0FF8  C38810  	L0FF8:  JP      L1088           ; jump to S-CONT-3
4789:				
4790:				; ---
4791:				
4792:				; A string with no terminating quote has to be considered.
4793:				
4794:				;; S-Q-NL
4795:17656+7	0FFB  FE76    	L0FFB:  CP      $76             ; compare to NEWLINE
4796:17663+7+5	0FFD  20E1    	        JR      NZ,L0FE0        ; loop back if not to S-Q-AGAIN
4797:				
4798:				;; S-RPT-C
4799:17670+10	0FFF  C39A0D  	L0FFF:  JP      L0D9A           ; to REPORT-C
4800:				
4801:				; ---
4802:				
4803:				;; S-FUNCTION
4804:17680+7	1002  D6C4    	L1002:  SUB     $C4             ; subtract 'CODE' reducing codes
4805:				                                ; CODE thru '<>' to range $00 - $XX
4806:17687+7+5	1004  38F9    	        JR      C,L0FFF         ; back, if less, to S-RPT-C
4807:				
4808:				; test for NOT the last function in character set.
4809:				
4810:17694+10	1006  01EC04  	        LD      BC,$04EC        ; prepare priority $04, operation 'not'
4811:17704+7	1009  FE13    	        CP      $13             ; compare to 'NOT'  ( - CODE)
4812:17711+7+5	100B  2813    	        JR      Z,L1020         ; forward, if so, to S-PUSH-PO
4813:				
4814:17718+7+5	100D  30F0    	        JR      NC,L0FFF        ; back with anything higher to S-RPT-C
4815:				
4816:				; else is a function 'CODE' thru 'CHR$'
4817:				
4818:17725+7	100F  0610    	        LD      B,$10           ; priority sixteen binds all functions to
4819:				                                ; arguments removing the need for brackets.
4820:				
4821:17732+7	1011  C6D9    	        ADD     A,$D9           ; add $D9 to give range $D9 thru $EB
4822:				                                ; bit 6 is set to show numeric argument.
4823:				                                ; bit 7 is set to show numeric result.
4824:				
4825:				; now adjust these default argument/result indicators.
4826:				
4827:17739+4	1013  4F      	        LD      C,A             ; save code in C
4828:				
4829:17743+7	1014  FEDC    	        CP      $DC             ; separate 'CODE', 'VAL', 'LEN'
4830:17750+7+5	1016  3002    	        JR      NC,L101A        ; skip forward if string operand to S-NO-TO-$
4831:				
4832:17757+8	1018  CBB1    	        RES     6,C             ; signal string operand.
4833:				
4834:				;; S-NO-TO-$
4835:17765+7	101A  FEEA    	L101A:  CP      $EA             ; isolate top of range 'STR$' and 'CHR$'
4836:17772+7+5	101C  3802    	        JR      C,L1020         ; skip forward with others to S-PUSH-PO
4837:				
4838:17779+8	101E  CBB9    	        RES     7,C             ; signal string result.
4839:				
4840:				;; S-PUSH-PO
4841:17787+11	1020  C5      	L1020:  PUSH    BC              ; push the priority/operation
4842:				
4843:17798+11	1021  E7      	        RST     20H             ; NEXT-CHAR
4844:17809+10	1022  C3590F  	        JP      L0F59           ; jump back to S-LOOP-1
4845:				
4846:				; ---
4847:				
4848:				;; S-LTR-DGT
4849:17819+7	1025  FE26    	L1025:  CP      $26             ; compare to 'A'.
4850:17826+7+5	1027  381E    	        JR      C,L1047         ; forward if less to S-DECIMAL
4851:				
4852:17833+17	1029  CD1C11  	        CALL    L111C           ; routine LOOK-VARS
4853:17850+10	102C  DA4B0D  	        JP      C,L0D4B         ; back if not found to REPORT-2
4854:				                                ; a variable is always 'found' when checking
4855:				                                ; syntax.
4856:				
4857:17860+10+7	102F  CCA711  	        CALL    Z,L11A7         ; routine STK-VAR stacks string parameters or
4858:				                                ; returns cell location if numeric.
4859:				
4860:17870+13	1032  3A0140  	        LD      A,($4001)       ; fetch FLAGS
4861:17883+7	1035  FEC0    	        CP      $C0             ; compare to numeric result/numeric operand
4862:17890+7+5	1037  384E    	        JR      C,L1087         ; forward if not numeric to S-CONT-2
4863:				
4864:17897+6	1039  23      	        INC     HL              ; address numeric contents of variable.
4865:17903+20	103A  ED5B1C40	        LD      DE,($401C)      ; set destination to STKEND
4866:17923+17	103E  CDF619  	        CALL    L19F6           ; routine MOVE-FP stacks the five bytes
4867:17940+4	1041  EB      	        EX      DE,HL           ; transfer new free location from DE to HL.
4868:17944+16	1042  221C40  	        LD      ($401C),HL      ; update STKEND system variable.
4869:17960+12	1045  1840    	        JR      L1087           ; forward to S-CONT-2
4870:				
4871:				; ---
4872:				
4873:				; The Scanning Decimal routine is invoked when a decimal point or digit is
4874:				; found in the expression.
4875:				; When checking syntax, then the 'hidden floating point' form is placed
4876:				; after the number in the BASIC line.
4877:				; In run-time, the digits are skipped and the floating point number is picked
4878:				; up.
4879:				
4880:				;; S-DECIMAL
4881:17972+17	1047  CDA60D  	L1047:  CALL    L0DA6           ; routine SYNTAX-Z
4882:17989+7+5	104A  2023    	        JR      NZ,L106F        ; forward in run-time to S-STK-DEC
4883:				
4884:17996+17	104C  CDD914  	        CALL    L14D9           ; routine DEC-TO-FP
4885:				
4886:18013+11	104F  DF      	        RST     18H             ; GET-CHAR advances HL past digits
4887:18024+10	1050  010600  	        LD      BC,$0006        ; six locations are required.
4888:18034+17	1053  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
4889:18051+6	1056  23      	        INC     HL              ; point to first new location
4890:18057+10	1057  367E    	        LD      (HL),$7E        ; insert the number marker 126 decimal.
4891:18067+6	1059  23      	        INC     HL              ; increment
4892:18073+4	105A  EB      	        EX      DE,HL           ; transfer destination to DE.
4893:18077+16	105B  2A1C40  	        LD      HL,($401C)      ; set HL from STKEND which points to the
4894:				                                ; first location after the 'last value'
4895:18093+7	105E  0E05    	        LD      C,$05           ; five bytes to move.
4896:18100+4	1060  A7      	        AND     A               ; clear carry.
4897:18104+15	1061  ED42    	        SBC     HL,BC           ; subtract five pointing to 'last value'.
4898:18119+16	1063  221C40  	        LD      ($401C),HL      ; update STKEND thereby 'deleting the value.
4899:				
4900:18135+16+5	1066  EDB0    	        LDIR                    ; copy the five value bytes.
4901:				
4902:18151+4	1068  EB      	        EX      DE,HL           ; basic pointer to HL which may be white-space
4903:				                                ; following the number.
4904:18155+6	1069  2B      	        DEC     HL              ; now points to last of five bytes.
4905:18161+17	106A  CD4C00  	        CALL    L004C           ; routine TEMP-PTR1 advances the character
4906:				                                ; address skipping any white-space.
4907:18178+12	106D  1814    	        JR      L1083           ; forward to S-NUMERIC
4908:				                                ; to signal a numeric result.
4909:				
4910:				; ---
4911:				
4912:				; In run-time the branch is here when a digit or point is encountered.
4913:				
4914:				;; S-STK-DEC
4915:18190+11	106F  E7      	L106F:  RST     20H             ; NEXT-CHAR
4916:18201+7	1070  FE7E    	        CP      $7E             ; compare to 'number marker'
4917:18208+7+5	1072  20FB    	        JR      NZ,L106F        ; loop back until found to S-STK-DEC
4918:				                                ; skipping all the digits.
4919:				
4920:18215+6	1074  23      	        INC     HL              ; point to first of five hidden bytes.
4921:18221+20	1075  ED5B1C40	        LD      DE,($401C)      ; set destination from STKEND system variable
4922:18241+17	1079  CDF619  	        CALL    L19F6           ; routine MOVE-FP stacks the number.
4923:18258+20	107C  ED531C40	        LD      ($401C),DE      ; update system variable STKEND.
4924:18278+16	1080  221640  	        LD      ($4016),HL      ; update system variable CH_ADD.
4925:				
4926:				;; S-NUMERIC
4927:18294+23	1083  FDCB01F6	L1083:  SET     6,(IY+$01)      ; update FLAGS  - Signal numeric result
4928:				
4929:				;; S-CONT-2
4930:18317+11	1087  DF      	L1087:  RST     18H             ; GET-CHAR
4931:				
4932:				;; S-CONT-3
4933:18328+7	1088  FE10    	L1088:  CP      $10             ; compare to opening bracket '('
4934:18335+7+5	108A  200C    	        JR      NZ,L1098        ; forward if not to S-OPERTR
4935:				
4936:18342+20	108C  FDCB0176	        BIT     6,(IY+$01)      ; test FLAGS  - Numeric or string result?
4937:18362+7+5	1090  202A    	        JR      NZ,L10BC        ; forward if numeric to S-LOOP
4938:				
4939:				; else is a string
4940:				
4941:18369+17	1092  CD6312  	        CALL    L1263           ; routine SLICING
4942:				
4943:18386+11	1095  E7      	        RST     20H             ; NEXT-CHAR
4944:18397+12	1096  18F0    	        JR      L1088           ; back to S-CONT-3
4945:				
4946:				; ---
4947:				
4948:				; the character is now manipulated to form an equivalent in the table of
4949:				; calculator literals. This is quite cumbersome and in the ZX Spectrum a
4950:				; simple look-up table was introduced at this point.
4951:				
4952:				;; S-OPERTR
4953:18409+10	1098  01C300  	L1098:  LD      BC,$00C3        ; prepare operator 'subtract' as default.
4954:				                                ; also set B to zero for later indexing.
4955:				
4956:18419+7	109B  FE12    	        CP      $12             ; is character '>' ?
4957:18426+7+5	109D  381D    	        JR      C,L10BC         ; forward if less to S-LOOP as
4958:				                                ; we have reached end of meaningful expression
4959:				
4960:18433+7	109F  D616    	        SUB     $16             ; is character '-' ?
4961:18440+7+5	10A1  3004    	        JR      NC,L10A7        ; forward with - * / and '**' '<>' to SUBMLTDIV
4962:				
4963:18447+7	10A3  C60D    	        ADD     A,$0D           ; increase others by thirteen
4964:				                                ; $09 '>' thru $0C '+'
4965:18454+12	10A5  180E    	        JR      L10B5           ; forward to GET-PRIO
4966:				
4967:				; ---
4968:				
4969:				;; SUBMLTDIV
4970:18466+7	10A7  FE03    	L10A7:  CP      $03             ; isolate $00 '-', $01 '*', $02 '/'
4971:18473+7+5	10A9  380A    	        JR      C,L10B5         ; forward if so to GET-PRIO
4972:				
4973:				; else possibly originally $D8 '**' thru $DD '<>' already reduced by $16
4974:				
4975:18480+7	10AB  D6C2    	        SUB     $C2             ; giving range $00 to $05
4976:18487+7+5	10AD  380D    	        JR      C,L10BC         ; forward if less to S-LOOP
4977:				
4978:18494+7	10AF  FE06    	        CP      $06             ; test the upper limit for nonsense also
4979:18501+7+5	10B1  3009    	        JR      NC,L10BC        ; forward if so to S-LOOP
4980:				
4981:18508+7	10B3  C603    	        ADD     A,$03           ; increase by 3 to give combined operators of
4982:				
4983:				                                ; $00 '-'
4984:				                                ; $01 '*'
4985:				                                ; $02 '/'
4986:				
4987:				                                ; $03 '**'
4988:				                                ; $04 'OR'
4989:				                                ; $05 'AND'
4990:				                                ; $06 '<='
4991:				                                ; $07 '>='
4992:				                                ; $08 '<>'
4993:				
4994:				                                ; $09 '>'
4995:				                                ; $0A '<'
4996:				                                ; $0B '='
4997:				                                ; $0C '+'
4998:				
4999:				;; GET-PRIO
5000:18515+4	10B5  81      	L10B5:  ADD     A,C             ; add to default operation 'sub' ($C3)
5001:18519+4	10B6  4F      	        LD      C,A             ; and place in operator byte - C.
5002:				
5003:18523+10	10B7  214C10  	        LD      HL,L110F - $C3  ; theoretical base of the priorities table.
5004:18533+11	10BA  09      	        ADD     HL,BC           ; add C ( B is zero)
5005:18544+7	10BB  46      	        LD      B,(HL)          ; pick up the priority in B
5006:				
5007:				;; S-LOOP
5008:18551+10	10BC  D1      	L10BC:  POP     DE              ; restore previous
5009:18561+4	10BD  7A      	        LD      A,D             ; load A with priority.
5010:18565+4	10BE  B8      	        CP      B               ; is present priority higher
5011:18569+7+5	10BF  382C    	        JR      C,L10ED         ; forward if so to S-TIGHTER
5012:				
5013:18576+4	10C1  A7      	        AND     A               ; are both priorities zero
5014:18580+10	10C2  CA1800  	        JP      Z,L0018         ; exit if zero via GET-CHAR
5015:				
5016:18590+11	10C5  C5      	        PUSH    BC              ; stack present values
5017:18601+11	10C6  D5      	        PUSH    DE              ; stack last values
5018:18612+17	10C7  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
5019:18629+7+5	10CA  2809    	        JR      Z,L10D5         ; forward is checking syntax to S-SYNTEST
5020:				
5021:18636+4	10CC  7B      	        LD      A,E             ; fetch last operation
5022:18640+7	10CD  E63F    	        AND     $3F             ; mask off the indicator bits to give true
5023:				                                ; calculator literal.
5024:18647+4	10CF  47      	        LD      B,A             ; place in the B register for BREG
5025:				
5026:				; perform the single operation
5027:				
5028:18651+11	10D0  EF      	        RST     28H             ;; FP-CALC
5029:     -	10D1  37      	        DEFB    $37             ;;fp-calc-2
5030:     -	10D2  34      	        DEFB    $34             ;;end-calc
5031:				
5032:18662+12	10D3  1809    	        JR      L10DE           ; forward to S-RUNTEST
5033:				
5034:				; ---
5035:				
5036:				;; S-SYNTEST
5037:18674+4	10D5  7B      	L10D5:  LD      A,E             ; transfer masked operator to A
5038:18678+19	10D6  FDAE01  	        XOR     (IY+$01)        ; XOR with FLAGS like results will reset bit 6
5039:18697+7	10D9  E640    	        AND     $40             ; test bit 6
5040:				
5041:				;; S-RPORT-C
5042:18704+10	10DB  C29A0D  	L10DB:  JP      NZ,L0D9A        ; back to REPORT-C if results do not agree.
5043:				
5044:				; ---
5045:				
5046:				; in run-time impose bit 7 of the operator onto bit 6 of the FLAGS
5047:				
5048:				;; S-RUNTEST
5049:18714+10	10DE  D1      	L10DE:  POP     DE              ; restore last operation.
5050:18724+10	10DF  210140  	        LD      HL,$4001        ; address system variable FLAGS
5051:18734+15	10E2  CBF6    	        SET     6,(HL)          ; presume a numeric result
5052:18749+8	10E4  CB7B    	        BIT     7,E             ; test expected result in operation
5053:18757+7+5	10E6  2002    	        JR      NZ,L10EA        ; forward if numeric to S-LOOPEND
5054:				
5055:18764+15	10E8  CBB6    	        RES     6,(HL)          ; reset to signal string result
5056:				
5057:				;; S-LOOPEND
5058:18779+10	10EA  C1      	L10EA:  POP     BC              ; restore present values
5059:18789+12	10EB  18CF    	        JR      L10BC           ; back to S-LOOP
5060:				
5061:				; ---
5062:				
5063:				;; S-TIGHTER
5064:18801+11	10ED  D5      	L10ED:  PUSH    DE              ; push last values and consider these
5065:				
5066:18812+4	10EE  79      	        LD      A,C             ; get the present operator.
5067:18816+20	10EF  FDCB0176	        BIT     6,(IY+$01)      ; test FLAGS  - Numeric or string result?
5068:18836+7+5	10F3  2015    	        JR      NZ,L110A        ; forward if numeric to S-NEXT
5069:				
5070:18843+7	10F5  E63F    	        AND     $3F             ; strip indicator bits to give clear literal.
5071:18850+7	10F7  C608    	        ADD     A,$08           ; add eight - augmenting numeric to equivalent
5072:				                                ; string literals.
5073:18857+4	10F9  4F      	        LD      C,A             ; place plain literal back in C.
5074:18861+7	10FA  FE10    	        CP      $10             ; compare to 'AND'
5075:18868+7+5	10FC  2004    	        JR      NZ,L1102        ; forward if not to S-NOT-AND
5076:				
5077:18875+8	10FE  CBF1    	        SET     6,C             ; set the numeric operand required for 'AND'
5078:18883+12	1100  1808    	        JR      L110A           ; forward to S-NEXT
5079:				
5080:				; ---
5081:				
5082:				;; S-NOT-AND
5083:18895+7+5	1102  38D7    	L1102:  JR      C,L10DB         ; back if less than 'AND' to S-RPORT-C
5084:				                                ; Nonsense if '-', '*' etc.
5085:				
5086:18902+7	1104  FE17    	        CP      $17             ; compare to 'strs-add' literal
5087:18909+7+5	1106  2802    	        JR      Z,L110A         ; forward if so signaling string result
5088:				
5089:18916+8	1108  CBF9    	        SET     7,C             ; set bit to numeric (Boolean) for others.
5090:				
5091:				;; S-NEXT
5092:18924+11	110A  C5      	L110A:  PUSH    BC              ; stack 'present' values
5093:				
5094:18935+11	110B  E7      	        RST     20H             ; NEXT-CHAR
5095:18946+10	110C  C3590F  	        JP      L0F59           ; jump back to S-LOOP-1
5096:				
5097:				
5098:				
5099:				; -------------------------
5100:				; THE 'TABLE OF PRIORITIES'
5101:				; -------------------------
5102:				;
5103:				;
5104:				
5105:				;; tbl-pri
5106:     -	110F  06      	L110F:  DEFB    $06             ;       '-'
5107:     -	1110  08      	        DEFB    $08             ;       '*'
5108:     -	1111  08      	        DEFB    $08             ;       '/'
5109:     -	1112  0A      	        DEFB    $0A             ;       '**'
5110:     -	1113  02      	        DEFB    $02             ;       'OR'
5111:     -	1114  03      	        DEFB    $03             ;       'AND'
5112:     -	1115  05      	        DEFB    $05             ;       '<='
5113:     -	1116  05      	        DEFB    $05             ;       '>='
5114:     -	1117  05      	        DEFB    $05             ;       '<>'
5115:     -	1118  05      	        DEFB    $05             ;       '>'
5116:     -	1119  05      	        DEFB    $05             ;       '<'
5117:     -	111A  05      	        DEFB    $05             ;       '='
5118:     -	111B  06      	        DEFB    $06             ;       '+'
5119:				
5120:				
5121:				; --------------------------
5122:				; THE 'LOOK-VARS' SUBROUTINE
5123:				; --------------------------
5124:				;
5125:				;
5126:				
5127:				;; LOOK-VARS
5128:18956+23	111C  FDCB01F6	L111C:  SET     6,(IY+$01)      ; sv FLAGS  - Signal numeric result
5129:				
5130:18979+11	1120  DF      	        RST     18H             ; GET-CHAR
5131:18990+17	1121  CDCE14  	        CALL    L14CE           ; routine ALPHA
5132:19007+10	1124  D29A0D  	        JP      NC,L0D9A        ; to REPORT-C
5133:				
5134:19017+11	1127  E5      	        PUSH    HL              ;
5135:19028+4	1128  4F      	        LD      C,A             ;
5136:				
5137:19032+11	1129  E7      	        RST     20H             ; NEXT-CHAR
5138:19043+11	112A  E5      	        PUSH    HL              ;
5139:19054+8	112B  CBA9    	        RES     5,C             ;
5140:19062+7	112D  FE10    	        CP      $10             ;
5141:19069+7+5	112F  2817    	        JR      Z,L1148         ; to V-SYN/RUN
5142:				
5143:19076+8	1131  CBF1    	        SET     6,C             ;
5144:19084+7	1133  FE0D    	        CP      $0D             ;
5145:19091+7+5	1135  280C    	        JR      Z,L1143         ; forward to V-STR-VAR
5146:				
5147:19098+8	1137  CBE9    	        SET     5,C             ;
5148:				
5149:				;; V-CHAR
5150:19106+17	1139  CDD214  	L1139:  CALL    L14D2           ; routine ALPHANUM
5151:19123+7+5	113C  300A    	        JR      NC,L1148        ; forward when not to V-RUN/SYN
5152:				
5153:19130+8	113E  CBB1    	        RES     6,C             ;
5154:				
5155:19138+11	1140  E7      	        RST     20H             ; NEXT-CHAR
5156:19149+12	1141  18F6    	        JR      L1139           ; loop back to V-CHAR
5157:				
5158:				; ---
5159:				
5160:				;; V-STR-VAR
5161:19161+11	1143  E7      	L1143:  RST     20H             ; NEXT-CHAR
5162:19172+23	1144  FDCB01B6	        RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
5163:				
5164:				;; V-RUN/SYN
5165:19195+4	1148  41      	L1148:  LD      B,C             ;
5166:19199+17	1149  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
5167:19216+7+5	114C  2008    	        JR      NZ,L1156        ; forward to V-RUN
5168:				
5169:19223+4	114E  79      	        LD      A,C             ;
5170:19227+7	114F  E6E0    	        AND     $E0             ;
5171:19234+8	1151  CBFF    	        SET     7,A             ;
5172:19242+4	1153  4F      	        LD      C,A             ;
5173:19246+12	1154  1834    	        JR      L118A           ; forward to V-SYNTAX
5174:				
5175:				; ---
5176:				
5177:				;; V-RUN
5178:19258+16	1156  2A1040  	L1156:  LD      HL,($4010)      ; sv VARS
5179:				
5180:				;; V-EACH
5181:19274+7	1159  7E      	L1159:  LD      A,(HL)          ;
5182:19281+7	115A  E67F    	        AND     $7F             ;
5183:19288+7+5	115C  282A    	        JR      Z,L1188         ; to V-80-BYTE
5184:				
5185:19295+4	115E  B9      	        CP      C               ;
5186:19299+7+5	115F  201F    	        JR      NZ,L1180        ; to V-NEXT
5187:				
5188:19306+4	1161  17      	        RLA                     ;
5189:19310+4	1162  87      	        ADD     A,A             ;
5190:19314+10	1163  F29511  	        JP      P,L1195         ; to V-FOUND-2
5191:				
5192:19324+7+5	1166  382D    	        JR      C,L1195         ; to V-FOUND-2
5193:				
5194:19331+10	1168  D1      	        POP     DE              ;
5195:19341+11	1169  D5      	        PUSH    DE              ;
5196:19352+11	116A  E5      	        PUSH    HL              ;
5197:				
5198:				;; V-MATCHES
5199:19363+6	116B  23      	L116B:  INC     HL              ;
5200:				
5201:				;; V-SPACES
5202:19369+7	116C  1A      	L116C:  LD      A,(DE)          ;
5203:19376+6	116D  13      	        INC     DE              ;
5204:19382+4	116E  A7      	        AND     A               ;
5205:19386+7+5	116F  28FB    	        JR      Z,L116C         ; back to V-SPACES
5206:				
5207:19393+7	1171  BE      	        CP      (HL)            ;
5208:19400+7+5	1172  28F7    	        JR      Z,L116B         ; back to V-MATCHES
5209:				
5210:19407+7	1174  F680    	        OR      $80             ;
5211:19414+7	1176  BE      	        CP      (HL)            ;
5212:19421+7+5	1177  2006    	        JR       NZ,L117F       ; forward to V-GET-PTR
5213:				
5214:19428+7	1179  1A      	        LD      A,(DE)          ;
5215:19435+17	117A  CDD214  	        CALL    L14D2           ; routine ALPHANUM
5216:19452+7+5	117D  3015    	        JR      NC,L1194        ; forward to V-FOUND-1
5217:				
5218:				;; V-GET-PTR
5219:19459+10	117F  E1      	L117F:  POP     HL              ;
5220:				
5221:				;; V-NEXT
5222:19469+11	1180  C5      	L1180:  PUSH    BC              ;
5223:19480+17	1181  CDF209  	        CALL    L09F2           ; routine NEXT-ONE
5224:19497+4	1184  EB      	        EX      DE,HL           ;
5225:19501+10	1185  C1      	        POP     BC              ;
5226:19511+12	1186  18D1    	        JR      L1159           ; back to V-EACH
5227:				
5228:				; ---
5229:				
5230:				;; V-80-BYTE
5231:19523+8	1188  CBF8    	L1188:  SET     7,B             ;
5232:				
5233:				;; V-SYNTAX
5234:19531+10	118A  D1      	L118A:  POP     DE              ;
5235:				
5236:19541+11	118B  DF      	        RST     18H             ; GET-CHAR
5237:19552+7	118C  FE10    	        CP      $10             ;
5238:19559+7+5	118E  2809    	        JR      Z,L1199         ; forward to V-PASS
5239:				
5240:19566+8	1190  CBE8    	        SET     5,B             ;
5241:19574+12	1192  180D    	        JR      L11A1           ; forward to V-END
5242:				
5243:				; ---
5244:				
5245:				;; V-FOUND-1
5246:19586+10	1194  D1      	L1194:  POP     DE              ;
5247:				
5248:				;; V-FOUND-2
5249:19596+10	1195  D1      	L1195:  POP     DE              ;
5250:19606+10	1196  D1      	        POP     DE              ;
5251:19616+11	1197  E5      	        PUSH    HL              ;
5252:				
5253:19627+11	1198  DF      	        RST     18H             ; GET-CHAR
5254:				
5255:				;; V-PASS
5256:19638+17	1199  CDD214  	L1199:  CALL    L14D2           ; routine ALPHANUM
5257:19655+7+5	119C  3003    	        JR      NC,L11A1        ; forward if not alphanumeric to V-END
5258:				
5259:				
5260:19662+11	119E  E7      	        RST     20H             ; NEXT-CHAR
5261:19673+12	119F  18F8    	        JR      L1199           ; back to V-PASS
5262:				
5263:				; ---
5264:				
5265:				;; V-END
5266:19685+10	11A1  E1      	L11A1:  POP     HL              ;
5267:19695+8	11A2  CB10    	        RL      B               ;
5268:19703+8	11A4  CB70    	        BIT     6,B             ;
5269:19711+10	11A6  C9      	        RET                     ;
5270:				
5271:				; ------------------------
5272:				; THE 'STK-VAR' SUBROUTINE
5273:				; ------------------------
5274:				;
5275:				;
5276:				
5277:				;; STK-VAR
5278:19721+4	11A7  AF      	L11A7:  XOR     A               ;
5279:19725+4	11A8  47      	        LD      B,A             ;
5280:19729+8	11A9  CB79    	        BIT     7,C             ;
5281:19737+7+5	11AB  204B    	        JR      NZ,L11F8        ; forward to SV-COUNT
5282:				
5283:19744+12	11AD  CB7E    	        BIT     7,(HL)          ;
5284:19756+7+5	11AF  200E    	        JR      NZ,L11BF        ; forward to SV-ARRAYS
5285:				
5286:19763+4	11B1  3C      	        INC     A               ;
5287:				
5288:				;; SV-SIMPLE$
5289:19767+6	11B2  23      	L11B2:  INC     HL              ;
5290:19773+7	11B3  4E      	        LD      C,(HL)          ;
5291:19780+6	11B4  23      	        INC     HL              ;
5292:19786+7	11B5  46      	        LD      B,(HL)          ;
5293:19793+6	11B6  23      	        INC     HL              ;
5294:19799+4	11B7  EB      	        EX      DE,HL           ;
5295:19803+17	11B8  CDC312  	        CALL    L12C3           ; routine STK-STO-$
5296:				
5297:19820+11	11BB  DF      	        RST     18H             ; GET-CHAR
5298:19831+10	11BC  C35A12  	        JP      L125A           ; jump forward to SV-SLICE?
5299:				
5300:				; ---
5301:				
5302:				;; SV-ARRAYS
5303:19841+6	11BF  23      	L11BF:  INC     HL              ;
5304:19847+6	11C0  23      	        INC     HL              ;
5305:19853+6	11C1  23      	        INC     HL              ;
5306:19859+7	11C2  46      	        LD      B,(HL)          ;
5307:19866+8	11C3  CB71    	        BIT     6,C             ;
5308:19874+7+5	11C5  280A    	        JR      Z,L11D1         ; forward to SV-PTR
5309:				
5310:19881+4	11C7  05      	        DEC     B               ;
5311:19885+7+5	11C8  28E8    	        JR      Z,L11B2         ; forward to SV-SIMPLE$
5312:				
5313:19892+4	11CA  EB      	        EX      DE,HL           ;
5314:				
5315:19896+11	11CB  DF      	        RST     18H             ; GET-CHAR
5316:19907+7	11CC  FE10    	        CP      $10             ;
5317:19914+7+5	11CE  2061    	        JR      NZ,L1231        ; forward to REPORT-3
5318:				
5319:19921+4	11D0  EB      	        EX      DE,HL           ;
5320:				
5321:				;; SV-PTR
5322:19925+4	11D1  EB      	L11D1:  EX      DE,HL           ;
5323:19929+12	11D2  1824    	        JR      L11F8           ; forward to SV-COUNT
5324:				
5325:				; ---
5326:				
5327:				;; SV-COMMA
5328:19941+11	11D4  E5      	L11D4:  PUSH    HL              ;
5329:				
5330:19952+11	11D5  DF      	        RST     18H             ; GET-CHAR
5331:19963+10	11D6  E1      	        POP     HL              ;
5332:19973+7	11D7  FE1A    	        CP      $1A             ;
5333:19980+7+5	11D9  2820    	        JR      Z,L11FB         ; forward to SV-LOOP
5334:				
5335:19987+8	11DB  CB79    	        BIT     7,C             ;
5336:19995+7+5	11DD  2852    	        JR      Z,L1231         ; forward to REPORT-3
5337:				
5338:20002+8	11DF  CB71    	        BIT     6,C             ;
5339:20010+7+5	11E1  2006    	        JR      NZ,L11E9        ; forward to SV-CLOSE
5340:				
5341:20017+7	11E3  FE11    	        CP      $11             ;
5342:20024+7+5	11E5  203C    	        JR      NZ,L1223        ; forward to SV-RPT-C
5343:				
5344:				
5345:20031+11	11E7  E7      	        RST     20H             ; NEXT-CHAR
5346:20042+10	11E8  C9      	        RET                     ;
5347:				
5348:				; ---
5349:				
5350:				;; SV-CLOSE
5351:20052+7	11E9  FE11    	L11E9:  CP      $11             ;
5352:20059+7+5	11EB  286C    	        JR      Z,L1259         ; forward to SV-DIM
5353:				
5354:20066+7	11ED  FEDF    	        CP      $DF             ;
5355:20073+7+5	11EF  2032    	        JR      NZ,L1223        ; forward to SV-RPT-C
5356:				
5357:				
5358:				;; SV-CH-ADD
5359:20080+11	11F1  DF      	L11F1:  RST     18H             ; GET-CHAR
5360:20091+6	11F2  2B      	        DEC     HL              ;
5361:20097+16	11F3  221640  	        LD      ($4016),HL      ; sv CH_ADD
5362:20113+12	11F6  185E    	        JR      L1256           ; forward to SV-SLICE
5363:				
5364:				; ---
5365:				
5366:				;; SV-COUNT
5367:20125+10	11F8  210000  	L11F8:  LD      HL,$0000        ;
5368:				
5369:				;; SV-LOOP
5370:20135+11	11FB  E5      	L11FB:  PUSH    HL              ;
5371:				
5372:20146+11	11FC  E7      	        RST     20H             ; NEXT-CHAR
5373:20157+10	11FD  E1      	        POP     HL              ;
5374:20167+4	11FE  79      	        LD      A,C             ;
5375:20171+7	11FF  FEC0    	        CP      $C0             ;
5376:20178+7+5	1201  2009    	        JR      NZ,L120C        ; forward to SV-MULT
5377:				
5378:				
5379:20185+11	1203  DF      	        RST     18H             ; GET-CHAR
5380:20196+7	1204  FE11    	        CP      $11             ;
5381:20203+7+5	1206  2851    	        JR      Z,L1259         ; forward to SV-DIM
5382:				
5383:20210+7	1208  FEDF    	        CP      $DF             ;
5384:20217+7+5	120A  28E5    	        JR      Z,L11F1         ; back to SV-CH-ADD
5385:				
5386:				;; SV-MULT
5387:20224+11	120C  C5      	L120C:  PUSH    BC              ;
5388:20235+11	120D  E5      	        PUSH    HL              ;
5389:20246+17	120E  CDFF12  	        CALL    L12FF           ; routine DE,(DE+1)
5390:20263+19	1211  E3      	        EX      (SP),HL         ;
5391:20282+4	1212  EB      	        EX      DE,HL           ;
5392:20286+17	1213  CDDD12  	        CALL    L12DD           ; routine INT-EXP1
5393:20303+7+5	1216  3819    	        JR      C,L1231         ; forward to REPORT-3
5394:				
5395:20310+6	1218  0B      	        DEC     BC              ;
5396:20316+17	1219  CD0513  	        CALL    L1305           ; routine GET-HL*DE
5397:20333+11	121C  09      	        ADD     HL,BC           ;
5398:20344+10	121D  D1      	        POP     DE              ;
5399:20354+10	121E  C1      	        POP     BC              ;
5400:20364+8+5	121F  10B3    	        DJNZ    L11D4           ; loop back to SV-COMMA
5401:				
5402:20372+8	1221  CB79    	        BIT     7,C             ;
5403:				
5404:				;; SV-RPT-C
5405:20380+7+5	1223  2066    	L1223:  JR      NZ,L128B        ; relative jump to SL-RPT-C
5406:				
5407:20387+11	1225  E5      	        PUSH    HL              ;
5408:20398+8	1226  CB71    	        BIT     6,C             ;
5409:20406+7+5	1228  2013    	        JR      NZ,L123D        ; forward to SV-ELEM$
5410:				
5411:20413+4	122A  42      	        LD      B,D             ;
5412:20417+4	122B  4B      	        LD      C,E             ;
5413:				
5414:20421+11	122C  DF      	        RST     18H             ; GET-CHAR
5415:20432+7	122D  FE11    	        CP      $11             ; is character a ')' ?
5416:20439+7+5	122F  2802    	        JR      Z,L1233         ; skip forward to SV-NUMBER
5417:				
5418:				
5419:				;; REPORT-3
5420:20446+11	1231  CF      	L1231:  RST     08H             ; ERROR-1
5421:     -	1232  02      	        DEFB    $02             ; Error Report: Subscript wrong
5422:				
5423:				
5424:				;; SV-NUMBER
5425:20457+11	1233  E7      	L1233:  RST     20H             ; NEXT-CHAR
5426:20468+10	1234  E1      	        POP     HL              ;
5427:20478+10	1235  110500  	        LD      DE,$0005        ;
5428:20488+17	1238  CD0513  	        CALL    L1305           ; routine GET-HL*DE
5429:20505+11	123B  09      	        ADD     HL,BC           ;
5430:20516+10	123C  C9      	        RET                     ; return                            >>
5431:				
5432:				; ---
5433:				
5434:				;; SV-ELEM$
5435:20526+17	123D  CDFF12  	L123D:  CALL    L12FF           ; routine DE,(DE+1)
5436:20543+19	1240  E3      	        EX      (SP),HL         ;
5437:20562+17	1241  CD0513  	        CALL    L1305           ; routine GET-HL*DE
5438:20579+10	1244  C1      	        POP     BC              ;
5439:20589+11	1245  09      	        ADD     HL,BC           ;
5440:20600+6	1246  23      	        INC     HL              ;
5441:20606+4	1247  42      	        LD      B,D             ;
5442:20610+4	1248  4B      	        LD      C,E             ;
5443:20614+4	1249  EB      	        EX      DE,HL           ;
5444:20618+17	124A  CDC212  	        CALL    L12C2           ; routine STK-ST-0
5445:				
5446:20635+11	124D  DF      	        RST     18H             ; GET-CHAR
5447:20646+7	124E  FE11    	        CP      $11             ; is it ')' ?
5448:20653+7+5	1250  2807    	        JR      Z,L1259         ; forward if so to SV-DIM
5449:				
5450:20660+7	1252  FE1A    	        CP      $1A             ; is it ',' ?
5451:20667+7+5	1254  20DB    	        JR      NZ,L1231        ; back if not to REPORT-3
5452:				
5453:				;; SV-SLICE
5454:20674+17	1256  CD6312  	L1256:  CALL    L1263           ; routine SLICING
5455:				
5456:				;; SV-DIM
5457:20691+11	1259  E7      	L1259:  RST     20H             ; NEXT-CHAR
5458:				
5459:				;; SV-SLICE?
5460:20702+7	125A  FE10    	L125A:  CP      $10             ;
5461:20709+7+5	125C  28F8    	        JR      Z,L1256         ; back to SV-SLICE
5462:				
5463:20716+23	125E  FDCB01B6	        RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
5464:20739+10	1262  C9      	        RET                     ; return.
5465:				
5466:				; ------------------------
5467:				; THE 'SLICING' SUBROUTINE
5468:				; ------------------------
5469:				;
5470:				;
5471:				
5472:				;; SLICING
5473:20749+17	1263  CDA60D  	L1263:  CALL    L0DA6           ; routine SYNTAX-Z
5474:20766+10+7	1266  C4F813  	        CALL    NZ,L13F8        ; routine STK-FETCH
5475:				
5476:20776+11	1269  E7      	        RST     20H             ; NEXT-CHAR
5477:20787+7	126A  FE11    	        CP      $11             ; is it ')' ?
5478:20794+7+5	126C  2850    	        JR      Z,L12BE         ; forward if so to SL-STORE
5479:				
5480:20801+11	126E  D5      	        PUSH    DE              ;
5481:20812+4	126F  AF      	        XOR     A               ;
5482:20816+11	1270  F5      	        PUSH    AF              ;
5483:20827+11	1271  C5      	        PUSH    BC              ;
5484:20838+10	1272  110100  	        LD      DE,$0001        ;
5485:				
5486:20848+11	1275  DF      	        RST     18H             ; GET-CHAR
5487:20859+10	1276  E1      	        POP     HL              ;
5488:20869+7	1277  FEDF    	        CP      $DF             ; is it 'TO' ?
5489:20876+7+5	1279  2817    	        JR      Z,L1292         ; forward if so to SL-SECOND
5490:				
5491:20883+10	127B  F1      	        POP     AF              ;
5492:20893+17	127C  CDDE12  	        CALL    L12DE           ; routine INT-EXP2
5493:20910+11	127F  F5      	        PUSH    AF              ;
5494:20921+4	1280  50      	        LD      D,B             ;
5495:20925+4	1281  59      	        LD      E,C             ;
5496:20929+11	1282  E5      	        PUSH    HL              ;
5497:				
5498:20940+11	1283  DF      	        RST     18H             ; GET-CHAR
5499:20951+10	1284  E1      	        POP     HL              ;
5500:20961+7	1285  FEDF    	        CP      $DF             ; is it 'TO' ?
5501:20968+7+5	1287  2809    	        JR      Z,L1292         ; forward if so to SL-SECOND
5502:				
5503:20975+7	1289  FE11    	        CP      $11             ;
5504:				
5505:				;; SL-RPT-C
5506:20982+10	128B  C29A0D  	L128B:  JP      NZ,L0D9A        ; to REPORT-C
5507:				
5508:20992+4	128E  62      	        LD      H,D             ;
5509:20996+4	128F  6B      	        LD      L,E             ;
5510:21000+12	1290  1813    	        JR      L12A5           ; forward to SL-DEFINE
5511:				
5512:				; ---
5513:				
5514:				;; SL-SECOND
5515:21012+11	1292  E5      	L1292:  PUSH    HL              ;
5516:				
5517:21023+11	1293  E7      	        RST     20H             ; NEXT-CHAR
5518:21034+10	1294  E1      	        POP     HL              ;
5519:21044+7	1295  FE11    	        CP      $11             ; is it ')' ?
5520:21051+7+5	1297  280C    	        JR      Z,L12A5         ; forward if so to SL-DEFINE
5521:				
5522:21058+10	1299  F1      	        POP     AF              ;
5523:21068+17	129A  CDDE12  	        CALL    L12DE           ; routine INT-EXP2
5524:21085+11	129D  F5      	        PUSH    AF              ;
5525:				
5526:21096+11	129E  DF      	        RST     18H             ; GET-CHAR
5527:21107+4	129F  60      	        LD      H,B             ;
5528:21111+4	12A0  69      	        LD      L,C             ;
5529:21115+7	12A1  FE11    	        CP      $11             ; is it ')' ?
5530:21122+7+5	12A3  20E6    	        JR      NZ,L128B        ; back if not to SL-RPT-C
5531:				
5532:				;; SL-DEFINE
5533:21129+10	12A5  F1      	L12A5:  POP     AF              ;
5534:21139+19	12A6  E3      	        EX      (SP),HL         ;
5535:21158+11	12A7  19      	        ADD     HL,DE           ;
5536:21169+6	12A8  2B      	        DEC     HL              ;
5537:21175+19	12A9  E3      	        EX      (SP),HL         ;
5538:21194+4	12AA  A7      	        AND     A               ;
5539:21198+15	12AB  ED52    	        SBC     HL,DE           ;
5540:21213+10	12AD  010000  	        LD      BC,$0000        ;
5541:21223+7+5	12B0  3807    	        JR      C,L12B9         ; forward to SL-OVER
5542:				
5543:21230+6	12B2  23      	        INC     HL              ;
5544:21236+4	12B3  A7      	        AND     A               ;
5545:21240+10	12B4  FA3112  	        JP      M,L1231         ; jump back to REPORT-3
5546:				
5547:21250+4	12B7  44      	        LD      B,H             ;
5548:21254+4	12B8  4D      	        LD      C,L             ;
5549:				
5550:				;; SL-OVER
5551:21258+10	12B9  D1      	L12B9:  POP     DE              ;
5552:21268+23	12BA  FDCB01B6	        RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
5553:				
5554:				;; SL-STORE
5555:21291+17	12BE  CDA60D  	L12BE:  CALL    L0DA6           ; routine SYNTAX-Z
5556:21308+5+6	12C1  C8      	        RET     Z               ; return if checking syntax.
5557:				
5558:				; --------------------------
5559:				; THE 'STK-STORE' SUBROUTINE
5560:				; --------------------------
5561:				;
5562:				;
5563:				
5564:				;; STK-ST-0
5565:21313+4	12C2  AF      	L12C2:  XOR     A               ;
5566:				
5567:				;; STK-STO-$
5568:21317+11	12C3  C5      	L12C3:  PUSH    BC              ;
5569:21328+17	12C4  CDEB19  	        CALL    L19EB           ; routine TEST-5-SP
5570:21345+10	12C7  C1      	        POP     BC              ;
5571:21355+16	12C8  2A1C40  	        LD      HL,($401C)      ; sv STKEND
5572:21371+7	12CB  77      	        LD      (HL),A          ;
5573:21378+6	12CC  23      	        INC     HL              ;
5574:21384+7	12CD  73      	        LD      (HL),E          ;
5575:21391+6	12CE  23      	        INC     HL              ;
5576:21397+7	12CF  72      	        LD      (HL),D          ;
5577:21404+6	12D0  23      	        INC     HL              ;
5578:21410+7	12D1  71      	        LD      (HL),C          ;
5579:21417+6	12D2  23      	        INC     HL              ;
5580:21423+7	12D3  70      	        LD      (HL),B          ;
5581:21430+6	12D4  23      	        INC     HL              ;
5582:21436+16	12D5  221C40  	        LD      ($401C),HL      ; sv STKEND
5583:21452+23	12D8  FDCB01B6	        RES     6,(IY+$01)      ; update FLAGS - signal string result
5584:21475+10	12DC  C9      	        RET                     ; return.
5585:				
5586:				; -------------------------
5587:				; THE 'INT EXP' SUBROUTINES
5588:				; -------------------------
5589:				;
5590:				;
5591:				
5592:				;; INT-EXP1
5593:21485+4	12DD  AF      	L12DD:  XOR     A               ;
5594:				
5595:				;; INT-EXP2
5596:21489+11	12DE  D5      	L12DE:  PUSH    DE              ;
5597:21500+11	12DF  E5      	        PUSH    HL              ;
5598:21511+11	12E0  F5      	        PUSH    AF              ;
5599:21522+17	12E1  CD920D  	        CALL    L0D92           ; routine CLASS-6
5600:21539+10	12E4  F1      	        POP     AF              ;
5601:21549+17	12E5  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
5602:21566+7+5	12E8  2812    	        JR      Z,L12FC         ; forward if checking syntax to I-RESTORE
5603:				
5604:21573+11	12EA  F5      	        PUSH    AF              ;
5605:21584+17	12EB  CDA70E  	        CALL    L0EA7           ; routine FIND-INT
5606:21601+10	12EE  D1      	        POP     DE              ;
5607:21611+4	12EF  78      	        LD      A,B             ;
5608:21615+4	12F0  B1      	        OR      C               ;
5609:21619+4	12F1  37      	        SCF                     ; Set Carry Flag
5610:21623+7+5	12F2  2805    	        JR      Z,L12F9         ; forward to I-CARRY
5611:				
5612:21630+10	12F4  E1      	        POP     HL              ;
5613:21640+11	12F5  E5      	        PUSH    HL              ;
5614:21651+4	12F6  A7      	        AND     A               ;
5615:21655+15	12F7  ED42    	        SBC     HL,BC           ;
5616:				
5617:				;; I-CARRY
5618:21670+4	12F9  7A      	L12F9:  LD      A,D             ;
5619:21674+7	12FA  DE00    	        SBC     A,$00           ;
5620:				
5621:				;; I-RESTORE
5622:21681+10	12FC  E1      	L12FC:  POP     HL              ;
5623:21691+10	12FD  D1      	        POP     DE              ;
5624:21701+10	12FE  C9      	        RET                     ;
5625:				
5626:				; --------------------------
5627:				; THE 'DE,(DE+1)' SUBROUTINE
5628:				; --------------------------
5629:				; INDEX and LOAD Z80 subroutine. 
5630:				; This emulates the 6800 processor instruction LDX 1,X which loads a two-byte
5631:				; value from memory into the register indexing it. Often these are hardly worth
5632:				; the bother of writing as subroutines and this one doesn't save any time or 
5633:				; memory. The timing and space overheads have to be offset against the ease of
5634:				; writing and the greater program readability from using such toolkit routines.
5635:				
5636:				;; DE,(DE+1)
5637:21711+4	12FF  EB      	L12FF:  EX      DE,HL           ; move index address into HL.
5638:21715+6	1300  23      	        INC     HL              ; increment to address word.
5639:21721+7	1301  5E      	        LD      E,(HL)          ; pick up word low-order byte.
5640:21728+6	1302  23      	        INC     HL              ; index high-order byte and 
5641:21734+7	1303  56      	        LD      D,(HL)          ; pick it up.
5642:21741+10	1304  C9      	        RET                     ; return with DE = word.
5643:				
5644:				; --------------------------
5645:				; THE 'GET-HL*DE' SUBROUTINE
5646:				; --------------------------
5647:				;
5648:				
5649:				;; GET-HL*DE
5650:21751+17	1305  CDA60D  	L1305:  CALL    L0DA6           ; routine SYNTAX-Z
5651:21768+5+6	1308  C8      	        RET     Z               ;
5652:				
5653:21773+11	1309  C5      	        PUSH    BC              ;
5654:21784+7	130A  0610    	        LD      B,$10           ;
5655:21791+4	130C  7C      	        LD      A,H             ;
5656:21795+4	130D  4D      	        LD      C,L             ;
5657:21799+10	130E  210000  	        LD      HL,$0000        ;
5658:				
5659:				;; HL-LOOP
5660:21809+11	1311  29      	L1311:  ADD     HL,HL           ;
5661:21820+7+5	1312  3806    	        JR      C,L131A         ; forward with carry to HL-END
5662:				
5663:21827+8	1314  CB11    	        RL      C               ;
5664:21835+4	1316  17      	        RLA                     ;
5665:21839+7+5	1317  3004    	        JR      NC,L131D        ; forward with no carry to HL-AGAIN
5666:				
5667:21846+11	1319  19      	        ADD     HL,DE           ;
5668:				
5669:				;; HL-END
5670:21857+10	131A  DAD30E  	L131A:  JP      C,L0ED3         ; to REPORT-4
5671:				
5672:				;; HL-AGAIN
5673:21867+8+5	131D  10F2    	L131D:  DJNZ    L1311           ; loop back to HL-LOOP
5674:				
5675:21875+10	131F  C1      	        POP     BC              ;
5676:21885+10	1320  C9      	        RET                     ; return.
5677:				
5678:				; --------------------
5679:				; THE 'LET' SUBROUTINE
5680:				; --------------------
5681:				;
5682:				;
5683:				
5684:				;; LET
5685:21895+16	1321  2A1240  	L1321:  LD      HL,($4012)      ; sv DEST-lo
5686:21911+20	1324  FDCB2D4E	        BIT     1,(IY+$2D)      ; sv FLAGX
5687:21931+7+5	1328  2844    	        JR      Z,L136E         ; forward to L-EXISTS
5688:				
5689:21938+10	132A  010500  	        LD      BC,$0005        ;
5690:				
5691:				;; L-EACH-CH
5692:21948+6	132D  03      	L132D:  INC     BC              ;
5693:				
5694:				; check
5695:				
5696:				;; L-NO-SP
5697:21954+6	132E  23      	L132E:  INC     HL              ;
5698:21960+7	132F  7E      	        LD      A,(HL)          ;
5699:21967+4	1330  A7      	        AND     A               ;
5700:21971+7+5	1331  28FB    	        JR      Z,L132E         ; back to L-NO-SP
5701:				
5702:21978+17	1333  CDD214  	        CALL    L14D2           ; routine ALPHANUM
5703:21995+7+5	1336  38F5    	        JR      C,L132D         ; back to L-EACH-CH
5704:				
5705:22002+7	1338  FE0D    	        CP      $0D             ; is it '$' ?
5706:22009+10	133A  CAC813  	        JP      Z,L13C8         ; forward if so to L-NEW$
5707:				
5708:				
5709:22019+11	133D  F7      	        RST     30H             ; BC-SPACES
5710:22030+11	133E  D5      	        PUSH    DE              ;
5711:22041+16	133F  2A1240  	        LD      HL,($4012)      ; sv DEST
5712:22057+6	1342  1B      	        DEC     DE              ;
5713:22063+4	1343  79      	        LD      A,C             ;
5714:22067+7	1344  D606    	        SUB     $06             ;
5715:22074+4	1346  47      	        LD      B,A             ;
5716:22078+7	1347  3E40    	        LD      A,$40           ;
5717:22085+7+5	1349  280E    	        JR      Z,L1359         ; forward to L-SINGLE
5718:				
5719:				;; L-CHAR
5720:22092+6	134B  23      	L134B:  INC     HL              ;
5721:22098+7	134C  7E      	        LD      A,(HL)          ;
5722:22105+4	134D  A7      	        AND     A               ; is it a space ?
5723:22109+7+5	134E  28FB    	        JR      Z,L134B         ; back to L-CHAR
5724:				
5725:22116+6	1350  13      	        INC     DE              ;
5726:22122+7	1351  12      	        LD      (DE),A          ;
5727:22129+8+5	1352  10F7    	        DJNZ    L134B           ; loop back to L-CHAR
5728:				
5729:22137+7	1354  F680    	        OR      $80             ;
5730:22144+7	1356  12      	        LD      (DE),A          ;
5731:22151+7	1357  3E80    	        LD      A,$80           ;
5732:				
5733:				;; L-SINGLE
5734:22158+16	1359  2A1240  	L1359:  LD      HL,($4012)      ; sv DEST-lo
5735:22174+7	135C  AE      	        XOR     (HL)            ;
5736:22181+10	135D  E1      	        POP     HL              ;
5737:22191+17	135E  CDE713  	        CALL    L13E7           ; routine L-FIRST
5738:				
5739:				;; L-NUMERIC
5740:22208+11	1361  E5      	L1361:  PUSH    HL              ;
5741:				
5742:22219+11	1362  EF      	        RST     28H             ;; FP-CALC
5743:     -	1363  02      	        DEFB    $02             ;;delete
5744:     -	1364  34      	        DEFB    $34             ;;end-calc
5745:				
5746:22230+10	1365  E1      	        POP     HL              ;
5747:22240+10	1366  010500  	        LD      BC,$0005        ;
5748:22250+4	1369  A7      	        AND     A               ;
5749:22254+15	136A  ED42    	        SBC     HL,BC           ;
5750:22269+12	136C  1840    	        JR      L13AE           ; forward to L-ENTER
5751:				
5752:				; ---
5753:				
5754:				;; L-EXISTS
5755:22281+20	136E  FDCB0176	L136E:  BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
5756:22301+7+5	1372  2806    	        JR      Z,L137A         ; forward to L-DELETE$
5757:				
5758:22308+10	1374  110600  	        LD      DE,$0006        ;
5759:22318+11	1377  19      	        ADD     HL,DE           ;
5760:22329+12	1378  18E7    	        JR      L1361           ; back to L-NUMERIC
5761:				
5762:				; ---
5763:				
5764:				;; L-DELETE$
5765:22341+16	137A  2A1240  	L137A:  LD      HL,($4012)      ; sv DEST-lo
5766:22357+20	137D  ED4B2E40	        LD      BC,($402E)      ; sv STRLEN_lo
5767:22377+20	1381  FDCB2D46	        BIT     0,(IY+$2D)      ; sv FLAGX
5768:22397+7+5	1385  2030    	        JR      NZ,L13B7        ; forward to L-ADD$
5769:				
5770:22404+4	1387  78      	        LD      A,B             ;
5771:22408+4	1388  B1      	        OR      C               ;
5772:22412+5+6	1389  C8      	        RET     Z               ;
5773:				
5774:22417+11	138A  E5      	        PUSH    HL              ;
5775:				
5776:22428+11	138B  F7      	        RST     30H             ; BC-SPACES
5777:22439+11	138C  D5      	        PUSH    DE              ;
5778:22450+11	138D  C5      	        PUSH    BC              ;
5779:22461+4	138E  54      	        LD      D,H             ;
5780:22465+4	138F  5D      	        LD      E,L             ;
5781:22469+6	1390  23      	        INC     HL              ;
5782:22475+10	1391  3600    	        LD      (HL),$00        ;
5783:22485+16+5	1393  EDB8    	        LDDR                    ; Copy Bytes
5784:22501+11	1395  E5      	        PUSH    HL              ;
5785:22512+17	1396  CDF813  	        CALL    L13F8           ; routine STK-FETCH
5786:22529+10	1399  E1      	        POP     HL              ;
5787:22539+19	139A  E3      	        EX      (SP),HL         ;
5788:22558+4	139B  A7      	        AND     A               ;
5789:22562+15	139C  ED42    	        SBC     HL,BC           ;
5790:22577+11	139E  09      	        ADD     HL,BC           ;
5791:22588+7+5	139F  3002    	        JR      NC,L13A3        ; forward to L-LENGTH
5792:				
5793:22595+4	13A1  44      	        LD      B,H             ;
5794:22599+4	13A2  4D      	        LD      C,L             ;
5795:				
5796:				;; L-LENGTH
5797:22603+19	13A3  E3      	L13A3:  EX      (SP),HL         ;
5798:22622+4	13A4  EB      	        EX      DE,HL           ;
5799:22626+4	13A5  78      	        LD      A,B             ;
5800:22630+4	13A6  B1      	        OR      C               ;
5801:22634+7+5	13A7  2802    	        JR      Z,L13AB         ; forward if zero to L-IN-W/S
5802:				
5803:22641+16+5	13A9  EDB0    	        LDIR                    ; Copy Bytes
5804:				
5805:				;; L-IN-W/S
5806:22657+10	13AB  C1      	L13AB:  POP     BC              ;
5807:22667+10	13AC  D1      	        POP     DE              ;
5808:22677+10	13AD  E1      	        POP     HL              ;
5809:				
5810:				; ------------------------
5811:				; THE 'L-ENTER' SUBROUTINE
5812:				; ------------------------
5813:				;
5814:				
5815:				;; L-ENTER
5816:22687+4	13AE  EB      	L13AE:  EX      DE,HL           ;
5817:22691+4	13AF  78      	        LD      A,B             ;
5818:22695+4	13B0  B1      	        OR      C               ;
5819:22699+5+6	13B1  C8      	        RET     Z               ;
5820:				
5821:22704+11	13B2  D5      	        PUSH    DE              ;
5822:22715+16+5	13B3  EDB0    	        LDIR                    ; Copy Bytes
5823:22731+10	13B5  E1      	        POP     HL              ;
5824:22741+10	13B6  C9      	        RET                     ; return.
5825:				
5826:				; ---
5827:				
5828:				;; L-ADD$
5829:22751+6	13B7  2B      	L13B7:  DEC     HL              ;
5830:22757+6	13B8  2B      	        DEC     HL              ;
5831:22763+6	13B9  2B      	        DEC     HL              ;
5832:22769+7	13BA  7E      	        LD      A,(HL)          ;
5833:22776+11	13BB  E5      	        PUSH    HL              ;
5834:22787+11	13BC  C5      	        PUSH    BC              ;
5835:				
5836:22798+17	13BD  CDCE13  	        CALL    L13CE           ; routine L-STRING
5837:				
5838:22815+10	13C0  C1      	        POP     BC              ;
5839:22825+10	13C1  E1      	        POP     HL              ;
5840:22835+6	13C2  03      	        INC     BC              ;
5841:22841+6	13C3  03      	        INC     BC              ;
5842:22847+6	13C4  03      	        INC     BC              ;
5843:22853+10	13C5  C3600A  	        JP      L0A60           ; jump back to exit via RECLAIM-2
5844:				
5845:				; ---
5846:				
5847:				;; L-NEW$
5848:22863+7	13C8  3E60    	L13C8:  LD      A,$60           ; prepare mask 01100000b
5849:22870+16	13CA  2A1240  	        LD      HL,($4012)      ; sv DEST-lo
5850:22886+7	13CD  AE      	        XOR     (HL)            ;
5851:				
5852:				; -------------------------
5853:				; THE 'L-STRING' SUBROUTINE
5854:				; -------------------------
5855:				;
5856:				
5857:				;; L-STRING
5858:22893+11	13CE  F5      	L13CE:  PUSH    AF              ;
5859:22904+17	13CF  CDF813  	        CALL    L13F8           ; routine STK-FETCH
5860:22921+4	13D2  EB      	        EX      DE,HL           ;
5861:22925+11	13D3  09      	        ADD     HL,BC           ;
5862:22936+11	13D4  E5      	        PUSH    HL              ;
5863:22947+6	13D5  03      	        INC     BC              ;
5864:22953+6	13D6  03      	        INC     BC              ;
5865:22959+6	13D7  03      	        INC     BC              ;
5866:				
5867:22965+11	13D8  F7      	        RST     30H             ; BC-SPACES
5868:22976+4	13D9  EB      	        EX      DE,HL           ;
5869:22980+10	13DA  E1      	        POP     HL              ;
5870:22990+6	13DB  0B      	        DEC     BC              ;
5871:22996+6	13DC  0B      	        DEC     BC              ;
5872:23002+11	13DD  C5      	        PUSH    BC              ;
5873:23013+16+5	13DE  EDB8    	        LDDR                    ; Copy Bytes
5874:23029+4	13E0  EB      	        EX      DE,HL           ;
5875:23033+10	13E1  C1      	        POP     BC              ;
5876:23043+6	13E2  0B      	        DEC     BC              ;
5877:23049+7	13E3  70      	        LD      (HL),B          ;
5878:23056+6	13E4  2B      	        DEC     HL              ;
5879:23062+7	13E5  71      	        LD      (HL),C          ;
5880:23069+10	13E6  F1      	        POP     AF              ;
5881:				
5882:				;; L-FIRST
5883:23079+11	13E7  F5      	L13E7:  PUSH    AF              ;
5884:23090+17	13E8  CDC714  	        CALL    L14C7           ; routine REC-V80
5885:23107+10	13EB  F1      	        POP     AF              ;
5886:23117+6	13EC  2B      	        DEC     HL              ;
5887:23123+7	13ED  77      	        LD      (HL),A          ;
5888:23130+16	13EE  2A1A40  	        LD      HL,($401A)      ; sv STKBOT_lo
5889:23146+16	13F1  221440  	        LD      ($4014),HL      ; sv E_LINE_lo
5890:23162+6	13F4  2B      	        DEC     HL              ;
5891:23168+10	13F5  3680    	        LD      (HL),$80        ;
5892:23178+10	13F7  C9      	        RET                     ;
5893:				
5894:				; --------------------------
5895:				; THE 'STK-FETCH' SUBROUTINE
5896:				; --------------------------
5897:				; This routine fetches a five-byte value from the calculator stack
5898:				; reducing the pointer to the end of the stack by five.
5899:				; For a floating-point number the exponent is in A and the mantissa
5900:				; is the thirty-two bits EDCB.
5901:				; For strings, the start of the string is in DE and the length in BC.
5902:				; A is unused.
5903:				; Note that the carry flag is unaffected.
5904:				
5905:				;; STK-FETCH
5906:23188+16	13F8  2A1C40  	L13F8:  LD      HL,($401C)      ; load HL from system variable STKEND
5907:				
5908:23204+6	13FB  2B      	        DEC     HL              ;
5909:23210+7	13FC  46      	        LD      B,(HL)          ;
5910:23217+6	13FD  2B      	        DEC     HL              ;
5911:23223+7	13FE  4E      	        LD      C,(HL)          ;
5912:23230+6	13FF  2B      	        DEC     HL              ;
5913:23236+7	1400  56      	        LD      D,(HL)          ;
5914:23243+6	1401  2B      	        DEC     HL              ;
5915:23249+7	1402  5E      	        LD      E,(HL)          ;
5916:23256+6	1403  2B      	        DEC     HL              ;
5917:23262+7	1404  7E      	        LD      A,(HL)          ;
5918:				
5919:23269+16	1405  221C40  	        LD      ($401C),HL      ; set system variable STKEND to lower value.
5920:23285+10	1408  C9      	        RET                     ; return.
5921:				
5922:				; -------------------------
5923:				; THE 'DIM' COMMAND ROUTINE
5924:				; -------------------------
5925:				; An array is created and initialized to zeros which is also the space
5926:				; character on the ZX81.
5927:				
5928:				;; DIM
5929:23295+17	1409  CD1C11  	L1409:  CALL    L111C           ; routine LOOK-VARS
5930:				
5931:				;; D-RPORT-C
5932:23312+10	140C  C29A0D  	L140C:  JP      NZ,L0D9A        ; to REPORT-C
5933:				
5934:23322+17	140F  CDA60D  	        CALL    L0DA6           ; routine SYNTAX-Z
5935:23339+7+5	1412  2008    	        JR      NZ,L141C        ; forward to D-RUN
5936:				
5937:23346+8	1414  CBB1    	        RES     6,C             ;
5938:23354+17	1416  CDA711  	        CALL    L11A7           ; routine STK-VAR
5939:23371+17	1419  CD1D0D  	        CALL    L0D1D           ; routine CHECK-END
5940:				
5941:				;; D-RUN
5942:23388+7+5	141C  3808    	L141C:  JR      C,L1426         ; forward to D-LETTER
5943:				
5944:23395+11	141E  C5      	        PUSH    BC              ;
5945:23406+17	141F  CDF209  	        CALL    L09F2           ; routine NEXT-ONE
5946:23423+17	1422  CD600A  	        CALL    L0A60           ; routine RECLAIM-2
5947:23440+10	1425  C1      	        POP     BC              ;
5948:				
5949:				;; D-LETTER
5950:23450+8	1426  CBF9    	L1426:  SET     7,C             ;
5951:23458+7	1428  0600    	        LD      B,$00           ;
5952:23465+11	142A  C5      	        PUSH    BC              ;
5953:23476+10	142B  210100  	        LD      HL,$0001        ;
5954:23486+8	142E  CB71    	        BIT     6,C             ;
5955:23494+7+5	1430  2002    	        JR      NZ,L1434        ; forward to D-SIZE
5956:				
5957:23501+7	1432  2E05    	        LD      L,$05           ;
5958:				
5959:				;; D-SIZE
5960:23508+4	1434  EB      	L1434:  EX      DE,HL           ;
5961:				
5962:				;; D-NO-LOOP
5963:23512+11	1435  E7      	L1435:  RST     20H             ; NEXT-CHAR
5964:23523+7	1436  2640    	        LD      H,$40           ;
5965:23530+17	1438  CDDD12  	        CALL    L12DD           ; routine INT-EXP1
5966:23547+10	143B  DA3112  	        JP      C,L1231         ; jump back to REPORT-3
5967:				
5968:23557+10	143E  E1      	        POP     HL              ;
5969:23567+11	143F  C5      	        PUSH    BC              ;
5970:23578+4	1440  24      	        INC     H               ;
5971:23582+11	1441  E5      	        PUSH    HL              ;
5972:23593+4	1442  60      	        LD      H,B             ;
5973:23597+4	1443  69      	        LD      L,C             ;
5974:23601+17	1444  CD0513  	        CALL    L1305           ; routine GET-HL*DE
5975:23618+4	1447  EB      	        EX      DE,HL           ;
5976:				
5977:23622+11	1448  DF      	        RST     18H             ; GET-CHAR
5978:23633+7	1449  FE1A    	        CP      $1A             ;
5979:23640+7+5	144B  28E8    	        JR      Z,L1435         ; back to D-NO-LOOP
5980:				
5981:23647+7	144D  FE11    	        CP      $11             ; is it ')' ?
5982:23654+7+5	144F  20BB    	        JR      NZ,L140C        ; back if not to D-RPORT-C
5983:				
5984:				
5985:23661+11	1451  E7      	        RST     20H             ; NEXT-CHAR
5986:23672+10	1452  C1      	        POP     BC              ;
5987:23682+4	1453  79      	        LD      A,C             ;
5988:23686+4	1454  68      	        LD      L,B             ;
5989:23690+7	1455  2600    	        LD      H,$00           ;
5990:23697+6	1457  23      	        INC     HL              ;
5991:23703+6	1458  23      	        INC     HL              ;
5992:23709+11	1459  29      	        ADD     HL,HL           ;
5993:23720+11	145A  19      	        ADD     HL,DE           ;
5994:23731+10	145B  DAD30E  	        JP      C,L0ED3         ; jump to REPORT-4
5995:				
5996:23741+11	145E  D5      	        PUSH    DE              ;
5997:23752+11	145F  C5      	        PUSH    BC              ;
5998:23763+11	1460  E5      	        PUSH    HL              ;
5999:23774+4	1461  44      	        LD      B,H             ;
6000:23778+4	1462  4D      	        LD      C,L             ;
6001:23782+16	1463  2A1440  	        LD      HL,($4014)      ; sv E_LINE_lo
6002:23798+6	1466  2B      	        DEC     HL              ;
6003:23804+17	1467  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
6004:23821+6	146A  23      	        INC     HL              ;
6005:23827+7	146B  77      	        LD       (HL),A         ;
6006:23834+10	146C  C1      	        POP     BC              ;
6007:23844+6	146D  0B      	        DEC     BC              ;
6008:23850+6	146E  0B      	        DEC     BC              ;
6009:23856+6	146F  0B      	        DEC     BC              ;
6010:23862+6	1470  23      	        INC     HL              ;
6011:23868+7	1471  71      	        LD      (HL),C          ;
6012:23875+6	1472  23      	        INC     HL              ;
6013:23881+7	1473  70      	        LD      (HL),B          ;
6014:23888+10	1474  F1      	        POP     AF              ;
6015:23898+6	1475  23      	        INC     HL              ;
6016:23904+7	1476  77      	        LD      (HL),A          ;
6017:23911+4	1477  62      	        LD      H,D             ;
6018:23915+4	1478  6B      	        LD      L,E             ;
6019:23919+6	1479  1B      	        DEC     DE              ;
6020:23925+10	147A  3600    	        LD      (HL),$00        ;
6021:23935+10	147C  C1      	        POP     BC              ;
6022:23945+16+5	147D  EDB8    	        LDDR                    ; Copy Bytes
6023:				
6024:				;; DIM-SIZES
6025:23961+10	147F  C1      	L147F:  POP     BC              ;
6026:23971+7	1480  70      	        LD      (HL),B          ;
6027:23978+6	1481  2B      	        DEC     HL              ;
6028:23984+7	1482  71      	        LD      (HL),C          ;
6029:23991+6	1483  2B      	        DEC     HL              ;
6030:23997+4	1484  3D      	        DEC     A               ;
6031:24001+7+5	1485  20F8    	        JR      NZ,L147F        ; back to DIM-SIZES
6032:				
6033:24008+10	1487  C9      	        RET                     ; return.
6034:				
6035:				; ---------------------
6036:				; THE 'RESERVE' ROUTINE
6037:				; ---------------------
6038:				;
6039:				;
6040:				
6041:				;; RESERVE
6042:24018+16	1488  2A1A40  	L1488:  LD      HL,($401A)      ; address STKBOT
6043:24034+6	148B  2B      	        DEC     HL              ; now last byte of workspace
6044:24040+17	148C  CD9E09  	        CALL    L099E           ; routine MAKE-ROOM
6045:24057+6	148F  23      	        INC     HL              ;
6046:24063+6	1490  23      	        INC     HL              ;
6047:24069+10	1491  C1      	        POP     BC              ;
6048:24079+20	1492  ED431440	        LD      ($4014),BC      ; sv E_LINE_lo
6049:24099+10	1496  C1      	        POP     BC              ;
6050:24109+4	1497  EB      	        EX      DE,HL           ;
6051:24113+6	1498  23      	        INC     HL              ;
6052:24119+10	1499  C9      	        RET                     ;
6053:				
6054:				; ---------------------------
6055:				; THE 'CLEAR' COMMAND ROUTINE
6056:				; ---------------------------
6057:				;
6058:				;
6059:				
6060:				;; CLEAR
6061:24129+16	149A  2A1040  	L149A:  LD      HL,($4010)      ; sv VARS_lo
6062:24145+10	149D  3680    	        LD      (HL),$80        ;
6063:24155+6	149F  23      	        INC     HL              ;
6064:24161+16	14A0  221440  	        LD      ($4014),HL      ; sv E_LINE_lo
6065:				
6066:				; -----------------------
6067:				; THE 'X-TEMP' SUBROUTINE
6068:				; -----------------------
6069:				;
6070:				;
6071:				
6072:				;; X-TEMP
6073:24177+16	14A3  2A1440  	L14A3:  LD      HL,($4014)      ; sv E_LINE_lo
6074:				
6075:				; ----------------------
6076:				; THE 'SET-STK' ROUTINES
6077:				; ----------------------
6078:				;
6079:				;
6080:				
6081:				;; SET-STK-B
6082:24193+16	14A6  221A40  	L14A6:  LD      ($401A),HL      ; sv STKBOT
6083:				
6084:				;
6085:				
6086:				;; SET-STK-E
6087:24209+16	14A9  221C40  	L14A9:  LD      ($401C),HL      ; sv STKEND
6088:24225+10	14AC  C9      	        RET                     ;
6089:				
6090:				; -----------------------
6091:				; THE 'CURSOR-IN' ROUTINE
6092:				; -----------------------
6093:				; This routine is called to set the edit line to the minimum cursor/newline
6094:				; and to set STKEND, the start of free space, at the next position.
6095:				
6096:				;; CURSOR-IN
6097:24235+16	14AD  2A1440  	L14AD:  LD      HL,($4014)      ; fetch start of edit line from E_LINE
6098:24251+10	14B0  367F    	        LD      (HL),$7F        ; insert cursor character
6099:				
6100:24261+6	14B2  23      	        INC     HL              ; point to next location.
6101:24267+10	14B3  3676    	        LD      (HL),$76        ; insert NEWLINE character
6102:24277+6	14B5  23      	        INC     HL              ; point to next free location.
6103:				
6104:24283+19	14B6  FD362202	        LD      (IY+$22),$02    ; set lower screen display file size DF_SZ
6105:				
6106:24302+12	14BA  18EA    	        JR      L14A6           ; exit via SET-STK-B above
6107:				
6108:				; ------------------------
6109:				; THE 'SET-MIN' SUBROUTINE
6110:				; ------------------------
6111:				;
6112:				;
6113:				
6114:				;; SET-MIN
6115:24314+10	14BC  215D40  	L14BC:  LD      HL,$405D        ; normal location of calculator's memory area
6116:24324+16	14BF  221F40  	        LD      ($401F),HL      ; update system variable MEM
6117:24340+16	14C2  2A1A40  	        LD      HL,($401A)      ; fetch STKBOT
6118:24356+12	14C5  18E2    	        JR      L14A9           ; back to SET-STK-E
6119:				
6120:				
6121:				; ------------------------------------
6122:				; THE 'RECLAIM THE END-MARKER' ROUTINE
6123:				; ------------------------------------
6124:				
6125:				;; REC-V80
6126:24368+20	14C7  ED5B1440	L14C7:  LD      DE,($4014)      ; sv E_LINE_lo
6127:24388+10	14CB  C35D0A  	        JP      L0A5D           ; to RECLAIM-1
6128:				
6129:				; ----------------------
6130:				; THE 'ALPHA' SUBROUTINE
6131:				; ----------------------
6132:				
6133:				;; ALPHA
6134:24398+7	14CE  FE26    	L14CE:  CP      $26             ;
6135:24405+12	14D0  1802    	        JR      L14D4           ; skip forward to ALPHA-2
6136:				
6137:				
6138:				; -------------------------
6139:				; THE 'ALPHANUM' SUBROUTINE
6140:				; -------------------------
6141:				
6142:				;; ALPHANUM
6143:24417+7	14D2  FE1C    	L14D2:  CP      $1C             ;
6144:				
6145:				
6146:				;; ALPHA-2
6147:24424+4	14D4  3F      	L14D4:  CCF                     ; Complement Carry Flag
6148:24428+5+6	14D5  D0      	        RET     NC              ;
6149:				
6150:24433+7	14D6  FE40    	        CP      $40             ;
6151:24440+10	14D8  C9      	        RET                     ;
6152:				
6153:				
6154:				; ------------------------------------------
6155:				; THE 'DECIMAL TO FLOATING POINT' SUBROUTINE
6156:				; ------------------------------------------
6157:				;
6158:				
6159:				;; DEC-TO-FP
6160:24450+17	14D9  CD4815  	L14D9:  CALL    L1548           ; routine INT-TO-FP gets first part
6161:24467+7	14DC  FE1B    	        CP      $1B             ; is character a '.' ?
6162:24474+7+5	14DE  2015    	        JR      NZ,L14F5        ; forward if not to E-FORMAT
6163:				
6164:				
6165:24481+11	14E0  EF      	        RST     28H             ;; FP-CALC
6166:     -	14E1  A1      	        DEFB    $A1             ;;stk-one
6167:     -	14E2  C0      	        DEFB    $C0             ;;st-mem-0
6168:     -	14E3  02      	        DEFB    $02             ;;delete
6169:     -	14E4  34      	        DEFB    $34             ;;end-calc
6170:				
6171:				
6172:				;; NXT-DGT-1
6173:24492+11	14E5  E7      	L14E5:  RST     20H             ; NEXT-CHAR
6174:24503+17	14E6  CD1415  	        CALL    L1514           ; routine STK-DIGIT
6175:24520+7+5	14E9  380A    	        JR      C,L14F5         ; forward to E-FORMAT
6176:				
6177:				
6178:24527+11	14EB  EF      	        RST     28H             ;; FP-CALC
6179:     -	14EC  E0      	        DEFB    $E0             ;;get-mem-0
6180:     -	14ED  A4      	        DEFB    $A4             ;;stk-ten
6181:     -	14EE  05      	        DEFB    $05             ;;division
6182:     -	14EF  C0      	        DEFB    $C0             ;;st-mem-0
6183:     -	14F0  04      	        DEFB    $04             ;;multiply
6184:     -	14F1  0F      	        DEFB    $0F             ;;addition
6185:     -	14F2  34      	        DEFB    $34             ;;end-calc
6186:				
6187:24538+12	14F3  18F0    	        JR      L14E5           ; loop back till exhausted to NXT-DGT-1
6188:				
6189:				; ---
6190:				
6191:				;; E-FORMAT
6192:24550+7	14F5  FE2A    	L14F5:  CP      $2A             ; is character 'E' ?
6193:24557+5+6	14F7  C0      	        RET     NZ              ; return if not
6194:				
6195:24562+19	14F8  FD365DFF	        LD      (IY+$5D),$FF    ; initialize sv MEM-0-1st to $FF TRUE
6196:				
6197:24581+11	14FC  E7      	        RST     20H             ; NEXT-CHAR
6198:24592+7	14FD  FE15    	        CP      $15             ; is character a '+' ?
6199:24599+7+5	14FF  2807    	        JR      Z,L1508         ; forward if so to SIGN-DONE
6200:				
6201:24606+7	1501  FE16    	        CP      $16             ; is it a '-' ?
6202:24613+7+5	1503  2004    	        JR      NZ,L1509        ; forward if not to ST-E-PART
6203:				
6204:24620+23	1505  FD345D  	        INC     (IY+$5D)        ; sv MEM-0-1st change to FALSE
6205:				
6206:				;; SIGN-DONE
6207:24643+11	1508  E7      	L1508:  RST     20H             ; NEXT-CHAR
6208:				
6209:				;; ST-E-PART
6210:24654+17	1509  CD4815  	L1509:  CALL    L1548           ; routine INT-TO-FP
6211:				
6212:24671+11	150C  EF      	        RST     28H             ;; FP-CALC              m, e.
6213:     -	150D  E0      	        DEFB    $E0             ;;get-mem-0             m, e, (1/0) TRUE/FALSE
6214:     -	150E  00      	        DEFB    $00             ;;jump-true
6215:     -	150F  02      	        DEFB    $02             ;;to L1511, E-POSTVE
6216:     -	1510  18      	        DEFB    $18             ;;neg                   m, -e
6217:				
6218:				;; E-POSTVE
6219:     -	1511  38      	L1511:  DEFB    $38             ;;e-to-fp               x.
6220:     -	1512  34      	        DEFB    $34             ;;end-calc              x.
6221:				
6222:24682+10	1513  C9      	        RET                     ; return.
6223:				
6224:				
6225:				; --------------------------
6226:				; THE 'STK-DIGIT' SUBROUTINE
6227:				; --------------------------
6228:				;
6229:				
6230:				;; STK-DIGIT
6231:24692+7	1514  FE1C    	L1514:  CP      $1C             ;
6232:24699+5+6	1516  D8      	        RET     C               ;
6233:				
6234:24704+7	1517  FE26    	        CP      $26             ;
6235:24711+4	1519  3F      	        CCF                     ; Complement Carry Flag
6236:24715+5+6	151A  D8      	        RET     C               ;
6237:				
6238:24720+7	151B  D61C    	        SUB     $1C             ;
6239:				
6240:				; ------------------------
6241:				; THE 'STACK-A' SUBROUTINE
6242:				; ------------------------
6243:				;
6244:				
6245:				
6246:				;; STACK-A
6247:24727+4	151D  4F      	L151D:  LD      C,A             ;
6248:24731+7	151E  0600    	        LD      B,$00           ;
6249:				
6250:				; -------------------------
6251:				; THE 'STACK-BC' SUBROUTINE
6252:				; -------------------------
6253:				; The ZX81 does not have an integer number format so the BC register contents
6254:				; must be converted to their full floating-point form.
6255:				
6256:				;; STACK-BC
6257:24738+14	1520  FD210040	L1520:  LD      IY,$4000        ; re-initialize the system variables pointer.
6258:24752+11	1524  C5      	        PUSH    BC              ; save the integer value.
6259:				
6260:				; now stack zero, five zero bytes as a starting point.
6261:				
6262:24763+11	1525  EF      	        RST     28H             ;; FP-CALC
6263:     -	1526  A0      	        DEFB    $A0             ;;stk-zero                      0.
6264:     -	1527  34      	        DEFB    $34             ;;end-calc
6265:				
6266:24774+10	1528  C1      	        POP     BC              ; restore integer value.
6267:				
6268:24784+10	1529  3691    	        LD      (HL),$91        ; place $91 in exponent         65536.
6269:				                                ; this is the maximum possible value
6270:				
6271:24794+4	152B  78      	        LD      A,B             ; fetch hi-byte.
6272:24798+4	152C  A7      	        AND     A               ; test for zero.
6273:24802+7+5	152D  2007    	        JR      NZ,L1536        ; forward if not zero to STK-BC-2
6274:				
6275:24809+7	152F  77      	        LD      (HL),A          ; else make exponent zero again
6276:24816+4	1530  B1      	        OR      C               ; test lo-byte
6277:24820+5+6	1531  C8      	        RET     Z               ; return if BC was zero - done.
6278:				
6279:				; else  there has to be a set bit if only the value one.
6280:				
6281:24825+4	1532  41      	        LD      B,C             ; save C in B.
6282:24829+7	1533  4E      	        LD      C,(HL)          ; fetch zero to C
6283:24836+10	1534  3689    	        LD      (HL),$89        ; make exponent $89             256.
6284:				
6285:				;; STK-BC-2
6286:24846+11	1536  35      	L1536:  DEC     (HL)            ; decrement exponent - halving number
6287:24857+8	1537  CB21    	        SLA     C               ;  C<-76543210<-0
6288:24865+8	1539  CB10    	        RL      B               ;  C<-76543210<-C
6289:24873+7+5	153B  30F9    	        JR      NC,L1536        ; loop back if no carry to STK-BC-2
6290:				
6291:24880+8	153D  CB38    	        SRL     B               ;  0->76543210->C
6292:24888+8	153F  CB19    	        RR      C               ;  C->76543210->C
6293:				
6294:24896+6	1541  23      	        INC     HL              ; address first byte of mantissa
6295:24902+7	1542  70      	        LD      (HL),B          ; insert B
6296:24909+6	1543  23      	        INC     HL              ; address second byte of mantissa
6297:24915+7	1544  71      	        LD      (HL),C          ; insert C
6298:				
6299:24922+6	1545  2B      	        DEC     HL              ; point to the
6300:24928+6	1546  2B      	        DEC     HL              ; exponent again
6301:24934+10	1547  C9      	        RET                     ; return.
6302:				
6303:				; ------------------------------------------
6304:				; THE 'INTEGER TO FLOATING POINT' SUBROUTINE
6305:				; ------------------------------------------
6306:				;
6307:				;
6308:				
6309:				;; INT-TO-FP
6310:24944+11	1548  F5      	L1548:  PUSH    AF              ;
6311:				
6312:24955+11	1549  EF      	        RST     28H             ;; FP-CALC
6313:     -	154A  A0      	        DEFB    $A0             ;;stk-zero
6314:     -	154B  34      	        DEFB    $34             ;;end-calc
6315:				
6316:24966+10	154C  F1      	        POP     AF              ;
6317:				
6318:				;; NXT-DGT-2
6319:24976+17	154D  CD1415  	L154D:  CALL    L1514           ; routine STK-DIGIT
6320:24993+5+6	1550  D8      	        RET     C               ;
6321:				
6322:				
6323:24998+11	1551  EF      	        RST     28H             ;; FP-CALC
6324:     -	1552  01      	        DEFB    $01             ;;exchange
6325:     -	1553  A4      	        DEFB    $A4             ;;stk-ten
6326:     -	1554  04      	        DEFB    $04             ;;multiply
6327:     -	1555  0F      	        DEFB    $0F             ;;addition
6328:     -	1556  34      	        DEFB    $34             ;;end-calc
6329:				
6330:				
6331:25009+11	1557  E7      	        RST     20H             ; NEXT-CHAR
6332:25020+12	1558  18F3    	        JR      L154D           ; to NXT-DGT-2
6333:				
6334:				
6335:				; -------------------------------------------
6336:				; THE 'E-FORMAT TO FLOATING POINT' SUBROUTINE
6337:				; -------------------------------------------
6338:				; (Offset $38: 'e-to-fp')
6339:				; invoked from DEC-TO-FP and PRINT-FP.
6340:				; e.g. 2.3E4 is 23000.
6341:				; This subroutine evaluates xEm where m is a positive or negative integer.
6342:				; At a simple level x is multiplied by ten for every unit of m.
6343:				; If the decimal exponent m is negative then x is divided by ten for each unit.
6344:				; A short-cut is taken if the exponent is greater than seven and in this
6345:				; case the exponent is reduced by seven and the value is multiplied or divided
6346:				; by ten million.
6347:				; Note. for the ZX Spectrum an even cleverer method was adopted which involved
6348:				; shifting the bits out of the exponent so the result was achieved with six
6349:				; shifts at most. The routine below had to be completely re-written mostly
6350:				; in Z80 machine code.
6351:				; Although no longer operable, the calculator literal was retained for old
6352:				; times sake, the routine being invoked directly from a machine code CALL.
6353:				;
6354:				; On entry in the ZX81, m, the exponent, is the 'last value', and the
6355:				; floating-point decimal mantissa is beneath it.
6356:				
6357:				
6358:				;; e-to-fp
6359:25032+11	155A  EF      	L155A:  RST     28H             ;; FP-CALC              x, m.
6360:     -	155B  2D      	        DEFB    $2D             ;;duplicate             x, m, m.
6361:     -	155C  32      	        DEFB    $32             ;;less-0                x, m, (1/0).
6362:     -	155D  C0      	        DEFB    $C0             ;;st-mem-0              x, m, (1/0).
6363:     -	155E  02      	        DEFB    $02             ;;delete                x, m.
6364:     -	155F  27      	        DEFB    $27             ;;abs                   x, +m.
6365:				
6366:				;; E-LOOP
6367:     -	1560  A1      	L1560:  DEFB    $A1             ;;stk-one               x, m,1.
6368:     -	1561  03      	        DEFB    $03             ;;subtract              x, m-1.
6369:     -	1562  2D      	        DEFB    $2D             ;;duplicate             x, m-1,m-1.
6370:     -	1563  32      	        DEFB    $32             ;;less-0                x, m-1, (1/0).
6371:     -	1564  00      	        DEFB    $00             ;;jump-true             x, m-1.
6372:     -	1565  22      	        DEFB    $22             ;;to L1587, E-END       x, m-1.
6373:				
6374:     -	1566  2D      	        DEFB    $2D             ;;duplicate             x, m-1, m-1.
6375:     -	1567  30      	        DEFB    $30             ;;stk-data
6376:     -	1568  33      	        DEFB    $33             ;;Exponent: $83, Bytes: 1
6377:				
6378:     -	1569  40      	        DEFB    $40             ;;(+00,+00,+00)         x, m-1, m-1, 6.
6379:     -	156A  03      	        DEFB    $03             ;;subtract              x, m-1, m-7.
6380:     -	156B  2D      	        DEFB    $2D             ;;duplicate             x, m-1, m-7, m-7.
6381:     -	156C  32      	        DEFB    $32             ;;less-0                x, m-1, m-7, (1/0).
6382:     -	156D  00      	        DEFB    $00             ;;jump-true             x, m-1, m-7.
6383:     -	156E  0C      	        DEFB    $0C             ;;to L157A, E-LOW
6384:				
6385:				; but if exponent m is higher than 7 do a bigger chunk.
6386:				; multiplying (or dividing if negative) by 10 million - 1e7.
6387:				
6388:     -	156F  01      	        DEFB    $01             ;;exchange              x, m-7, m-1.
6389:     -	1570  02      	        DEFB    $02             ;;delete                x, m-7.
6390:     -	1571  01      	        DEFB    $01             ;;exchange              m-7, x.
6391:     -	1572  30      	        DEFB    $30             ;;stk-data
6392:     -	1573  80      	        DEFB    $80             ;;Bytes: 3
6393:     -	1574  48      	        DEFB    $48             ;;Exponent $98
6394:     -	1575  189680  	        DEFB    $18,$96,$80     ;;(+00)                 m-7, x, 10,000,000 (=f)
6395:     -	1578  2F      	        DEFB    $2F             ;;jump
6396:     -	1579  04      	        DEFB    $04             ;;to L157D, E-CHUNK
6397:				
6398:				; ---
6399:				
6400:				;; E-LOW
6401:     -	157A  02      	L157A:  DEFB    $02             ;;delete                x, m-1.
6402:     -	157B  01      	        DEFB    $01             ;;exchange              m-1, x.
6403:     -	157C  A4      	        DEFB    $A4             ;;stk-ten               m-1, x, 10 (=f).
6404:				
6405:				;; E-CHUNK
6406:     -	157D  E0      	L157D:  DEFB    $E0             ;;get-mem-0             m-1, x, f, (1/0)
6407:     -	157E  00      	        DEFB    $00             ;;jump-true             m-1, x, f
6408:     -	157F  04      	        DEFB    $04             ;;to L1583, E-DIVSN
6409:				
6410:     -	1580  04      	        DEFB    $04             ;;multiply              m-1, x*f.
6411:     -	1581  2F      	        DEFB    $2F             ;;jump
6412:     -	1582  02      	        DEFB    $02             ;;to L1584, E-SWAP
6413:				
6414:				; ---
6415:				
6416:				;; E-DIVSN
6417:     -	1583  05      	L1583:  DEFB    $05             ;;division              m-1, x/f (= new x).
6418:				
6419:				;; E-SWAP
6420:     -	1584  01      	L1584:  DEFB    $01             ;;exchange              x, m-1 (= new m).
6421:     -	1585  2F      	        DEFB    $2F             ;;jump                  x, m.
6422:     -	1586  DA      	        DEFB    $DA             ;;to L1560, E-LOOP
6423:				
6424:				; ---
6425:				
6426:				;; E-END
6427:     -	1587  02      	L1587:  DEFB    $02             ;;delete                x. (-1)
6428:     -	1588  34      	        DEFB    $34             ;;end-calc              x.
6429:				
6430:25043+10	1589  C9      	        RET                     ; return.
6431:				
6432:				; -------------------------------------
6433:				; THE 'FLOATING-POINT TO BC' SUBROUTINE
6434:				; -------------------------------------
6435:				; The floating-point form on the calculator stack is compressed directly into
6436:				; the BC register rounding up if necessary.
6437:				; Valid range is 0 to 65535.4999
6438:				
6439:				;; FP-TO-BC
6440:25053+17	158A  CDF813  	L158A:  CALL    L13F8           ; routine STK-FETCH - exponent to A
6441:				                                ; mantissa to EDCB.
6442:25070+4	158D  A7      	        AND     A               ; test for value zero.
6443:25074+7+5	158E  2005    	        JR      NZ,L1595        ; forward if not to FPBC-NZRO
6444:				
6445:				; else value is zero
6446:				
6447:25081+4	1590  47      	        LD      B,A             ; zero to B
6448:25085+4	1591  4F      	        LD      C,A             ; also to C
6449:25089+11	1592  F5      	        PUSH    AF              ; save the flags on machine stack
6450:25100+12	1593  1831    	        JR      L15C6           ; forward to FPBC-END
6451:				
6452:				; ---
6453:				
6454:				; EDCB  =>  BCE
6455:				
6456:				;; FPBC-NZRO
6457:25112+4	1595  43      	L1595:  LD      B,E             ; transfer the mantissa from EDCB
6458:25116+4	1596  59      	        LD      E,C             ; to BCE. Bit 7 of E is the 17th bit which
6459:25120+4	1597  4A      	        LD      C,D             ; will be significant for rounding if the
6460:				                                ; number is already normalized.
6461:				
6462:25124+7	1598  D691    	        SUB     $91             ; subtract 65536
6463:25131+4	159A  3F      	        CCF                     ; complement carry flag
6464:25135+8	159B  CB78    	        BIT     7,B             ; test sign bit
6465:25143+11	159D  F5      	        PUSH    AF              ; push the result
6466:				
6467:25154+8	159E  CBF8    	        SET     7,B             ; set the implied bit
6468:25162+7+5	15A0  3824    	        JR      C,L15C6         ; forward with carry from SUB/CCF to FPBC-END
6469:				                                ; number is too big.
6470:				
6471:25169+4	15A2  3C      	        INC     A               ; increment the exponent and
6472:25173+8	15A3  ED44    	        NEG                     ; negate to make range $00 - $0F
6473:				
6474:25181+7	15A5  FE08    	        CP      $08             ; test if one or two bytes
6475:25188+7+5	15A7  3806    	        JR      C,L15AF         ; forward with two to BIG-INT
6476:				
6477:25195+4	15A9  59      	        LD      E,C             ; shift mantissa
6478:25199+4	15AA  48      	        LD      C,B             ; 8 places right
6479:25203+7	15AB  0600    	        LD      B,$00           ; insert a zero in B
6480:25210+7	15AD  D608    	        SUB     $08             ; reduce exponent by eight
6481:				
6482:				;; BIG-INT
6483:25217+4	15AF  A7      	L15AF:  AND     A               ; test the exponent
6484:25221+4	15B0  57      	        LD      D,A             ; save exponent in D.
6485:				
6486:25225+4	15B1  7B      	        LD      A,E             ; fractional bits to A
6487:25229+4	15B2  07      	        RLCA                    ; rotate most significant bit to carry for
6488:				                                ; rounding of an already normal number.
6489:				
6490:25233+7+5	15B3  2807    	        JR      Z,L15BC         ; forward if exponent zero to EXP-ZERO
6491:				                                ; the number is normalized
6492:				
6493:				;; FPBC-NORM
6494:25240+8	15B5  CB38    	L15B5:  SRL     B               ;   0->76543210->C
6495:25248+8	15B7  CB19    	        RR      C               ;   C->76543210->C
6496:				
6497:25256+4	15B9  15      	        DEC     D               ; decrement exponent
6498:				
6499:25260+7+5	15BA  20F9    	        JR      NZ,L15B5        ; loop back till zero to FPBC-NORM
6500:				
6501:				;; EXP-ZERO
6502:25267+7+5	15BC  3008    	L15BC:  JR      NC,L15C6        ; forward without carry to NO-ROUND
6503:				
6504:25274+6	15BE  03      	        INC     BC              ; round up.
6505:25280+4	15BF  78      	        LD      A,B             ; test result
6506:25284+4	15C0  B1      	        OR      C               ; for zero
6507:25288+7+5	15C1  2003    	        JR      NZ,L15C6        ; forward if not to GRE-ZERO
6508:				
6509:25295+10	15C3  F1      	        POP     AF              ; restore sign flag
6510:25305+4	15C4  37      	        SCF                     ; set carry flag to indicate overflow
6511:25309+11	15C5  F5      	        PUSH    AF              ; save combined flags again
6512:				
6513:				;; FPBC-END
6514:25320+11	15C6  C5      	L15C6:  PUSH    BC              ; save BC value
6515:				
6516:				; set HL and DE to calculator stack pointers.
6517:				
6518:25331+11	15C7  EF      	        RST     28H             ;; FP-CALC
6519:     -	15C8  34      	        DEFB    $34             ;;end-calc
6520:				
6521:				
6522:25342+10	15C9  C1      	        POP     BC              ; restore BC value
6523:25352+10	15CA  F1      	        POP     AF              ; restore flags
6524:25362+4	15CB  79      	        LD      A,C             ; copy low byte to A also.
6525:25366+10	15CC  C9      	        RET                     ; return
6526:				
6527:				; ------------------------------------
6528:				; THE 'FLOATING-POINT TO A' SUBROUTINE
6529:				; ------------------------------------
6530:				;
6531:				;
6532:				
6533:				;; FP-TO-A
6534:25376+17	15CD  CD8A15  	L15CD:  CALL    L158A           ; routine FP-TO-BC
6535:25393+5+6	15D0  D8      	        RET     C               ;
6536:				
6537:25398+11	15D1  F5      	        PUSH    AF              ;
6538:25409+4	15D2  05      	        DEC     B               ;
6539:25413+4	15D3  04      	        INC     B               ;
6540:25417+7+5	15D4  2803    	        JR      Z,L15D9         ; forward if in range to FP-A-END
6541:				
6542:25424+10	15D6  F1      	        POP     AF              ; fetch result
6543:25434+4	15D7  37      	        SCF                     ; set carry flag signaling overflow
6544:25438+10	15D8  C9      	        RET                     ; return
6545:				
6546:				;; FP-A-END
6547:25448+10	15D9  F1      	L15D9:  POP     AF              ;
6548:25458+10	15DA  C9      	        RET                     ;
6549:				
6550:				
6551:				; ----------------------------------------------
6552:				; THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE
6553:				; ----------------------------------------------
6554:				; prints 'last value' x on calculator stack.
6555:				; There are a wide variety of formats see Chapter 4.
6556:				; e.g. 
6557:				; PI            prints as       3.1415927
6558:				; .123          prints as       0.123
6559:				; .0123         prints as       .0123
6560:				; 999999999999  prints as       1000000000000
6561:				; 9876543210123 prints as       9876543200000
6562:				
6563:				; Begin by isolating zero and just printing the '0' character
6564:				; for that case. For negative numbers print a leading '-' and
6565:				; then form the absolute value of x.
6566:				
6567:				;; PRINT-FP
6568:25468+11	15DB  EF      	L15DB:  RST     28H             ;; FP-CALC              x.
6569:     -	15DC  2D      	        DEFB    $2D             ;;duplicate             x, x.
6570:     -	15DD  32      	        DEFB    $32             ;;less-0                x, (1/0).
6571:     -	15DE  00      	        DEFB    $00             ;;jump-true
6572:     -	15DF  0B      	        DEFB    $0B             ;;to L15EA, PF-NGTVE    x.
6573:				
6574:     -	15E0  2D      	        DEFB    $2D             ;;duplicate             x, x
6575:     -	15E1  33      	        DEFB    $33             ;;greater-0             x, (1/0).
6576:     -	15E2  00      	        DEFB    $00             ;;jump-true
6577:     -	15E3  0D      	        DEFB    $0D             ;;to L15F0, PF-POSTVE   x.
6578:				
6579:     -	15E4  02      	        DEFB    $02             ;;delete                .
6580:     -	15E5  34      	        DEFB    $34             ;;end-calc              .
6581:				
6582:25479+7	15E6  3E1C    	        LD      A,$1C           ; load accumulator with character '0'
6583:				
6584:25486+11	15E8  D7      	        RST     10H             ; PRINT-A
6585:25497+10	15E9  C9      	        RET                     ; return.                               >>
6586:				
6587:				; ---
6588:				
6589:				;; PF-NEGTVE
6590:     -	15EA  27      	L15EA:  DEFB    $27             ; abs                   +x.
6591:     -	15EB  34      	        DEFB    $34             ;;end-calc              x.
6592:				
6593:25507+7	15EC  3E16    	        LD      A,$16           ; load accumulator with '-'
6594:				
6595:25514+11	15EE  D7      	        RST     10H             ; PRINT-A
6596:				
6597:25525+11	15EF  EF      	        RST     28H             ;; FP-CALC              x.
6598:				
6599:				;; PF-POSTVE
6600:     -	15F0  34      	L15F0:  DEFB    $34             ;;end-calc              x.
6601:				
6602:				; register HL addresses the exponent of the floating-point value.
6603:				; if positive, and point floats to left, then bit 7 is set.
6604:				
6605:25536+7	15F1  7E      	        LD      A,(HL)          ; pick up the exponent byte
6606:25543+17	15F2  CD1D15  	        CALL    L151D           ; routine STACK-A places on calculator stack.
6607:				
6608:				; now calculate roughly the number of digits, n, before the decimal point by
6609:				; subtracting a half from true exponent and multiplying by log to 
6610:				; the base 10 of 2. 
6611:				; The true number could be one higher than n, the integer result.
6612:				
6613:25560+11	15F5  EF      	        RST     28H             ;; FP-CALC              x, e.
6614:     -	15F6  30      	        DEFB    $30             ;;stk-data
6615:     -	15F7  78      	        DEFB    $78             ;;Exponent: $88, Bytes: 2
6616:     -	15F8  0080    	        DEFB    $00,$80         ;;(+00,+00)             x, e, 128.5.
6617:     -	15FA  03      	        DEFB    $03             ;;subtract              x, e -.5.
6618:     -	15FB  30      	        DEFB    $30             ;;stk-data
6619:     -	15FC  EF      	        DEFB    $EF             ;;Exponent: $7F, Bytes: 4
6620:     -	15FD  1A209A85	        DEFB    $1A,$20,$9A,$85 ;;                      .30103 (log10 2)
6621:     -	1601  04      	        DEFB    $04             ;;multiply              x,
6622:     -	1602  24      	        DEFB    $24             ;;int
6623:     -	1603  C1      	        DEFB    $C1             ;;st-mem-1              x, n.
6624:				
6625:				
6626:     -	1604  30      	        DEFB    $30             ;;stk-data
6627:     -	1605  34      	        DEFB    $34             ;;Exponent: $84, Bytes: 1
6628:     -	1606  00      	        DEFB    $00             ;;(+00,+00,+00)         x, n, 8.
6629:				
6630:     -	1607  03      	        DEFB    $03             ;;subtract              x, n-8.
6631:     -	1608  18      	        DEFB    $18             ;;neg                   x, 8-n.
6632:     -	1609  38      	        DEFB    $38             ;;e-to-fp               x * (10^n)
6633:				
6634:				; finally the 8 or 9 digit decimal is rounded.
6635:				; a ten-digit integer can arise in the case of, say, 999999999.5
6636:				; which gives 1000000000.
6637:				
6638:     -	160A  A2      	        DEFB    $A2             ;;stk-half
6639:     -	160B  0F      	        DEFB    $0F             ;;addition
6640:     -	160C  24      	        DEFB    $24             ;;int                   i.
6641:     -	160D  34      	        DEFB    $34             ;;end-calc
6642:				
6643:				; If there were 8 digits then final rounding will take place on the calculator 
6644:				; stack above and the next two instructions insert a masked zero so that
6645:				; no further rounding occurs. If the result is a 9 digit integer then
6646:				; rounding takes place within the buffer.
6647:				
6648:25571+10	160E  216B40  	        LD      HL,$406B        ; address system variable MEM-2-5th
6649:				                                ; which could be the 'ninth' digit.
6650:25581+10	1611  3690    	        LD      (HL),$90        ; insert the value $90  10010000
6651:				
6652:				; now starting from lowest digit lay down the 8, 9 or 10 digit integer
6653:				; which represents the significant portion of the number
6654:				; e.g. PI will be the nine-digit integer 314159265
6655:				
6656:25591+7	1613  060A    	        LD      B,$0A           ; count is ten digits.
6657:				
6658:				;; PF-LOOP
6659:25598+6	1615  23      	L1615:  INC     HL              ; increase pointer
6660:				
6661:25604+11	1616  E5      	        PUSH    HL              ; preserve buffer address.
6662:25615+11	1617  C5      	        PUSH    BC              ; preserve counter.
6663:				
6664:25626+11	1618  EF      	        RST     28H             ;; FP-CALC              i.
6665:     -	1619  A4      	        DEFB    $A4             ;;stk-ten               i, 10.
6666:     -	161A  2E      	        DEFB    $2E             ;;n-mod-m               i mod 10, i/10
6667:     -	161B  01      	        DEFB    $01             ;;exchange              i/10, remainder.
6668:     -	161C  34      	        DEFB    $34             ;;end-calc
6669:				
6670:25637+17	161D  CDCD15  	        CALL    L15CD           ; routine FP-TO-A  $00-$09
6671:				
6672:25654+7	1620  F690    	        OR      $90             ; make left hand nibble 9 
6673:				
6674:25661+10	1622  C1      	        POP     BC              ; restore counter
6675:25671+10	1623  E1      	        POP     HL              ; restore buffer address.
6676:				
6677:25681+7	1624  77      	        LD      (HL),A          ; insert masked digit in buffer.
6678:25688+8+5	1625  10EE    	        DJNZ    L1615           ; loop back for all ten to PF-LOOP
6679:				
6680:				; the most significant digit will be last but if the number is exhausted then
6681:				; the last one or two positions will contain zero ($90).
6682:				
6683:				; e.g. for 'one' we have zero as estimate of leading digits.
6684:				; 1*10^8 100000000 as integer value
6685:				; 90 90 90 90 90   90 90 90 91 90 as buffer mem3/mem4 contents.
6686:				
6687:				
6688:25696+6	1627  23      	        INC     HL              ; advance pointer to one past buffer 
6689:25702+10	1628  010800  	        LD      BC,$0008        ; set C to 8 ( B is already zero )
6690:25712+11	162B  E5      	        PUSH    HL              ; save pointer.
6691:				
6692:				;; PF-NULL
6693:25723+6	162C  2B      	L162C:  DEC     HL              ; decrease pointer
6694:25729+7	162D  7E      	        LD      A,(HL)          ; fetch masked digit
6695:25736+7	162E  FE90    	        CP      $90             ; is it a leading zero ?
6696:25743+7+5	1630  28FA    	        JR      Z,L162C         ; loop back if so to PF-NULL
6697:				
6698:				; at this point a significant digit has been found. carry is reset.
6699:				
6700:25750+15	1632  ED42    	        SBC     HL,BC           ; subtract eight from the address.
6701:25765+11	1634  E5      	        PUSH    HL              ; ** save this pointer too
6702:25776+7	1635  7E      	        LD      A,(HL)          ; fetch addressed byte
6703:25783+7	1636  C66B    	        ADD     A,$6B           ; add $6B - forcing a round up ripple
6704:				                                ; if  $95 or over.
6705:25790+11	1638  F5      	        PUSH    AF              ; save the carry result.
6706:				
6707:				; now enter a loop to round the number. After rounding has been considered
6708:				; a zero that has arisen from rounding or that was present at that position
6709:				; originally is changed from $90 to $80.
6710:				
6711:				;; PF-RND-LP
6712:25801+10	1639  F1      	L1639:  POP     AF              ; retrieve carry from machine stack.
6713:25811+6	163A  23      	        INC     HL              ; increment address
6714:25817+7	163B  7E      	        LD      A,(HL)          ; fetch new byte
6715:25824+7	163C  CE00    	        ADC     A,$00           ; add in any carry
6716:				
6717:25831+4	163E  27      	        DAA                     ; decimal adjust accumulator
6718:				                                ; carry will ripple through the '9'
6719:				
6720:25835+11	163F  F5      	        PUSH    AF              ; save carry on machine stack.
6721:25846+7	1640  E60F    	        AND     $0F             ; isolate character 0 - 9 AND set zero flag
6722:				                                ; if zero.
6723:25853+7	1642  77      	        LD      (HL),A          ; place back in location.
6724:25860+15	1643  CBFE    	        SET     7,(HL)          ; set bit 7 to show printable.
6725:				                                ; but not if trailing zero after decimal point.
6726:25875+7+5	1645  28F2    	        JR      Z,L1639         ; back if a zero to PF-RND-LP
6727:				                                ; to consider further rounding and/or trailing
6728:				                                ; zero identification.
6729:				
6730:25882+10	1647  F1      	        POP     AF              ; balance stack
6731:25892+10	1648  E1      	        POP     HL              ; ** retrieve lower pointer
6732:				
6733:				; now insert 6 trailing zeros which are printed if before the decimal point
6734:				; but mark the end of printing if after decimal point.
6735:				; e.g. 9876543210123 is printed as 9876543200000
6736:				; 123.456001 is printed as 123.456
6737:				
6738:25902+7	1649  0606    	        LD      B,$06           ; the count is six.
6739:				
6740:				;; PF-ZERO-6
6741:25909+10	164B  3680    	L164B:  LD      (HL),$80        ; insert a masked zero
6742:25919+6	164D  2B      	        DEC     HL              ; decrease pointer.
6743:25925+8+5	164E  10FB    	        DJNZ    L164B           ; loop back for all six to PF-ZERO-6
6744:				
6745:				; n-mod-m reduced the number to zero and this is now deleted from the calculator
6746:				; stack before fetching the original estimate of leading digits.
6747:				
6748:				
6749:25933+11	1650  EF      	        RST     28H             ;; FP-CALC              0.
6750:     -	1651  02      	        DEFB    $02             ;;delete                .
6751:     -	1652  E1      	        DEFB    $E1             ;;get-mem-1             n.
6752:     -	1653  34      	        DEFB    $34             ;;end-calc              n.
6753:				
6754:25944+17	1654  CDCD15  	        CALL    L15CD           ; routine FP-TO-A
6755:25961+7+5	1657  2802    	        JR      Z,L165B         ; skip forward if positive to PF-POS
6756:				
6757:25968+8	1659  ED44    	        NEG                     ; negate makes positive
6758:				
6759:				;; PF-POS
6760:25976+4	165B  5F      	L165B:  LD      E,A             ; transfer count of digits to E
6761:25980+4	165C  1C      	        INC     E               ; increment twice 
6762:25984+4	165D  1C      	        INC     E               ; 
6763:25988+10	165E  E1      	        POP     HL              ; * retrieve pointer to one past buffer.
6764:				
6765:				;; GET-FIRST
6766:25998+6	165F  2B      	L165F:  DEC     HL              ; decrement address.
6767:26004+4	1660  1D      	        DEC     E               ; decrement digit counter.
6768:26008+7	1661  7E      	        LD      A,(HL)          ; fetch masked byte.
6769:26015+7	1662  E60F    	        AND     $0F             ; isolate right-hand nibble.
6770:26022+7+5	1664  28F9    	        JR      Z,L165F         ; back with leading zero to GET-FIRST
6771:				
6772:				; now determine if E-format printing is needed
6773:				
6774:26029+4	1666  7B      	        LD      A,E             ; transfer now accurate number count to A.
6775:26033+7	1667  D605    	        SUB     $05             ; subtract five
6776:26040+7	1669  FE08    	        CP      $08             ; compare with 8 as maximum digits is 13.
6777:26047+10	166B  F28216  	        JP      P,L1682         ; forward if positive to PF-E-FMT
6778:				
6779:26057+7	166E  FEF6    	        CP      $F6             ; test for more than four zeros after point.
6780:26064+10	1670  FA8216  	        JP      M,L1682         ; forward if so to PF-E-FMT
6781:				
6782:26074+7	1673  C606    	        ADD     A,$06           ; test for zero leading digits, e.g. 0.5
6783:26081+7+5	1675  2848    	        JR      Z,L16BF         ; forward if so to PF-ZERO-1 
6784:				
6785:26088+10	1677  FAB216  	        JP      M,L16B2         ; forward if more than one zero to PF-ZEROS
6786:				
6787:				; else digits before the decimal point are to be printed
6788:				
6789:26098+4	167A  47      	        LD      B,A             ; count of leading characters to B.
6790:				
6791:				;; PF-NIB-LP
6792:26102+17	167B  CDD016  	L167B:  CALL    L16D0           ; routine PF-NIBBLE
6793:26119+8+5	167E  10FB    	        DJNZ    L167B           ; loop back for counted numbers to PF-NIB-LP
6794:				
6795:26127+12	1680  1840    	        JR      L16C2           ; forward to consider decimal part to PF-DC-OUT
6796:				
6797:				; ---
6798:				
6799:				;; PF-E-FMT
6800:26139+4	1682  43      	L1682:  LD      B,E             ; count to B
6801:26143+17	1683  CDD016  	        CALL    L16D0           ; routine PF-NIBBLE prints one digit.
6802:26160+17	1686  CDC216  	        CALL    L16C2           ; routine PF-DC-OUT considers fractional part.
6803:				
6804:26177+7	1689  3E2A    	        LD      A,$2A           ; prepare character 'E'
6805:26184+11	168B  D7      	        RST     10H             ; PRINT-A
6806:				
6807:26195+4	168C  78      	        LD      A,B             ; transfer exponent to A
6808:26199+4	168D  A7      	        AND     A               ; test the sign.
6809:26203+10	168E  F29816  	        JP      P,L1698         ; forward if positive to PF-E-POS
6810:				
6811:26213+8	1691  ED44    	        NEG                     ; negate the negative exponent.
6812:26221+4	1693  47      	        LD      B,A             ; save positive exponent in B.
6813:				
6814:26225+7	1694  3E16    	        LD      A,$16           ; prepare character '-'
6815:26232+12	1696  1802    	        JR      L169A           ; skip forward to PF-E-SIGN
6816:				
6817:				; ---
6818:				
6819:				;; PF-E-POS
6820:26244+7	1698  3E15    	L1698:  LD      A,$15           ; prepare character '+'
6821:				
6822:				;; PF-E-SIGN
6823:26251+11	169A  D7      	L169A:  RST     10H             ; PRINT-A
6824:				
6825:				; now convert the integer exponent in B to two characters.
6826:				; it will be less than 99.
6827:				
6828:26262+4	169B  78      	        LD      A,B             ; fetch positive exponent.
6829:26266+7	169C  06FF    	        LD      B,$FF           ; initialize left hand digit to minus one.
6830:				
6831:				;; PF-E-TENS
6832:26273+4	169E  04      	L169E:  INC     B               ; increment ten count
6833:26277+7	169F  D60A    	        SUB     $0A             ; subtract ten from exponent
6834:26284+7+5	16A1  30FB    	        JR      NC,L169E        ; loop back if greater than ten to PF-E-TENS
6835:				
6836:26291+7	16A3  C60A    	        ADD     A,$0A           ; reverse last subtraction
6837:26298+4	16A5  4F      	        LD      C,A             ; transfer remainder to C
6838:				
6839:26302+4	16A6  78      	        LD      A,B             ; transfer ten value to A.
6840:26306+4	16A7  A7      	        AND     A               ; test for zero.
6841:26310+7+5	16A8  2803    	        JR      Z,L16AD         ; skip forward if so to PF-E-LOW
6842:				
6843:26317+17	16AA  CDEB07  	        CALL    L07EB           ; routine OUT-CODE prints as digit '1' - '9'
6844:				
6845:				;; PF-E-LOW
6846:26334+4	16AD  79      	L16AD:  LD      A,C             ; low byte to A
6847:26338+17	16AE  CDEB07  	        CALL    L07EB           ; routine OUT-CODE prints final digit of the
6848:				                                ; exponent.
6849:26355+10	16B1  C9      	        RET                     ; return.                               >>
6850:				
6851:				; ---
6852:				
6853:				; this branch deals with zeros after decimal point.
6854:				; e.g.      .01 or .0000999
6855:				
6856:				;; PF-ZEROS
6857:26365+8	16B2  ED44    	L16B2:  NEG                     ; negate makes number positive 1 to 4.
6858:26373+4	16B4  47      	        LD      B,A             ; zero count to B.
6859:				
6860:26377+7	16B5  3E1B    	        LD      A,$1B           ; prepare character '.'
6861:26384+11	16B7  D7      	        RST     10H             ; PRINT-A
6862:				
6863:26395+7	16B8  3E1C    	        LD      A,$1C           ; prepare a '0'
6864:				
6865:				;; PF-ZRO-LP
6866:26402+11	16BA  D7      	L16BA:  RST     10H             ; PRINT-A
6867:26413+8+5	16BB  10FD    	        DJNZ    L16BA           ; loop back to PF-ZRO-LP
6868:				
6869:26421+12	16BD  1809    	        JR      L16C8           ; forward to PF-FRAC-LP
6870:				
6871:				; ---
6872:				
6873:				; there is  a need to print a leading zero e.g. 0.1 but not with .01
6874:				
6875:				;; PF-ZERO-1
6876:26433+7	16BF  3E1C    	L16BF:  LD      A,$1C           ; prepare character '0'.
6877:26440+11	16C1  D7      	        RST     10H             ; PRINT-A
6878:				
6879:				; this subroutine considers the decimal point and any trailing digits.
6880:				; if the next character is a marked zero, $80, then nothing more to print.
6881:				
6882:				;; PF-DC-OUT
6883:26451+11	16C2  35      	L16C2:  DEC     (HL)            ; decrement addressed character
6884:26462+11	16C3  34      	        INC     (HL)            ; increment it again
6885:26473+5+6	16C4  E8      	        RET     PE              ; return with overflow  (was 128) >>
6886:				                                ; as no fractional part
6887:				
6888:				; else there is a fractional part so print the decimal point.
6889:				
6890:26478+7	16C5  3E1B    	        LD      A,$1B           ; prepare character '.'
6891:26485+11	16C7  D7      	        RST     10H             ; PRINT-A
6892:				
6893:				; now enter a loop to print trailing digits
6894:				
6895:				;; PF-FRAC-LP
6896:26496+11	16C8  35      	L16C8:  DEC     (HL)            ; test for a marked zero.
6897:26507+11	16C9  34      	        INC     (HL)            ;
6898:26518+5+6	16CA  E8      	        RET     PE              ; return when digits exhausted          >>
6899:				
6900:26523+17	16CB  CDD016  	        CALL    L16D0           ; routine PF-NIBBLE
6901:26540+12	16CE  18F8    	        JR      L16C8           ; back for all fractional digits to PF-FRAC-LP.
6902:				
6903:				; ---
6904:				
6905:				; subroutine to print right-hand nibble
6906:				
6907:				;; PF-NIBBLE
6908:26552+7	16D0  7E      	L16D0:  LD      A,(HL)          ; fetch addressed byte
6909:26559+7	16D1  E60F    	        AND     $0F             ; mask off lower 4 bits
6910:26566+17	16D3  CDEB07  	        CALL    L07EB           ; routine OUT-CODE
6911:26583+6	16D6  2B      	        DEC     HL              ; decrement pointer.
6912:26589+10	16D7  C9      	        RET                     ; return.
6913:				
6914:				
6915:				; -------------------------------
6916:				; THE 'PREPARE TO ADD' SUBROUTINE
6917:				; -------------------------------
6918:				; This routine is called twice to prepare each floating point number for
6919:				; addition, in situ, on the calculator stack.
6920:				; The exponent is picked up from the first byte which is then cleared to act
6921:				; as a sign byte and accept any overflow.
6922:				; If the exponent is zero then the number is zero and an early return is made.
6923:				; The now redundant sign bit of the mantissa is set and if the number is 
6924:				; negative then all five bytes of the number are twos-complemented to prepare 
6925:				; the number for addition.
6926:				; On the second invocation the exponent of the first number is in B.
6927:				
6928:				
6929:				;; PREP-ADD
6930:26599+7	16D8  7E      	L16D8:  LD      A,(HL)          ; fetch exponent.
6931:26606+10	16D9  3600    	        LD      (HL),$00        ; make this byte zero to take any overflow and
6932:				                                ; default to positive.
6933:26616+4	16DB  A7      	        AND     A               ; test stored exponent for zero.
6934:26620+5+6	16DC  C8      	        RET     Z               ; return with zero flag set if number is zero.
6935:				
6936:26625+6	16DD  23      	        INC     HL              ; point to first byte of mantissa.
6937:26631+12	16DE  CB7E    	        BIT     7,(HL)          ; test the sign bit.
6938:26643+15	16E0  CBFE    	        SET     7,(HL)          ; set it to its implied state.
6939:26658+6	16E2  2B      	        DEC     HL              ; set pointer to first byte again.
6940:26664+5+6	16E3  C8      	        RET     Z               ; return if bit indicated number is positive.>>
6941:				
6942:				; if negative then all five bytes are twos complemented starting at LSB.
6943:				
6944:26669+11	16E4  C5      	        PUSH    BC              ; save B register contents.
6945:26680+10	16E5  010500  	        LD      BC,$0005        ; set BC to five.
6946:26690+11	16E8  09      	        ADD     HL,BC           ; point to location after 5th byte.
6947:26701+4	16E9  41      	        LD      B,C             ; set the B counter to five.
6948:26705+4	16EA  4F      	        LD      C,A             ; store original exponent in C.
6949:26709+4	16EB  37      	        SCF                     ; set carry flag so that one is added.
6950:				
6951:				; now enter a loop to twos-complement the number.
6952:				; The first of the five bytes becomes $FF to denote a negative number.
6953:				
6954:				;; NEG-BYTE
6955:26713+6	16EC  2B      	L16EC:  DEC     HL              ; point to first or more significant byte.
6956:26719+7	16ED  7E      	        LD      A,(HL)          ; fetch to accumulator.
6957:26726+4	16EE  2F      	        CPL                     ; complement.
6958:26730+7	16EF  CE00    	        ADC     A,$00           ; add in initial carry or any subsequent carry.
6959:26737+7	16F1  77      	        LD      (HL),A          ; place number back.
6960:26744+8+5	16F2  10F8    	        DJNZ    L16EC           ; loop back five times to NEG-BYTE
6961:				
6962:26752+4	16F4  79      	        LD      A,C             ; restore the exponent to accumulator.
6963:26756+10	16F5  C1      	        POP     BC              ; restore B register contents.
6964:				
6965:26766+10	16F6  C9      	        RET                     ; return.
6966:				
6967:				; ----------------------------------
6968:				; THE 'FETCH TWO NUMBERS' SUBROUTINE
6969:				; ----------------------------------
6970:				; This routine is used by addition, multiplication and division to fetch
6971:				; the two five-byte numbers addressed by HL and DE from the calculator stack
6972:				; into the Z80 registers.
6973:				; The HL register may no longer point to the first of the two numbers.
6974:				; Since the 32-bit addition operation is accomplished using two Z80 16-bit
6975:				; instructions, it is important that the lower two bytes of each mantissa are
6976:				; in one set of registers and the other bytes all in the alternate set.
6977:				;
6978:				; In: HL = highest number, DE= lowest number
6979:				;
6980:				;         : alt':   :
6981:				; Out:    :H,B-C:C,B: num1
6982:				;         :L,D-E:D-E: num2
6983:				
6984:				;; FETCH-TWO
6985:26776+11	16F7  E5      	L16F7:  PUSH    HL              ; save HL 
6986:26787+11	16F8  F5      	        PUSH    AF              ; save A - result sign when used from division.
6987:				
6988:26798+7	16F9  4E      	        LD      C,(HL)          ;
6989:26805+6	16FA  23      	        INC     HL              ;
6990:26811+7	16FB  46      	        LD      B,(HL)          ;
6991:26818+7	16FC  77      	        LD      (HL),A          ; insert sign when used from multiplication.
6992:26825+6	16FD  23      	        INC     HL              ;
6993:26831+4	16FE  79      	        LD      A,C             ; m1
6994:26835+7	16FF  4E      	        LD      C,(HL)          ;
6995:26842+11	1700  C5      	        PUSH    BC              ; PUSH m2 m3
6996:				
6997:26853+6	1701  23      	        INC     HL              ;
6998:26859+7	1702  4E      	        LD      C,(HL)          ; m4
6999:26866+6	1703  23      	        INC     HL              ;
7000:26872+7	1704  46      	        LD      B,(HL)          ; m5  BC holds m5 m4
7001:				
7002:26879+4	1705  EB      	        EX      DE,HL           ; make HL point to start of second number.
7003:				
7004:26883+4	1706  57      	        LD      D,A             ; m1
7005:26887+7	1707  5E      	        LD      E,(HL)          ;
7006:26894+11	1708  D5      	        PUSH    DE              ; PUSH m1 n1
7007:				
7008:26905+6	1709  23      	        INC     HL              ;
7009:26911+7	170A  56      	        LD      D,(HL)          ;
7010:26918+6	170B  23      	        INC     HL              ;
7011:26924+7	170C  5E      	        LD      E,(HL)          ;
7012:26931+11	170D  D5      	        PUSH    DE              ; PUSH n2 n3
7013:				
7014:26942+4	170E  D9      	        EXX                     ; - - - - - - -
7015:				
7016:26946+10	170F  D1      	        POP     DE              ; POP n2 n3
7017:26956+10	1710  E1      	        POP     HL              ; POP m1 n1
7018:26966+10	1711  C1      	        POP     BC              ; POP m2 m3
7019:				
7020:26976+4	1712  D9      	        EXX                     ; - - - - - - -
7021:				
7022:26980+6	1713  23      	        INC     HL              ;
7023:26986+7	1714  56      	        LD      D,(HL)          ;
7024:26993+6	1715  23      	        INC     HL              ;
7025:26999+7	1716  5E      	        LD      E,(HL)          ; DE holds n4 n5
7026:				
7027:27006+10	1717  F1      	        POP     AF              ; restore saved
7028:27016+10	1718  E1      	        POP     HL              ; registers.
7029:27026+10	1719  C9      	        RET                     ; return.
7030:				
7031:				; -----------------------------
7032:				; THE 'SHIFT ADDEND' SUBROUTINE
7033:				; -----------------------------
7034:				; The accumulator A contains the difference between the two exponents.
7035:				; This is the lowest of the two numbers to be added 
7036:				
7037:				;; SHIFT-FP
7038:27036+4	171A  A7      	L171A:  AND     A               ; test difference between exponents.
7039:27040+5+6	171B  C8      	        RET     Z               ; return if zero. both normal.
7040:				
7041:27045+7	171C  FE21    	        CP      $21             ; compare with 33 bits.
7042:27052+7+5	171E  3016    	        JR      NC,L1736        ; forward if greater than 32 to ADDEND-0
7043:				
7044:27059+11	1720  C5      	        PUSH    BC              ; preserve BC - part 
7045:27070+4	1721  47      	        LD      B,A             ; shift counter to B.
7046:				
7047:				; Now perform B right shifts on the addend  L'D'E'D E
7048:				; to bring it into line with the augend     H'B'C'C B
7049:				
7050:				;; ONE-SHIFT
7051:27074+4	1722  D9      	L1722:  EXX                     ; - - -
7052:27078+8	1723  CB2D    	        SRA     L               ;    76543210->C    bit 7 unchanged.
7053:27086+8	1725  CB1A    	        RR      D               ; C->76543210->C
7054:27094+8	1727  CB1B    	        RR      E               ; C->76543210->C
7055:27102+4	1729  D9      	        EXX                     ; - - - 
7056:27106+8	172A  CB1A    	        RR      D               ; C->76543210->C
7057:27114+8	172C  CB1B    	        RR      E               ; C->76543210->C
7058:27122+8+5	172E  10F2    	        DJNZ    L1722           ; loop back B times to ONE-SHIFT
7059:				
7060:27130+10	1730  C1      	        POP     BC              ; restore BC
7061:27140+5+6	1731  D0      	        RET     NC              ; return if last shift produced no carry.   >>
7062:				
7063:				; if carry flag was set then accuracy is being lost so round up the addend.
7064:				
7065:27145+17	1732  CD4117  	        CALL    L1741           ; routine ADD-BACK
7066:27162+5+6	1735  C0      	        RET     NZ              ; return if not FF 00 00 00 00
7067:				
7068:				; this branch makes all five bytes of the addend zero and is made during
7069:				; addition when the exponents are too far apart for the addend bits to 
7070:				; affect the result.
7071:				
7072:				;; ADDEND-0
7073:27167+4	1736  D9      	L1736:  EXX                     ; select alternate set for more significant 
7074:				                                ; bytes.
7075:27171+4	1737  AF      	        XOR     A               ; clear accumulator.
7076:				
7077:				
7078:				; this entry point (from multiplication) sets four of the bytes to zero or if 
7079:				; continuing from above, during addition, then all five bytes are set to zero.
7080:				
7081:				;; ZEROS-4/5
7082:27175+7	1738  2E00    	L1738:  LD      L,$00           ; set byte 1 to zero.
7083:27182+4	173A  57      	        LD      D,A             ; set byte 2 to A.
7084:27186+4	173B  5D      	        LD      E,L             ; set byte 3 to zero.
7085:27190+4	173C  D9      	        EXX                     ; select main set 
7086:27194+10	173D  110000  	        LD      DE,$0000        ; set lower bytes 4 and 5 to zero.
7087:27204+10	1740  C9      	        RET                     ; return.
7088:				
7089:				; -------------------------
7090:				; THE 'ADD-BACK' SUBROUTINE
7091:				; -------------------------
7092:				; Called from SHIFT-FP above during addition and after normalization from
7093:				; multiplication.
7094:				; This is really a 32-bit increment routine which sets the zero flag according
7095:				; to the 32-bit result.
7096:				; During addition, only negative numbers like FF FF FF FF FF,
7097:				; the twos-complement version of xx 80 00 00 01 say 
7098:				; will result in a full ripple FF 00 00 00 00.
7099:				; FF FF FF FF FF when shifted right is unchanged by SHIFT-FP but sets the 
7100:				; carry invoking this routine.
7101:				
7102:				;; ADD-BACK
7103:27214+4	1741  1C      	L1741:  INC     E               ;
7104:27218+5+6	1742  C0      	        RET     NZ              ;
7105:				
7106:27223+4	1743  14      	        INC     D               ;
7107:27227+5+6	1744  C0      	        RET     NZ              ;
7108:				
7109:27232+4	1745  D9      	        EXX                     ;
7110:27236+4	1746  1C      	        INC     E               ;
7111:27240+7+5	1747  2001    	        JR      NZ,L174A        ; forward if no overflow to ALL-ADDED
7112:				
7113:27247+4	1749  14      	        INC     D               ;
7114:				
7115:				;; ALL-ADDED
7116:27251+4	174A  D9      	L174A:  EXX                     ;
7117:27255+10	174B  C9      	        RET                     ; return with zero flag set for zero mantissa.
7118:				
7119:				
7120:				; ---------------------------
7121:				; THE 'SUBTRACTION' OPERATION
7122:				; ---------------------------
7123:				; just switch the sign of subtrahend and do an add.
7124:				
7125:				;; subtract
7126:27265+7	174C  1A      	L174C:  LD      A,(DE)          ; fetch exponent byte of second number the
7127:				                                ; subtrahend. 
7128:27272+4	174D  A7      	        AND     A               ; test for zero
7129:27276+5+6	174E  C8      	        RET     Z               ; return if zero - first number is result.
7130:				
7131:27281+6	174F  13      	        INC     DE              ; address the first mantissa byte.
7132:27287+7	1750  1A      	        LD      A,(DE)          ; fetch to accumulator.
7133:27294+7	1751  EE80    	        XOR     $80             ; toggle the sign bit.
7134:27301+7	1753  12      	        LD      (DE),A          ; place back on calculator stack.
7135:27308+6	1754  1B      	        DEC     DE              ; point to exponent byte.
7136:				                                ; continue into addition routine.
7137:				
7138:				; ------------------------
7139:				; THE 'ADDITION' OPERATION
7140:				; ------------------------
7141:				; The addition operation pulls out all the stops and uses most of the Z80's
7142:				; registers to add two floating-point numbers.
7143:				; This is a binary operation and on entry, HL points to the first number
7144:				; and DE to the second.
7145:				
7146:				;; addition
7147:27314+4	1755  D9      	L1755:  EXX                     ; - - -
7148:27318+11	1756  E5      	        PUSH    HL              ; save the pointer to the next literal.
7149:27329+4	1757  D9      	        EXX                     ; - - -
7150:				
7151:27333+11	1758  D5      	        PUSH    DE              ; save pointer to second number
7152:27344+11	1759  E5      	        PUSH    HL              ; save pointer to first number - will be the
7153:				                                ; result pointer on calculator stack.
7154:				
7155:27355+17	175A  CDD816  	        CALL    L16D8           ; routine PREP-ADD
7156:27372+4	175D  47      	        LD      B,A             ; save first exponent byte in B.
7157:27376+4	175E  EB      	        EX      DE,HL           ; switch number pointers.
7158:27380+17	175F  CDD816  	        CALL    L16D8           ; routine PREP-ADD
7159:27397+4	1762  4F      	        LD      C,A             ; save second exponent byte in C.
7160:27401+4	1763  B8      	        CP      B               ; compare the exponent bytes.
7161:27405+7+5	1764  3003    	        JR      NC,L1769        ; forward if second higher to SHIFT-LEN
7162:				
7163:27412+4	1766  78      	        LD      A,B             ; else higher exponent to A
7164:27416+4	1767  41      	        LD      B,C             ; lower exponent to B
7165:27420+4	1768  EB      	        EX      DE,HL           ; switch the number pointers.
7166:				
7167:				;; SHIFT-LEN
7168:27424+11	1769  F5      	L1769:  PUSH    AF              ; save higher exponent
7169:27435+4	176A  90      	        SUB     B               ; subtract lower exponent
7170:				
7171:27439+17	176B  CDF716  	        CALL    L16F7           ; routine FETCH-TWO
7172:27456+17	176E  CD1A17  	        CALL    L171A           ; routine SHIFT-FP
7173:				
7174:27473+10	1771  F1      	        POP     AF              ; restore higher exponent.
7175:27483+10	1772  E1      	        POP     HL              ; restore result pointer.
7176:27493+7	1773  77      	        LD      (HL),A          ; insert exponent byte.
7177:27500+11	1774  E5      	        PUSH    HL              ; save result pointer again.
7178:				
7179:				; now perform the 32-bit addition using two 16-bit Z80 add instructions.
7180:				
7181:27511+4	1775  68      	        LD      L,B             ; transfer low bytes of mantissa individually
7182:27515+4	1776  61      	        LD      H,C             ; to HL register
7183:				
7184:27519+11	1777  19      	        ADD     HL,DE           ; the actual binary addition of lower bytes
7185:				
7186:				; now the two higher byte pairs that are in the alternate register sets.
7187:				
7188:27530+4	1778  D9      	        EXX                     ; switch in set 
7189:27534+4	1779  EB      	        EX      DE,HL           ; transfer high mantissa bytes to HL register.
7190:				
7191:27538+15	177A  ED4A    	        ADC     HL,BC           ; the actual addition of higher bytes with
7192:				                                ; any carry from first stage.
7193:				
7194:27553+4	177C  EB      	        EX      DE,HL           ; result in DE, sign bytes ($FF or $00) to HL
7195:				
7196:				; now consider the two sign bytes
7197:				
7198:27557+4	177D  7C      	        LD      A,H             ; fetch sign byte of num1
7199:				
7200:27561+4	177E  8D      	        ADC     A,L             ; add including any carry from mantissa 
7201:				                                ; addition. 00 or 01 or FE or FF
7202:				
7203:27565+4	177F  6F      	        LD      L,A             ; result in L.
7204:				
7205:				; possible outcomes of signs and overflow from mantissa are
7206:				;
7207:				;  H +  L + carry =  L    RRA  XOR L  RRA
7208:				; ------------------------------------------------------------
7209:				; 00 + 00         = 00    00   00
7210:				; 00 + 00 + carry = 01    00   01     carry
7211:				; FF + FF         = FE C  FF   01     carry
7212:				; FF + FF + carry = FF C  FF   00
7213:				; FF + 00         = FF    FF   00
7214:				; FF + 00 + carry = 00 C  80   80
7215:				
7216:27569+4	1780  1F      	        RRA                     ; C->76543210->C
7217:27573+4	1781  AD      	        XOR     L               ; set bit 0 if shifting required.
7218:				
7219:27577+4	1782  D9      	        EXX                     ; switch back to main set
7220:27581+4	1783  EB      	        EX      DE,HL           ; full mantissa result now in D'E'D E registers.
7221:27585+10	1784  E1      	        POP     HL              ; restore pointer to result exponent on 
7222:				                                ; the calculator stack.
7223:				
7224:27595+4	1785  1F      	        RRA                     ; has overflow occurred ?
7225:27599+7+5	1786  3008    	        JR      NC,L1790        ; skip forward if not to TEST-NEG
7226:				
7227:				; if the addition of two positive mantissas produced overflow or if the
7228:				; addition of two negative mantissas did not then the result exponent has to
7229:				; be incremented and the mantissa shifted one place to the right.
7230:				
7231:27606+7	1788  3E01    	        LD      A,$01           ; one shift required.
7232:27613+17	178A  CD1A17  	        CALL    L171A           ; routine SHIFT-FP performs a single shift 
7233:				                                ; rounding any lost bit
7234:27630+11	178D  34      	        INC     (HL)            ; increment the exponent.
7235:27641+7+5	178E  2823    	        JR      Z,L17B3         ; forward to ADD-REP-6 if the exponent
7236:				                                ; wraps round from FF to zero as number is too
7237:				                                ; big for the system.
7238:				
7239:				; at this stage the exponent on the calculator stack is correct.
7240:				
7241:				;; TEST-NEG
7242:27648+4	1790  D9      	L1790:  EXX                     ; switch in the alternate set.
7243:27652+4	1791  7D      	        LD      A,L             ; load result sign to accumulator.
7244:27656+7	1792  E680    	        AND     $80             ; isolate bit 7 from sign byte setting zero
7245:				                                ; flag if positive.
7246:27663+4	1794  D9      	        EXX                     ; back to main set.
7247:				
7248:27667+6	1795  23      	        INC     HL              ; point to first byte of mantissa
7249:27673+7	1796  77      	        LD      (HL),A          ; insert $00 positive or $80 negative at 
7250:				                                ; position on calculator stack.
7251:				
7252:27680+6	1797  2B      	        DEC     HL              ; point to exponent again.
7253:27686+7+5	1798  281F    	        JR      Z,L17B9         ; forward if positive to GO-NC-MLT
7254:				
7255:				; a negative number has to be twos-complemented before being placed on stack.
7256:				
7257:27693+4	179A  7B      	        LD      A,E             ; fetch lowest (rightmost) mantissa byte.
7258:27697+8	179B  ED44    	        NEG                     ; Negate
7259:27705+4	179D  3F      	        CCF                     ; Complement Carry Flag
7260:27709+4	179E  5F      	        LD      E,A             ; place back in register
7261:				
7262:27713+4	179F  7A      	        LD      A,D             ; ditto
7263:27717+4	17A0  2F      	        CPL                     ;
7264:27721+7	17A1  CE00    	        ADC     A,$00           ;
7265:27728+4	17A3  57      	        LD      D,A             ;
7266:				
7267:27732+4	17A4  D9      	        EXX                     ; switch to higher (leftmost) 16 bits.
7268:				
7269:27736+4	17A5  7B      	        LD      A,E             ; ditto
7270:27740+4	17A6  2F      	        CPL                     ;
7271:27744+7	17A7  CE00    	        ADC     A,$00           ;
7272:27751+4	17A9  5F      	        LD      E,A             ;
7273:				
7274:27755+4	17AA  7A      	        LD      A,D             ; ditto
7275:27759+4	17AB  2F      	        CPL                     ;
7276:27763+7	17AC  CE00    	        ADC     A,$00           ;
7277:27770+7+5	17AE  3007    	        JR      NC,L17B7        ; forward without overflow to END-COMPL
7278:				
7279:				; else entire mantissa is now zero.  00 00 00 00
7280:				
7281:27777+4	17B0  1F      	        RRA                     ; set mantissa to 80 00 00 00
7282:27781+4	17B1  D9      	        EXX                     ; switch.
7283:27785+11	17B2  34      	        INC     (HL)            ; increment the exponent.
7284:				
7285:				;; ADD-REP-6
7286:27796+10	17B3  CA8018  	L17B3:  JP      Z,L1880         ; jump forward if exponent now zero to REPORT-6
7287:				                                ; 'Number too big'
7288:				
7289:27806+4	17B6  D9      	        EXX                     ; switch back to alternate set.
7290:				
7291:				;; END-COMPL
7292:27810+4	17B7  57      	L17B7:  LD      D,A             ; put first byte of mantissa back in DE.
7293:27814+4	17B8  D9      	        EXX                     ; switch to main set.
7294:				
7295:				;; GO-NC-MLT
7296:27818+4	17B9  AF      	L17B9:  XOR     A               ; clear carry flag and
7297:				                                ; clear accumulator so no extra bits carried
7298:				                                ; forward as occurs in multiplication.
7299:				
7300:27822+12	17BA  186C    	        JR      L1828           ; forward to common code at TEST-NORM 
7301:				                                ; but should go straight to NORMALIZE.
7302:				
7303:				
7304:				; ----------------------------------------------
7305:				; THE 'PREPARE TO MULTIPLY OR DIVIDE' SUBROUTINE
7306:				; ----------------------------------------------
7307:				; this routine is called twice from multiplication and twice from division
7308:				; to prepare each of the two numbers for the operation.
7309:				; Initially the accumulator holds zero and after the second invocation bit 7
7310:				; of the accumulator will be the sign bit of the result.
7311:				
7312:				;; PREP-M/D
7313:27834+4	17BC  37      	L17BC:  SCF                     ; set carry flag to signal number is zero.
7314:27838+11	17BD  35      	        DEC     (HL)            ; test exponent
7315:27849+11	17BE  34      	        INC     (HL)            ; for zero.
7316:27860+5+6	17BF  C8      	        RET     Z               ; return if zero with carry flag set.
7317:				
7318:27865+6	17C0  23      	        INC     HL              ; address first mantissa byte.
7319:27871+7	17C1  AE      	        XOR     (HL)            ; exclusive or the running sign bit.
7320:27878+15	17C2  CBFE    	        SET     7,(HL)          ; set the implied bit.
7321:27893+6	17C4  2B      	        DEC     HL              ; point to exponent byte.
7322:27899+10	17C5  C9      	        RET                     ; return.
7323:				
7324:				; ------------------------------
7325:				; THE 'MULTIPLICATION' OPERATION
7326:				; ------------------------------
7327:				;
7328:				;
7329:				
7330:				;; multiply
7331:27909+4	17C6  AF      	L17C6:  XOR     A               ; reset bit 7 of running sign flag.
7332:27913+17	17C7  CDBC17  	        CALL    L17BC           ; routine PREP-M/D
7333:27930+5+6	17CA  D8      	        RET     C               ; return if number is zero.
7334:				                                ; zero * anything = zero.
7335:				
7336:27935+4	17CB  D9      	        EXX                     ; - - -
7337:27939+11	17CC  E5      	        PUSH    HL              ; save pointer to 'next literal'
7338:27950+4	17CD  D9      	        EXX                     ; - - -
7339:				
7340:27954+11	17CE  D5      	        PUSH    DE              ; save pointer to second number 
7341:				
7342:27965+4	17CF  EB      	        EX      DE,HL           ; make HL address second number.
7343:				
7344:27969+17	17D0  CDBC17  	        CALL    L17BC           ; routine PREP-M/D
7345:				
7346:27986+4	17D3  EB      	        EX      DE,HL           ; HL first number, DE - second number
7347:27990+7+5	17D4  385A    	        JR      C,L1830         ; forward with carry to ZERO-RSLT
7348:				                                ; anything * zero = zero.
7349:				
7350:27997+11	17D6  E5      	        PUSH    HL              ; save pointer to first number.
7351:				
7352:28008+17	17D7  CDF716  	        CALL    L16F7           ; routine FETCH-TWO fetches two mantissas from
7353:				                                ; calc stack to B'C'C,B  D'E'D E
7354:				                                ; (HL will be overwritten but the result sign
7355:				                                ; in A is inserted on the calculator stack)
7356:				
7357:28025+4	17DA  78      	        LD      A,B             ; transfer low mantissa byte of first number
7358:28029+4	17DB  A7      	        AND     A               ; clear carry.
7359:28033+15	17DC  ED62    	        SBC     HL,HL           ; a short form of LD HL,$0000 to take lower
7360:				                                ; two bytes of result. (2 program bytes)
7361:28048+4	17DE  D9      	        EXX                     ; switch in alternate set
7362:28052+11	17DF  E5      	        PUSH    HL              ; preserve HL
7363:28063+15	17E0  ED62    	        SBC     HL,HL           ; set HL to zero also to take higher two bytes
7364:				                                ; of the result and clear carry.
7365:28078+4	17E2  D9      	        EXX                     ; switch back.
7366:				
7367:28082+7	17E3  0621    	        LD      B,$21           ; register B can now be used to count thirty 
7368:				                                ; three shifts.
7369:28089+12	17E5  1811    	        JR      L17F8           ; forward to loop entry point STRT-MLT
7370:				
7371:				; ---
7372:				
7373:				; The multiplication loop is entered at  STRT-LOOP.
7374:				
7375:				;; MLT-LOOP
7376:28101+7+5	17E7  3005    	L17E7:  JR      NC,L17EE        ; forward if no carry to NO-ADD
7377:				
7378:				                                ; else add in the multiplicand.
7379:				
7380:28108+11	17E9  19      	        ADD     HL,DE           ; add the two low bytes to result
7381:28119+4	17EA  D9      	        EXX                     ; switch to more significant bytes.
7382:28123+15	17EB  ED5A    	        ADC     HL,DE           ; add high bytes of multiplicand and any carry.
7383:28138+4	17ED  D9      	        EXX                     ; switch to main set.
7384:				
7385:				; in either case shift result right into B'C'C A
7386:				
7387:				;; NO-ADD
7388:28142+4	17EE  D9      	L17EE:  EXX                     ; switch to alternate set
7389:28146+8	17EF  CB1C    	        RR      H               ; C > 76543210 > C
7390:28154+8	17F1  CB1D    	        RR      L               ; C > 76543210 > C
7391:28162+4	17F3  D9      	        EXX                     ;
7392:28166+8	17F4  CB1C    	        RR      H               ; C > 76543210 > C
7393:28174+8	17F6  CB1D    	        RR      L               ; C > 76543210 > C
7394:				
7395:				;; STRT-MLT
7396:28182+4	17F8  D9      	L17F8:  EXX                     ; switch in alternate set.
7397:28186+8	17F9  CB18    	        RR      B               ; C > 76543210 > C
7398:28194+8	17FB  CB19    	        RR      C               ; C > 76543210 > C
7399:28202+4	17FD  D9      	        EXX                     ; now main set
7400:28206+8	17FE  CB19    	        RR      C               ; C > 76543210 > C
7401:28214+4	1800  1F      	        RRA                     ; C > 76543210 > C
7402:28218+8+5	1801  10E4    	        DJNZ    L17E7           ; loop back 33 times to MLT-LOOP
7403:				
7404:				;
7405:				
7406:28226+4	1803  EB      	        EX      DE,HL           ;
7407:28230+4	1804  D9      	        EXX                     ;
7408:28234+4	1805  EB      	        EX      DE,HL           ;
7409:28238+4	1806  D9      	        EXX                     ;
7410:28242+10	1807  C1      	        POP     BC              ;
7411:28252+10	1808  E1      	        POP     HL              ;
7412:28262+4	1809  78      	        LD      A,B             ;
7413:28266+4	180A  81      	        ADD     A,C             ;
7414:28270+7+5	180B  2001    	        JR      NZ,L180E        ; forward to MAKE-EXPT
7415:				
7416:28277+4	180D  A7      	        AND     A               ;
7417:				
7418:				;; MAKE-EXPT
7419:28281+4	180E  3D      	L180E:  DEC     A               ;
7420:28285+4	180F  3F      	        CCF                     ; Complement Carry Flag
7421:				
7422:				;; DIVN-EXPT
7423:28289+4	1810  17      	L1810:  RLA                     ;
7424:28293+4	1811  3F      	        CCF                     ; Complement Carry Flag
7425:28297+4	1812  1F      	        RRA                     ;
7426:28301+10	1813  F21918  	        JP      P,L1819         ; forward to OFLW1-CLR
7427:				
7428:28311+7+5	1816  3068    	        JR      NC,L1880        ; forward to REPORT-6
7429:				
7430:28318+4	1818  A7      	        AND     A               ;
7431:				
7432:				;; OFLW1-CLR
7433:28322+4	1819  3C      	L1819:  INC     A               ;
7434:28326+7+5	181A  2008    	        JR      NZ,L1824        ; forward to OFLW2-CLR
7435:				
7436:28333+7+5	181C  3806    	        JR      C,L1824         ; forward to OFLW2-CLR
7437:				
7438:28340+4	181E  D9      	        EXX                     ;
7439:28344+8	181F  CB7A    	        BIT     7,D             ;
7440:28352+4	1821  D9      	        EXX                     ;
7441:28356+7+5	1822  205C    	        JR      NZ,L1880        ; forward to REPORT-6
7442:				
7443:				;; OFLW2-CLR
7444:28363+7	1824  77      	L1824:  LD      (HL),A          ;
7445:28370+4	1825  D9      	        EXX                     ;
7446:28374+4	1826  78      	        LD      A,B             ;
7447:28378+4	1827  D9      	        EXX                     ;
7448:				
7449:				; addition joins here with carry flag clear.
7450:				
7451:				;; TEST-NORM
7452:28382+7+5	1828  3015    	L1828:  JR      NC,L183F        ; forward to NORMALIZE
7453:				
7454:28389+7	182A  7E      	        LD      A,(HL)          ;
7455:28396+4	182B  A7      	        AND     A               ;
7456:				
7457:				;; NEAR-ZERO
7458:28400+7	182C  3E80    	L182C:  LD      A,$80           ; prepare to rescue the most significant bit 
7459:				                                ; of the mantissa if it is set.
7460:28407+7+5	182E  2801    	        JR      Z,L1831         ; skip forward to SKIP-ZERO
7461:				
7462:				;; ZERO-RSLT
7463:28414+4	1830  AF      	L1830:  XOR     A               ; make mask byte zero signaling set five
7464:				                                ; bytes to zero.
7465:				
7466:				;; SKIP-ZERO
7467:28418+4	1831  D9      	L1831:  EXX                     ; switch in alternate set
7468:28422+4	1832  A2      	        AND     D               ; isolate most significant bit (if A is $80).
7469:				
7470:28426+17	1833  CD3817  	        CALL    L1738           ; routine ZEROS-4/5 sets mantissa without 
7471:				                                ; affecting any flags.
7472:				
7473:28443+4	1836  07      	        RLCA                    ; test if MSB set. bit 7 goes to bit 0.
7474:				                                ; either $00 -> $00 or $80 -> $01
7475:28447+7	1837  77      	        LD      (HL),A          ; make exponent $01 (lowest) or $00 zero
7476:28454+7+5	1838  382E    	        JR      C,L1868         ; forward if first case to OFLOW-CLR
7477:				
7478:28461+6	183A  23      	        INC     HL              ; address first mantissa byte on the
7479:				                                ; calculator stack.
7480:28467+7	183B  77      	        LD      (HL),A          ; insert a zero for the sign bit.
7481:28474+6	183C  2B      	        DEC     HL              ; point to zero exponent
7482:28480+12	183D  1829    	        JR      L1868           ; forward to OFLOW-CLR
7483:				
7484:				; ---
7485:				
7486:				; this branch is common to addition and multiplication with the mantissa
7487:				; result still in registers D'E'D E .
7488:				
7489:				;; NORMALIZE
7490:28492+7	183F  0620    	L183F:  LD      B,$20           ; a maximum of thirty-two left shifts will be 
7491:				                                ; needed.
7492:				
7493:				;; SHIFT-ONE
7494:28499+4	1841  D9      	L1841:  EXX                     ; address higher 16 bits.
7495:28503+8	1842  CB7A    	        BIT     7,D             ; test the leftmost bit
7496:28511+4	1844  D9      	        EXX                     ; address lower 16 bits.
7497:				
7498:28515+7+5	1845  2012    	        JR      NZ,L1859        ; forward if leftmost bit was set to NORML-NOW
7499:				
7500:28522+4	1847  07      	        RLCA                    ; this holds zero from addition, 33rd bit 
7501:				                                ; from multiplication.
7502:				
7503:28526+8	1848  CB13    	        RL      E               ; C < 76543210 < C
7504:28534+8	184A  CB12    	        RL      D               ; C < 76543210 < C
7505:				
7506:28542+4	184C  D9      	        EXX                     ; address higher 16 bits.
7507:				
7508:28546+8	184D  CB13    	        RL      E               ; C < 76543210 < C
7509:28554+8	184F  CB12    	        RL      D               ; C < 76543210 < C
7510:				
7511:28562+4	1851  D9      	        EXX                     ; switch to main set.
7512:				
7513:28566+11	1852  35      	        DEC     (HL)            ; decrement the exponent byte on the calculator
7514:				                                ; stack.
7515:				
7516:28577+7+5	1853  28D7    	        JR      Z,L182C         ; back if exponent becomes zero to NEAR-ZERO
7517:				                                ; it's just possible that the last rotation
7518:				                                ; set bit 7 of D. We shall see.
7519:				
7520:28584+8+5	1855  10EA    	        DJNZ    L1841           ; loop back to SHIFT-ONE
7521:				
7522:				; if thirty-two left shifts were performed without setting the most significant 
7523:				; bit then the result is zero.
7524:				
7525:28592+12	1857  18D7    	        JR      L1830           ; back to ZERO-RSLT
7526:				
7527:				; ---
7528:				
7529:				;; NORML-NOW
7530:28604+4	1859  17      	L1859:  RLA                     ; for the addition path, A is always zero.
7531:				                                ; for the mult path, ...
7532:				
7533:28608+7+5	185A  300C    	        JR      NC,L1868        ; forward to OFLOW-CLR
7534:				
7535:				; this branch is taken only with multiplication.
7536:				
7537:28615+17	185C  CD4117  	        CALL    L1741           ; routine ADD-BACK
7538:				
7539:28632+7+5	185F  2007    	        JR      NZ,L1868        ; forward to OFLOW-CLR
7540:				
7541:28639+4	1861  D9      	        EXX                     ;
7542:28643+7	1862  1680    	        LD      D,$80           ;
7543:28650+4	1864  D9      	        EXX                     ;
7544:28654+11	1865  34      	        INC     (HL)            ;
7545:28665+7+5	1866  2818    	        JR      Z,L1880         ; forward to REPORT-6
7546:				
7547:				; now transfer the mantissa from the register sets to the calculator stack
7548:				; incorporating the sign bit already there.
7549:				
7550:				;; OFLOW-CLR
7551:28672+11	1868  E5      	L1868:  PUSH    HL              ; save pointer to exponent on stack.
7552:28683+6	1869  23      	        INC     HL              ; address first byte of mantissa which was 
7553:				                                ; previously loaded with sign bit $00 or $80.
7554:				
7555:28689+4	186A  D9      	        EXX                     ; - - -
7556:28693+11	186B  D5      	        PUSH    DE              ; push the most significant two bytes.
7557:28704+4	186C  D9      	        EXX                     ; - - -
7558:				
7559:28708+10	186D  C1      	        POP     BC              ; pop - true mantissa is now BCDE.
7560:				
7561:				; now pick up the sign bit.
7562:				
7563:28718+4	186E  78      	        LD      A,B             ; first mantissa byte to A 
7564:28722+4	186F  17      	        RLA                     ; rotate out bit 7 which is set
7565:28726+15	1870  CB16    	        RL      (HL)            ; rotate sign bit on stack into carry.
7566:28741+4	1872  1F      	        RRA                     ; rotate sign bit into bit 7 of mantissa.
7567:				
7568:				; and transfer mantissa from main registers to calculator stack.
7569:				
7570:28745+7	1873  77      	        LD      (HL),A          ;
7571:28752+6	1874  23      	        INC     HL              ;
7572:28758+7	1875  71      	        LD      (HL),C          ;
7573:28765+6	1876  23      	        INC     HL              ;
7574:28771+7	1877  72      	        LD      (HL),D          ;
7575:28778+6	1878  23      	        INC     HL              ;
7576:28784+7	1879  73      	        LD      (HL),E          ;
7577:				
7578:28791+10	187A  E1      	        POP     HL              ; restore pointer to num1 now result.
7579:28801+10	187B  D1      	        POP     DE              ; restore pointer to num2 now STKEND.
7580:				
7581:28811+4	187C  D9      	        EXX                     ; - - -
7582:28815+10	187D  E1      	        POP     HL              ; restore pointer to next calculator literal.
7583:28825+4	187E  D9      	        EXX                     ; - - -
7584:				
7585:28829+10	187F  C9      	        RET                     ; return.
7586:				
7587:				; ---
7588:				
7589:				;; REPORT-6
7590:28839+11	1880  CF      	L1880:  RST     08H             ; ERROR-1
7591:     -	1881  05      	        DEFB    $05             ; Error Report: Arithmetic overflow.
7592:				
7593:				; ------------------------
7594:				; THE 'DIVISION' OPERATION
7595:				; ------------------------
7596:				;   "Of all the arithmetic subroutines, division is the most complicated and
7597:				;   the least understood.  It is particularly interesting to note that the 
7598:				;   Sinclair programmer himself has made a mistake in his programming ( or has
7599:				;   copied over someone else's mistake!) for
7600:				;   PRINT PEEK 6352 [ $18D0 ] ('unimproved' ROM, 6351 [ $18CF ] )
7601:				;   should give 218 not 225."
7602:				;   - Dr. Ian Logan, Syntax magazine Jul/Aug 1982.
7603:				;   [  i.e. the jump should be made to div-34th ]
7604:				
7605:				;   First check for division by zero.
7606:				
7607:				;; division
7608:28850+4	1882  EB      	L1882:  EX      DE,HL           ; consider the second number first. 
7609:28854+4	1883  AF      	        XOR     A               ; set the running sign flag.
7610:28858+17	1884  CDBC17  	        CALL    L17BC           ; routine PREP-M/D
7611:28875+7+5	1887  38F7    	        JR      C,L1880         ; back if zero to REPORT-6
7612:				                                ; 'Arithmetic overflow'
7613:				
7614:28882+4	1889  EB      	        EX      DE,HL           ; now prepare first number and check for zero.
7615:28886+17	188A  CDBC17  	        CALL    L17BC           ; routine PREP-M/D
7616:28903+5+6	188D  D8      	        RET     C               ; return if zero, 0/anything is zero.
7617:				
7618:28908+4	188E  D9      	        EXX                     ; - - -
7619:28912+11	188F  E5      	        PUSH    HL              ; save pointer to the next calculator literal.
7620:28923+4	1890  D9      	        EXX                     ; - - -
7621:				
7622:28927+11	1891  D5      	        PUSH    DE              ; save pointer to divisor - will be STKEND.
7623:28938+11	1892  E5      	        PUSH    HL              ; save pointer to dividend - will be result.
7624:				
7625:28949+17	1893  CDF716  	        CALL    L16F7           ; routine FETCH-TWO fetches the two numbers
7626:				                                ; into the registers H'B'C'C B
7627:				                                ;                    L'D'E'D E
7628:28966+4	1896  D9      	        EXX                     ; - - -
7629:28970+11	1897  E5      	        PUSH    HL              ; save the two exponents.
7630:				
7631:28981+4	1898  60      	        LD      H,B             ; transfer the dividend to H'L'H L
7632:28985+4	1899  69      	        LD      L,C             ; 
7633:28989+4	189A  D9      	        EXX                     ;
7634:28993+4	189B  61      	        LD      H,C             ;
7635:28997+4	189C  68      	        LD      L,B             ; 
7636:				
7637:29001+4	189D  AF      	        XOR     A               ; clear carry bit and accumulator.
7638:29005+7	189E  06DF    	        LD      B,$DF           ; count upwards from -33 decimal
7639:29012+12	18A0  1810    	        JR      L18B2           ; forward to mid-loop entry point DIV-START
7640:				
7641:				; ---
7642:				
7643:				;; DIV-LOOP
7644:29024+4	18A2  17      	L18A2:  RLA                     ; multiply partial quotient by two
7645:29028+8	18A3  CB11    	        RL      C               ; setting result bit from carry.
7646:29036+4	18A5  D9      	        EXX                     ;
7647:29040+8	18A6  CB11    	        RL      C               ;
7648:29048+8	18A8  CB10    	        RL      B               ;
7649:29056+4	18AA  D9      	        EXX                     ;
7650:				
7651:				;; div-34th
7652:29060+11	18AB  29      	L18AB:  ADD     HL,HL           ;
7653:29071+4	18AC  D9      	        EXX                     ;
7654:29075+15	18AD  ED6A    	        ADC     HL,HL           ;
7655:29090+4	18AF  D9      	        EXX                     ;
7656:29094+7+5	18B0  3810    	        JR      C,L18C2         ; forward to SUBN-ONLY
7657:				
7658:				;; DIV-START
7659:29101+15	18B2  ED52    	L18B2:  SBC     HL,DE           ; subtract divisor part.
7660:29116+4	18B4  D9      	        EXX                     ;
7661:29120+15	18B5  ED52    	        SBC     HL,DE           ;
7662:29135+4	18B7  D9      	        EXX                     ;
7663:29139+7+5	18B8  300F    	        JR      NC,L18C9        ; forward if subtraction goes to NO-RSTORE
7664:				
7665:29146+11	18BA  19      	        ADD     HL,DE           ; else restore     
7666:29157+4	18BB  D9      	        EXX                     ;
7667:29161+15	18BC  ED5A    	        ADC     HL,DE           ;
7668:29176+4	18BE  D9      	        EXX                     ;
7669:29180+4	18BF  A7      	        AND     A               ; clear carry
7670:29184+12	18C0  1808    	        JR      L18CA           ; forward to COUNT-ONE
7671:				
7672:				; ---
7673:				
7674:				;; SUBN-ONLY
7675:29196+4	18C2  A7      	L18C2:  AND     A               ;
7676:29200+15	18C3  ED52    	        SBC     HL,DE           ;
7677:29215+4	18C5  D9      	        EXX                     ;
7678:29219+15	18C6  ED52    	        SBC     HL,DE           ;
7679:29234+4	18C8  D9      	        EXX                     ;
7680:				
7681:				;; NO-RSTORE
7682:29238+4	18C9  37      	L18C9:  SCF                     ; set carry flag
7683:				
7684:				;; COUNT-ONE
7685:29242+4	18CA  04      	L18CA:  INC     B               ; increment the counter
7686:29246+10	18CB  FAA218  	        JP      M,L18A2         ; back while still minus to DIV-LOOP
7687:				
7688:29256+11	18CE  F5      	        PUSH    AF              ;
7689:29267+7+5	18CF  28E1    	        JR      Z,L18B2         ; back to DIV-START
7690:				
7691:				; "This jump is made to the wrong place. No 34th bit will ever be obtained
7692:				; without first shifting the dividend. Hence important results like 1/10 and
7693:				; 1/1000 are not rounded up as they should be. Rounding up never occurs when
7694:				; it depends on the 34th bit. The jump should be made to div-34th above."
7695:				; - Dr. Frank O'Hara, "The Complete Spectrum ROM Disassembly", 1983,
7696:				; published by Melbourne House.
7697:				; (Note. on the ZX81 this would be JR Z,L18AB)
7698:				;
7699:				; However if you make this change, then while (1/2=.5) will now evaluate as
7700:				; true, (.25=1/4), which did evaluate as true, no longer does.
7701:				
7702:29274+4	18D1  5F      	        LD      E,A             ;
7703:29278+4	18D2  51      	        LD      D,C             ;
7704:29282+4	18D3  D9      	        EXX                     ;
7705:29286+4	18D4  59      	        LD      E,C             ;
7706:29290+4	18D5  50      	        LD      D,B             ;
7707:				
7708:29294+10	18D6  F1      	        POP     AF              ;
7709:29304+8	18D7  CB18    	        RR      B               ;
7710:29312+10	18D9  F1      	        POP     AF              ;
7711:29322+8	18DA  CB18    	        RR      B               ;
7712:				
7713:29330+4	18DC  D9      	        EXX                     ;
7714:29334+10	18DD  C1      	        POP     BC              ;
7715:29344+10	18DE  E1      	        POP     HL              ;
7716:29354+4	18DF  78      	        LD      A,B             ;
7717:29358+4	18E0  91      	        SUB     C               ;
7718:29362+10	18E1  C31018  	        JP      L1810           ; jump back to DIVN-EXPT
7719:				
7720:				; ------------------------------------------------
7721:				; THE 'INTEGER TRUNCATION TOWARDS ZERO' SUBROUTINE
7722:				; ------------------------------------------------
7723:				;
7724:				
7725:				;; truncate
7726:29372+7	18E4  7E      	L18E4:  LD      A,(HL)          ; fetch exponent
7727:29379+7	18E5  FE81    	        CP      $81             ; compare to +1  
7728:29386+7+5	18E7  3006    	        JR      NC,L18EF        ; forward, if 1 or more, to T-GR-ZERO
7729:				
7730:				; else the number is smaller than plus or minus 1 and can be made zero.
7731:				
7732:29393+10	18E9  3600    	        LD      (HL),$00        ; make exponent zero.
7733:29403+7	18EB  3E20    	        LD      A,$20           ; prepare to set 32 bits of mantissa to zero.
7734:29410+12	18ED  1805    	        JR      L18F4           ; forward to NIL-BYTES
7735:				
7736:				; ---
7737:				
7738:				;; T-GR-ZERO
7739:29422+7	18EF  D6A0    	L18EF:  SUB     $A0             ; subtract +32 from exponent
7740:29429+5+6	18F1  F0      	        RET     P               ; return if result is positive as all 32 bits 
7741:				                                ; of the mantissa relate to the integer part.
7742:				                                ; The floating point is somewhere to the right 
7743:				                                ; of the mantissa
7744:				
7745:29434+8	18F2  ED44    	        NEG                     ; else negate to form number of rightmost bits 
7746:				                                ; to be blanked.
7747:				
7748:				; for instance, disregarding the sign bit, the number 3.5 is held as 
7749:				; exponent $82 mantissa .11100000 00000000 00000000 00000000
7750:				; we need to set $82 - $A0 = $E2 NEG = $1E (thirty) bits to zero to form the 
7751:				; integer.
7752:				; The sign of the number is never considered as the first bit of the mantissa
7753:				; must be part of the integer.
7754:				
7755:				;; NIL-BYTES
7756:29442+11	18F4  D5      	L18F4:  PUSH    DE              ; save pointer to STKEND
7757:29453+4	18F5  EB      	        EX      DE,HL           ; HL points at STKEND
7758:29457+6	18F6  2B      	        DEC     HL              ; now at last byte of mantissa.
7759:29463+4	18F7  47      	        LD      B,A             ; Transfer bit count to B register.
7760:29467+8	18F8  CB38    	        SRL     B               ; divide by 
7761:29475+8	18FA  CB38    	        SRL     B               ; eight
7762:29483+8	18FC  CB38    	        SRL     B               ;
7763:29491+7+5	18FE  2805    	        JR      Z,L1905         ; forward if zero to BITS-ZERO
7764:				
7765:				; else the original count was eight or more and whole bytes can be blanked.
7766:				
7767:				;; BYTE-ZERO
7768:29498+10	1900  3600    	L1900:  LD      (HL),$00        ; set eight bits to zero.
7769:29508+6	1902  2B      	        DEC     HL              ; point to more significant byte of mantissa.
7770:29514+8+5	1903  10FB    	        DJNZ    L1900           ; loop back to BYTE-ZERO
7771:				
7772:				; now consider any residual bits.
7773:				
7774:				;; BITS-ZERO
7775:29522+7	1905  E607    	L1905:  AND     $07             ; isolate the remaining bits
7776:29529+7+5	1907  2809    	        JR      Z,L1912         ; forward if none to IX-END
7777:				
7778:29536+4	1909  47      	        LD      B,A             ; transfer bit count to B counter.
7779:29540+7	190A  3EFF    	        LD      A,$FF           ; form a mask 11111111
7780:				
7781:				;; LESS-MASK
7782:29547+8	190C  CB27    	L190C:  SLA     A               ; 1 <- 76543210 <- o     slide mask leftwards.
7783:29555+8+5	190E  10FC    	        DJNZ    L190C           ; loop back for bit count to LESS-MASK
7784:				
7785:29563+7	1910  A6      	        AND     (HL)            ; lose the unwanted rightmost bits
7786:29570+7	1911  77      	        LD      (HL),A          ; and place in mantissa byte.
7787:				
7788:				;; IX-END
7789:29577+4	1912  EB      	L1912:  EX      DE,HL           ; restore result pointer from DE. 
7790:29581+10	1913  D1      	        POP     DE              ; restore STKEND from stack.
7791:29591+10	1914  C9      	        RET                     ; return.
7792:				
7793:				
7794:				;********************************
7795:				;**  FLOATING-POINT CALCULATOR **
7796:				;********************************
7797:				
7798:				; As a general rule the calculator avoids using the IY register.
7799:				; Exceptions are val and str$.
7800:				; So an assembly language programmer who has disabled interrupts to use IY
7801:				; for other purposes can still use the calculator for mathematical
7802:				; purposes.
7803:				
7804:				
7805:				; ------------------------
7806:				; THE 'TABLE OF CONSTANTS'
7807:				; ------------------------
7808:				; The ZX81 has only floating-point number representation.
7809:				; Both the ZX80 and the ZX Spectrum have integer numbers in some form.
7810:				
7811:				;; stk-zero                                                 00 00 00 00 00
7812:     -	1915  00      	L1915:  DEFB    $00             ;;Bytes: 1
7813:     -	1916  B0      	        DEFB    $B0             ;;Exponent $00
7814:     -	1917  00      	        DEFB    $00             ;;(+00,+00,+00)
7815:				
7816:				;; stk-one                                                  81 00 00 00 00
7817:     -	1918  31      	L1918:  DEFB    $31             ;;Exponent $81, Bytes: 1
7818:     -	1919  00      	        DEFB    $00             ;;(+00,+00,+00)
7819:				
7820:				
7821:				;; stk-half                                                 80 00 00 00 00
7822:     -	191A  30      	L191A:  DEFB    $30             ;;Exponent: $80, Bytes: 1
7823:     -	191B  00      	        DEFB    $00             ;;(+00,+00,+00)
7824:				
7825:				
7826:				;; stk-pi/2                                                 81 49 0F DA A2
7827:     -	191C  F1      	L191C:  DEFB    $F1             ;;Exponent: $81, Bytes: 4
7828:     -	191D  490FDAA2	        DEFB    $49,$0F,$DA,$A2 ;;
7829:				
7830:				;; stk-ten                                                  84 20 00 00 00
7831:     -	1921  34      	L1921:  DEFB    $34             ;;Exponent: $84, Bytes: 1
7832:     -	1922  20      	        DEFB    $20             ;;(+00,+00,+00)
7833:				
7834:				
7835:				; ------------------------
7836:				; THE 'TABLE OF ADDRESSES'
7837:				; ------------------------
7838:				;
7839:				; starts with binary operations which have two operands and one result.
7840:				; three pseudo binary operations first.
7841:				
7842:				;; tbl-addrs
7843:     -	1923  2F1C    	L1923:  DEFW    L1C2F           ; $00 Address: $1C2F - jump-true
7844:     -	1925  721A    	        DEFW    L1A72           ; $01 Address: $1A72 - exchange
7845:     -	1927  E319    	        DEFW    L19E3           ; $02 Address: $19E3 - delete
7846:				
7847:				; true binary operations.
7848:				
7849:     -	1929  4C17    	        DEFW    L174C           ; $03 Address: $174C - subtract
7850:     -	192B  C617    	        DEFW    L17C6           ; $04 Address: $176C - multiply
7851:     -	192D  8218    	        DEFW    L1882           ; $05 Address: $1882 - division
7852:     -	192F  E21D    	        DEFW    L1DE2           ; $06 Address: $1DE2 - to-power
7853:     -	1931  ED1A    	        DEFW    L1AED           ; $07 Address: $1AED - or
7854:				
7855:     -	1933  F31A    	        DEFW    L1AF3           ; $08 Address: $1B03 - no-&-no
7856:     -	1935  031B    	        DEFW    L1B03           ; $09 Address: $1B03 - no-l-eql
7857:     -	1937  031B    	        DEFW    L1B03           ; $0A Address: $1B03 - no-gr-eql
7858:     -	1939  031B    	        DEFW    L1B03           ; $0B Address: $1B03 - nos-neql
7859:     -	193B  031B    	        DEFW    L1B03           ; $0C Address: $1B03 - no-grtr
7860:     -	193D  031B    	        DEFW    L1B03           ; $0D Address: $1B03 - no-less
7861:     -	193F  031B    	        DEFW    L1B03           ; $0E Address: $1B03 - nos-eql
7862:     -	1941  5517    	        DEFW    L1755           ; $0F Address: $1755 - addition
7863:				
7864:     -	1943  F81A    	        DEFW    L1AF8           ; $10 Address: $1AF8 - str-&-no
7865:     -	1945  031B    	        DEFW    L1B03           ; $11 Address: $1B03 - str-l-eql
7866:     -	1947  031B    	        DEFW    L1B03           ; $12 Address: $1B03 - str-gr-eql
7867:     -	1949  031B    	        DEFW    L1B03           ; $13 Address: $1B03 - strs-neql
7868:     -	194B  031B    	        DEFW    L1B03           ; $14 Address: $1B03 - str-grtr
7869:     -	194D  031B    	        DEFW    L1B03           ; $15 Address: $1B03 - str-less
7870:     -	194F  031B    	        DEFW    L1B03           ; $16 Address: $1B03 - strs-eql
7871:     -	1951  621B    	        DEFW    L1B62           ; $17 Address: $1B62 - strs-add
7872:				
7873:				; unary follow
7874:				
7875:     -	1953  A01A    	        DEFW    L1AA0           ; $18 Address: $1AA0 - neg
7876:				
7877:     -	1955  061C    	        DEFW    L1C06           ; $19 Address: $1C06 - code
7878:     -	1957  A41B    	        DEFW    L1BA4           ; $1A Address: $1BA4 - val
7879:     -	1959  111C    	        DEFW    L1C11           ; $1B Address: $1C11 - len
7880:     -	195B  491D    	        DEFW    L1D49           ; $1C Address: $1D49 - sin
7881:     -	195D  3E1D    	        DEFW    L1D3E           ; $1D Address: $1D3E - cos
7882:     -	195F  6E1D    	        DEFW    L1D6E           ; $1E Address: $1D6E - tan
7883:     -	1961  C41D    	        DEFW    L1DC4           ; $1F Address: $1DC4 - asn
7884:     -	1963  D41D    	        DEFW    L1DD4           ; $20 Address: $1DD4 - acs
7885:     -	1965  761D    	        DEFW    L1D76           ; $21 Address: $1D76 - atn
7886:     -	1967  A91C    	        DEFW    L1CA9           ; $22 Address: $1CA9 - ln
7887:     -	1969  5B1C    	        DEFW    L1C5B           ; $23 Address: $1C5B - exp
7888:     -	196B  461C    	        DEFW    L1C46           ; $24 Address: $1C46 - int
7889:     -	196D  DB1D    	        DEFW    L1DDB           ; $25 Address: $1DDB - sqr
7890:     -	196F  AF1A    	        DEFW    L1AAF           ; $26 Address: $1AAF - sgn
7891:     -	1971  AA1A    	        DEFW    L1AAA           ; $27 Address: $1AAA - abs
7892:     -	1973  BE1A    	        DEFW    L1ABE           ; $28 Address: $1A1B - peek
7893:     -	1975  C51A    	        DEFW    L1AC5           ; $29 Address: $1AC5 - usr-no
7894:     -	1977  D51B    	        DEFW    L1BD5           ; $2A Address: $1BD5 - str$
7895:     -	1979  8F1B    	        DEFW    L1B8F           ; $2B Address: $1B8F - chrs
7896:     -	197B  D51A    	        DEFW    L1AD5           ; $2C Address: $1AD5 - not
7897:				
7898:				; end of true unary
7899:				
7900:     -	197D  F619    	        DEFW    L19F6           ; $2D Address: $19F6 - duplicate
7901:     -	197F  371C    	        DEFW    L1C37           ; $2E Address: $1C37 - n-mod-m
7902:				
7903:     -	1981  231C    	        DEFW    L1C23           ; $2F Address: $1C23 - jump
7904:     -	1983  FC19    	        DEFW    L19FC           ; $30 Address: $19FC - stk-data
7905:				
7906:     -	1985  171C    	        DEFW    L1C17           ; $31 Address: $1C17 - dec-jr-nz
7907:     -	1987  DB1A    	        DEFW    L1ADB           ; $32 Address: $1ADB - less-0
7908:     -	1989  CE1A    	        DEFW    L1ACE           ; $33 Address: $1ACE - greater-0
7909:     -	198B  2B00    	        DEFW    L002B           ; $34 Address: $002B - end-calc
7910:     -	198D  181D    	        DEFW    L1D18           ; $35 Address: $1D18 - get-argt
7911:     -	198F  E418    	        DEFW    L18E4           ; $36 Address: $18E4 - truncate
7912:     -	1991  E419    	        DEFW    L19E4           ; $37 Address: $19E4 - fp-calc-2
7913:     -	1993  5A15    	        DEFW    L155A           ; $38 Address: $155A - e-to-fp
7914:				
7915:				; the following are just the next available slots for the 128 compound literals
7916:				; which are in range $80 - $FF.
7917:				
7918:     -	1995  7F1A    	        DEFW    L1A7F           ; $39 Address: $1A7F - series-xx    $80 - $9F.
7919:     -	1997  511A    	        DEFW    L1A51           ; $3A Address: $1A51 - stk-const-xx $A0 - $BF.
7920:     -	1999  631A    	        DEFW    L1A63           ; $3B Address: $1A63 - st-mem-xx    $C0 - $DF.
7921:     -	199B  451A    	        DEFW    L1A45           ; $3C Address: $1A45 - get-mem-xx   $E0 - $FF.
7922:				
7923:				; Aside: 3D - 7F are therefore unused calculator literals.
7924:				;        39 - 7B would be available for expansion.
7925:				
7926:				; -------------------------------
7927:				; THE 'FLOATING POINT CALCULATOR'
7928:				; -------------------------------
7929:				;
7930:				;
7931:				
7932:				;; CALCULATE
7933:29601+17	199D  CD851B  	L199D:  CALL    L1B85           ; routine STK-PNTRS is called to set up the
7934:				                                ; calculator stack pointers for a default
7935:				                                ; unary operation. HL = last value on stack.
7936:				                                ; DE = STKEND first location after stack.
7937:				
7938:				; the calculate routine is called at this point by the series generator...
7939:				
7940:				;; GEN-ENT-1
7941:29618+4	19A0  78      	L19A0:  LD      A,B             ; fetch the Z80 B register to A
7942:29622+13	19A1  321E40  	        LD      ($401E),A       ; and store value in system variable BREG.
7943:				                                ; this will be the counter for dec-jr-nz
7944:				                                ; or if used from fp-calc2 the calculator
7945:				                                ; instruction.
7946:				
7947:				; ... and again later at this point
7948:				
7949:				;; GEN-ENT-2
7950:29635+4	19A4  D9      	L19A4:  EXX                     ; switch sets
7951:29639+19	19A5  E3      	        EX      (SP),HL         ; and store the address of next instruction,
7952:				                                ; the return address, in H'L'.
7953:				                                ; If this is a recursive call then the H'L'
7954:				                                ; of the previous invocation goes on stack.
7955:				                                ; c.f. end-calc.
7956:29658+4	19A6  D9      	        EXX                     ; switch back to main set.
7957:				
7958:				; this is the re-entry looping point when handling a string of literals.
7959:				
7960:				;; RE-ENTRY
7961:29662+20	19A7  ED531C40	L19A7:  LD      ($401C),DE      ; save end of stack in system variable STKEND
7962:29682+4	19AB  D9      	        EXX                     ; switch to alt
7963:29686+7	19AC  7E      	        LD      A,(HL)          ; get next literal
7964:29693+6	19AD  23      	        INC     HL              ; increase pointer'
7965:				
7966:				; single operation jumps back to here
7967:				
7968:				;; SCAN-ENT
7969:29699+11	19AE  E5      	L19AE:  PUSH    HL              ; save pointer on stack   *
7970:29710+4	19AF  A7      	        AND     A               ; now test the literal
7971:29714+10	19B0  F2C219  	        JP      P,L19C2         ; forward to FIRST-3D if in range $00 - $3D
7972:				                                ; anything with bit 7 set will be one of
7973:				                                ; 128 compound literals.
7974:				
7975:				; compound literals have the following format.
7976:				; bit 7 set indicates compound.
7977:				; bits 6-5 the subgroup 0-3.
7978:				; bits 4-0 the embedded parameter $00 - $1F.
7979:				; The subgroup 0-3 needs to be manipulated to form the next available four
7980:				; address places after the simple literals in the address table.
7981:				
7982:29724+4	19B3  57      	        LD      D,A             ; save literal in D
7983:29728+7	19B4  E660    	        AND     $60             ; and with 01100000 to isolate subgroup
7984:29735+4	19B6  0F      	        RRCA                    ; rotate bits
7985:29739+4	19B7  0F      	        RRCA                    ; 4 places to right
7986:29743+4	19B8  0F      	        RRCA                    ; not five as we need offset * 2
7987:29747+4	19B9  0F      	        RRCA                    ; 00000xx0
7988:29751+7	19BA  C672    	        ADD     A,$72           ; add ($39 * 2) to give correct offset.
7989:				                                ; alter above if you add more literals.
7990:29758+4	19BC  6F      	        LD      L,A             ; store in L for later indexing.
7991:29762+4	19BD  7A      	        LD      A,D             ; bring back compound literal
7992:29766+7	19BE  E61F    	        AND     $1F             ; use mask to isolate parameter bits
7993:29773+12	19C0  180E    	        JR      L19D0           ; forward to ENT-TABLE
7994:				
7995:				; ---
7996:				
7997:				; the branch was here with simple literals.
7998:				
7999:				;; FIRST-3D
8000:29785+7	19C2  FE18    	L19C2:  CP      $18             ; compare with first unary operations.
8001:29792+7+5	19C4  3008    	        JR      NC,L19CE        ; to DOUBLE-A with unary operations
8002:				
8003:				; it is binary so adjust pointers.
8004:				
8005:29799+4	19C6  D9      	        EXX                     ;
8006:29803+10	19C7  01FBFF  	        LD      BC,$FFFB        ; the value -5
8007:29813+4	19CA  54      	        LD      D,H             ; transfer HL, the last value, to DE.
8008:29817+4	19CB  5D      	        LD      E,L             ;
8009:29821+11	19CC  09      	        ADD     HL,BC           ; subtract 5 making HL point to second
8010:				                                ; value.
8011:29832+4	19CD  D9      	        EXX                     ;
8012:				
8013:				;; DOUBLE-A
8014:29836+4	19CE  07      	L19CE:  RLCA                    ; double the literal
8015:29840+4	19CF  6F      	        LD      L,A             ; and store in L for indexing
8016:				
8017:				;; ENT-TABLE
8018:29844+10	19D0  112319  	L19D0:  LD      DE,L1923        ; Address: tbl-addrs
8019:29854+7	19D3  2600    	        LD      H,$00           ; prepare to index
8020:29861+11	19D5  19      	        ADD     HL,DE           ; add to get address of routine
8021:29872+7	19D6  5E      	        LD      E,(HL)          ; low byte to E
8022:29879+6	19D7  23      	        INC     HL              ;
8023:29885+7	19D8  56      	        LD      D,(HL)          ; high byte to D
8024:				
8025:29892+10	19D9  21A719  	        LD      HL,L19A7        ; Address: RE-ENTRY
8026:29902+19	19DC  E3      	        EX      (SP),HL         ; goes on machine stack
8027:				                                ; address of next literal goes to HL. *
8028:				
8029:				
8030:29921+11	19DD  D5      	        PUSH    DE              ; now the address of routine is stacked.
8031:29932+4	19DE  D9      	        EXX                     ; back to main set
8032:				                                ; avoid using IY register.
8033:29936+20	19DF  ED4B1D40	        LD      BC,($401D)      ; STKEND_hi
8034:				                                ; nothing much goes to C but BREG to B
8035:				                                ; and continue into next ret instruction
8036:				                                ; which has a dual identity
8037:				
8038:				
8039:				; -----------------------
8040:				; THE 'DELETE' SUBROUTINE
8041:				; -----------------------
8042:				; offset $02: 'delete'
8043:				; A simple return but when used as a calculator literal this
8044:				; deletes the last value from the calculator stack.
8045:				; On entry, as always with binary operations,
8046:				; HL=first number, DE=second number
8047:				; On exit, HL=result, DE=stkend.
8048:				; So nothing to do
8049:				
8050:				;; delete
8051:29956+10	19E3  C9      	L19E3:  RET                     ; return - indirect jump if from above.
8052:				
8053:				; ---------------------------------
8054:				; THE 'SINGLE OPERATION' SUBROUTINE
8055:				; ---------------------------------
8056:				; offset $37: 'fp-calc-2'
8057:				; this single operation is used, in the first instance, to evaluate most
8058:				; of the mathematical and string functions found in BASIC expressions.
8059:				
8060:				;; fp-calc-2
8061:29966+10	19E4  F1      	L19E4:  POP     AF              ; drop return address.
8062:29976+13	19E5  3A1E40  	        LD      A,($401E)       ; load accumulator from system variable BREG
8063:				                                ; value will be literal eg. 'tan'
8064:29989+4	19E8  D9      	        EXX                     ; switch to alt
8065:29993+12	19E9  18C3    	        JR      L19AE           ; back to SCAN-ENT
8066:				                                ; next literal will be end-calc in scanning
8067:				
8068:				; ------------------------------
8069:				; THE 'TEST 5 SPACES' SUBROUTINE
8070:				; ------------------------------
8071:				; This routine is called from MOVE-FP, STK-CONST and STK-STORE to
8072:				; test that there is enough space between the calculator stack and the
8073:				; machine stack for another five-byte value. It returns with BC holding
8074:				; the value 5 ready for any subsequent LDIR.
8075:				
8076:				;; TEST-5-SP
8077:30005+11	19EB  D5      	L19EB:  PUSH    DE              ; save
8078:30016+11	19EC  E5      	        PUSH    HL              ; registers
8079:30027+10	19ED  010500  	        LD      BC,$0005        ; an overhead of five bytes
8080:30037+17	19F0  CDC50E  	        CALL    L0EC5           ; routine TEST-ROOM tests free RAM raising
8081:				                                ; an error if not.
8082:30054+10	19F3  E1      	        POP     HL              ; else restore
8083:30064+10	19F4  D1      	        POP     DE              ; registers.
8084:30074+10	19F5  C9      	        RET                     ; return with BC set at 5.
8085:				
8086:				
8087:				; ---------------------------------------------
8088:				; THE 'MOVE A FLOATING POINT NUMBER' SUBROUTINE
8089:				; ---------------------------------------------
8090:				; offset $2D: 'duplicate'
8091:				; This simple routine is a 5-byte LDIR instruction
8092:				; that incorporates a memory check.
8093:				; When used as a calculator literal it duplicates the last value on the
8094:				; calculator stack.
8095:				; Unary so on entry HL points to last value, DE to stkend
8096:				
8097:				;; duplicate
8098:				;; MOVE-FP
8099:30084+17	19F6  CDEB19  	L19F6:  CALL    L19EB           ; routine TEST-5-SP test free memory
8100:				                                ; and sets BC to 5.
8101:30101+16+5	19F9  EDB0    	        LDIR                    ; copy the five bytes.
8102:30117+10	19FB  C9      	        RET                     ; return with DE addressing new STKEND
8103:				                                ; and HL addressing new last value.
8104:				
8105:				; -------------------------------
8106:				; THE 'STACK LITERALS' SUBROUTINE
8107:				; -------------------------------
8108:				; offset $30: 'stk-data'
8109:				; When a calculator subroutine needs to put a value on the calculator
8110:				; stack that is not a regular constant this routine is called with a
8111:				; variable number of following data bytes that convey to the routine
8112:				; the floating point form as succinctly as is possible.
8113:				
8114:				;; stk-data
8115:30127+4	19FC  62      	L19FC:  LD      H,D             ; transfer STKEND
8116:30131+4	19FD  6B      	        LD      L,E             ; to HL for result.
8117:				
8118:				;; STK-CONST
8119:30135+17	19FE  CDEB19  	L19FE:  CALL    L19EB           ; routine TEST-5-SP tests that room exists
8120:				                                ; and sets BC to $05.
8121:				
8122:30152+4	1A01  D9      	        EXX                     ; switch to alternate set
8123:30156+11	1A02  E5      	        PUSH    HL              ; save the pointer to next literal on stack
8124:30167+4	1A03  D9      	        EXX                     ; switch back to main set
8125:				
8126:30171+19	1A04  E3      	        EX      (SP),HL         ; pointer to HL, destination to stack.
8127:				
8128:30190+11	1A05  C5      	        PUSH    BC              ; save BC - value 5 from test room ??.
8129:				
8130:30201+7	1A06  7E      	        LD      A,(HL)          ; fetch the byte following 'stk-data'
8131:30208+7	1A07  E6C0    	        AND     $C0             ; isolate bits 7 and 6
8132:30215+4	1A09  07      	        RLCA                    ; rotate
8133:30219+4	1A0A  07      	        RLCA                    ; to bits 1 and 0  range $00 - $03.
8134:30223+4	1A0B  4F      	        LD      C,A             ; transfer to C
8135:30227+4	1A0C  0C      	        INC     C               ; and increment to give number of bytes
8136:				                                ; to read. $01 - $04
8137:30231+7	1A0D  7E      	        LD      A,(HL)          ; reload the first byte
8138:30238+7	1A0E  E63F    	        AND     $3F             ; mask off to give possible exponent.
8139:30245+7+5	1A10  2002    	        JR      NZ,L1A14        ; forward to FORM-EXP if it was possible to
8140:				                                ; include the exponent.
8141:				
8142:				; else byte is just a byte count and exponent comes next.
8143:				
8144:30252+6	1A12  23      	        INC     HL              ; address next byte and
8145:30258+7	1A13  7E      	        LD      A,(HL)          ; pick up the exponent ( - $50).
8146:				
8147:				;; FORM-EXP
8148:30265+7	1A14  C650    	L1A14:  ADD     A,$50           ; now add $50 to form actual exponent
8149:30272+7	1A16  12      	        LD      (DE),A          ; and load into first destination byte.
8150:30279+7	1A17  3E05    	        LD      A,$05           ; load accumulator with $05 and
8151:30286+4	1A19  91      	        SUB     C               ; subtract C to give count of trailing
8152:				                                ; zeros plus one.
8153:30290+6	1A1A  23      	        INC     HL              ; increment source
8154:30296+6	1A1B  13      	        INC     DE              ; increment destination
8155:30302+7	1A1C  0600    	        LD      B,$00           ; prepare to copy
8156:30309+16+5	1A1E  EDB0    	        LDIR                    ; copy C bytes
8157:				
8158:30325+10	1A20  C1      	        POP     BC              ; restore 5 counter to BC ??.
8159:				
8160:30335+19	1A21  E3      	        EX      (SP),HL         ; put HL on stack as next literal pointer
8161:				                                ; and the stack value - result pointer -
8162:				                                ; to HL.
8163:				
8164:30354+4	1A22  D9      	        EXX                     ; switch to alternate set.
8165:30358+10	1A23  E1      	        POP     HL              ; restore next literal pointer from stack
8166:				                                ; to H'L'.
8167:30368+4	1A24  D9      	        EXX                     ; switch back to main set.
8168:				
8169:30372+4	1A25  47      	        LD      B,A             ; zero count to B
8170:30376+4	1A26  AF      	        XOR     A               ; clear accumulator
8171:				
8172:				;; STK-ZEROS
8173:30380+4	1A27  05      	L1A27:  DEC     B               ; decrement B counter
8174:30384+5+6	1A28  C8      	        RET     Z               ; return if zero.          >>
8175:				                                ; DE points to new STKEND
8176:				                                ; HL to new number.
8177:				
8178:30389+7	1A29  12      	        LD      (DE),A          ; else load zero to destination
8179:30396+6	1A2A  13      	        INC     DE              ; increase destination
8180:30402+12	1A2B  18FA    	        JR      L1A27           ; loop back to STK-ZEROS until done.
8181:				
8182:				; -------------------------------
8183:				; THE 'SKIP CONSTANTS' SUBROUTINE
8184:				; -------------------------------
8185:				; This routine traverses variable-length entries in the table of constants,
8186:				; stacking intermediate, unwanted constants onto a dummy calculator stack,
8187:				; in the first five bytes of the ZX81 ROM.
8188:				
8189:				;; SKIP-CONS
8190:30414+4	1A2D  A7      	L1A2D:  AND     A               ; test if initially zero.
8191:				
8192:				;; SKIP-NEXT
8193:30418+5+6	1A2E  C8      	L1A2E:  RET     Z               ; return if zero.          >>
8194:				
8195:30423+11	1A2F  F5      	        PUSH     AF             ; save count.
8196:30434+11	1A30  D5      	        PUSH    DE              ; and normal STKEND
8197:				
8198:30445+10	1A31  110000  	        LD      DE,$0000        ; dummy value for STKEND at start of ROM
8199:				                                ; Note. not a fault but this has to be
8200:				                                ; moved elsewhere when running in RAM.
8201:				                                ;
8202:30455+17	1A34  CDFE19  	        CALL    L19FE           ; routine STK-CONST works through variable
8203:				                                ; length records.
8204:				
8205:30472+10	1A37  D1      	        POP     DE              ; restore real STKEND
8206:30482+10	1A38  F1      	        POP     AF              ; restore count
8207:30492+4	1A39  3D      	        DEC     A               ; decrease
8208:30496+12	1A3A  18F2    	        JR      L1A2E           ; loop back to SKIP-NEXT
8209:				
8210:				; --------------------------------
8211:				; THE 'MEMORY LOCATION' SUBROUTINE
8212:				; --------------------------------
8213:				; This routine, when supplied with a base address in HL and an index in A,
8214:				; will calculate the address of the A'th entry, where each entry occupies
8215:				; five bytes. It is used for addressing floating-point numbers in the
8216:				; calculator's memory area.
8217:				
8218:				;; LOC-MEM
8219:30508+4	1A3C  4F      	L1A3C:  LD      C,A             ; store the original number $00-$1F.
8220:30512+4	1A3D  07      	        RLCA                    ; double.
8221:30516+4	1A3E  07      	        RLCA                    ; quadruple.
8222:30520+4	1A3F  81      	        ADD     A,C             ; now add original value to multiply by five.
8223:				
8224:30524+4	1A40  4F      	        LD      C,A             ; place the result in C.
8225:30528+7	1A41  0600    	        LD      B,$00           ; set B to 0.
8226:30535+11	1A43  09      	        ADD     HL,BC           ; add to form address of start of number in HL.
8227:				
8228:30546+10	1A44  C9      	        RET                     ; return.
8229:				
8230:				; -------------------------------------
8231:				; THE 'GET FROM MEMORY AREA' SUBROUTINE
8232:				; -------------------------------------
8233:				; offsets $E0 to $FF: 'get-mem-0', 'get-mem-1' etc.
8234:				; A holds $00-$1F offset.
8235:				; The calculator stack increases by 5 bytes.
8236:				
8237:				;; get-mem-xx
8238:30556+11	1A45  D5      	L1A45:  PUSH    DE              ; save STKEND
8239:30567+16	1A46  2A1F40  	        LD      HL,($401F)      ; MEM is base address of the memory cells.
8240:30583+17	1A49  CD3C1A  	        CALL    L1A3C           ; routine LOC-MEM so that HL = first byte
8241:30600+17	1A4C  CDF619  	        CALL    L19F6           ; routine MOVE-FP moves 5 bytes with memory
8242:				                                ; check.
8243:				                                ; DE now points to new STKEND.
8244:30617+10	1A4F  E1      	        POP     HL              ; the original STKEND is now RESULT pointer.
8245:30627+10	1A50  C9      	        RET                     ; return.
8246:				
8247:				; ---------------------------------
8248:				; THE 'STACK A CONSTANT' SUBROUTINE
8249:				; ---------------------------------
8250:				; offset $A0: 'stk-zero'
8251:				; offset $A1: 'stk-one'
8252:				; offset $A2: 'stk-half'
8253:				; offset $A3: 'stk-pi/2'
8254:				; offset $A4: 'stk-ten'
8255:				; This routine allows a one-byte instruction to stack up to 32 constants
8256:				; held in short form in a table of constants. In fact only 5 constants are
8257:				; required. On entry the A register holds the literal ANDed with $1F.
8258:				; It isn't very efficient and it would have been better to hold the
8259:				; numbers in full, five byte form and stack them in a similar manner
8260:				; to that which would be used later for semi-tone table values.
8261:				
8262:				;; stk-const-xx
8263:30637+4	1A51  62      	L1A51:  LD      H,D             ; save STKEND - required for result
8264:30641+4	1A52  6B      	        LD      L,E             ;
8265:30645+4	1A53  D9      	        EXX                     ; swap
8266:30649+11	1A54  E5      	        PUSH    HL              ; save pointer to next literal
8267:30660+10	1A55  211519  	        LD      HL,L1915        ; Address: stk-zero - start of table of
8268:				                                ; constants
8269:30670+4	1A58  D9      	        EXX                     ;
8270:30674+17	1A59  CD2D1A  	        CALL    L1A2D           ; routine SKIP-CONS
8271:30691+17	1A5C  CDFE19  	        CALL    L19FE           ; routine STK-CONST
8272:30708+4	1A5F  D9      	        EXX                     ;
8273:30712+10	1A60  E1      	        POP     HL              ; restore pointer to next literal.
8274:30722+4	1A61  D9      	        EXX                     ;
8275:30726+10	1A62  C9      	        RET                     ; return.
8276:				
8277:				; ---------------------------------------
8278:				; THE 'STORE IN A MEMORY AREA' SUBROUTINE
8279:				; ---------------------------------------
8280:				; Offsets $C0 to $DF: 'st-mem-0', 'st-mem-1' etc.
8281:				; Although 32 memory storage locations can be addressed, only six
8282:				; $C0 to $C5 are required by the ROM and only the thirty bytes (6*5)
8283:				; required for these are allocated. ZX81 programmers who wish to
8284:				; use the floating point routines from assembly language may wish to
8285:				; alter the system variable MEM to point to 160 bytes of RAM to have
8286:				; use the full range available.
8287:				; A holds derived offset $00-$1F.
8288:				; Unary so on entry HL points to last value, DE to STKEND.
8289:				
8290:				;; st-mem-xx
8291:30736+11	1A63  E5      	L1A63:  PUSH    HL              ; save the result pointer.
8292:30747+4	1A64  EB      	        EX      DE,HL           ; transfer to DE.
8293:30751+16	1A65  2A1F40  	        LD      HL,($401F)      ; fetch MEM the base of memory area.
8294:30767+17	1A68  CD3C1A  	        CALL    L1A3C           ; routine LOC-MEM sets HL to the destination.
8295:30784+4	1A6B  EB      	        EX      DE,HL           ; swap - HL is start, DE is destination.
8296:30788+17	1A6C  CDF619  	        CALL    L19F6           ; routine MOVE-FP.
8297:				                                ; note. a short ld bc,5; ldir
8298:				                                ; the embedded memory check is not required
8299:				                                ; so these instructions would be faster!
8300:30805+4	1A6F  EB      	        EX      DE,HL           ; DE = STKEND
8301:30809+10	1A70  E1      	        POP     HL              ; restore original result pointer
8302:30819+10	1A71  C9      	        RET                     ; return.
8303:				
8304:				; -------------------------
8305:				; THE 'EXCHANGE' SUBROUTINE
8306:				; -------------------------
8307:				; offset $01: 'exchange'
8308:				; This routine exchanges the last two values on the calculator stack
8309:				; On entry, as always with binary operations,
8310:				; HL=first number, DE=second number
8311:				; On exit, HL=result, DE=stkend.
8312:				
8313:				;; exchange
8314:30829+7	1A72  0605    	L1A72:  LD      B,$05           ; there are five bytes to be swapped
8315:				
8316:				; start of loop.
8317:				
8318:				;; SWAP-BYTE
8319:30836+7	1A74  1A      	L1A74:  LD      A,(DE)          ; each byte of second
8320:30843+7	1A75  4E      	        LD      C,(HL)          ; each byte of first
8321:30850+4	1A76  EB      	        EX      DE,HL           ; swap pointers
8322:30854+7	1A77  12      	        LD      (DE),A          ; store each byte of first
8323:30861+7	1A78  71      	        LD      (HL),C          ; store each byte of second
8324:30868+6	1A79  23      	        INC     HL              ; advance both
8325:30874+6	1A7A  13      	        INC     DE              ; pointers.
8326:30880+8+5	1A7B  10F7    	        DJNZ    L1A74           ; loop back to SWAP-BYTE until all 5 done.
8327:				
8328:30888+4	1A7D  EB      	        EX      DE,HL           ; even up the exchanges
8329:				                                ; so that DE addresses STKEND.
8330:30892+10	1A7E  C9      	        RET                     ; return.
8331:				
8332:				; ---------------------------------
8333:				; THE 'SERIES GENERATOR' SUBROUTINE
8334:				; ---------------------------------
8335:				; offset $86: 'series-06'
8336:				; offset $88: 'series-08'
8337:				; offset $8C: 'series-0C'
8338:				; The ZX81 uses Chebyshev polynomials to generate approximations for
8339:				; SIN, ATN, LN and EXP. These are named after the Russian mathematician
8340:				; Pafnuty Chebyshev, born in 1821, who did much pioneering work on numerical
8341:				; series. As far as calculators are concerned, Chebyshev polynomials have an
8342:				; advantage over other series, for example the Taylor series, as they can
8343:				; reach an approximation in just six iterations for SIN, eight for EXP and
8344:				; twelve for LN and ATN. The mechanics of the routine are interesting but
8345:				; for full treatment of how these are generated with demonstrations in
8346:				; Sinclair BASIC see "The Complete Spectrum ROM Disassembly" by Dr Ian Logan
8347:				; and Dr Frank O'Hara, published 1983 by Melbourne House.
8348:				
8349:				;; series-xx
8350:30902+4	1A7F  47      	L1A7F:  LD      B,A             ; parameter $00 - $1F to B counter
8351:30906+17	1A80  CDA019  	        CALL    L19A0           ; routine GEN-ENT-1 is called.
8352:				                                ; A recursive call to a special entry point
8353:				                                ; in the calculator that puts the B register
8354:				                                ; in the system variable BREG. The return
8355:				                                ; address is the next location and where
8356:				                                ; the calculator will expect its first
8357:				                                ; instruction - now pointed to by HL'.
8358:				                                ; The previous pointer to the series of
8359:				                                ; five-byte numbers goes on the machine stack.
8360:				
8361:				; The initialization phase.
8362:				
8363:     -	1A83  2D      	        DEFB    $2D             ;;duplicate       x,x
8364:     -	1A84  0F      	        DEFB    $0F             ;;addition        x+x
8365:     -	1A85  C0      	        DEFB    $C0             ;;st-mem-0        x+x
8366:     -	1A86  02      	        DEFB    $02             ;;delete          .
8367:     -	1A87  A0      	        DEFB    $A0             ;;stk-zero        0
8368:     -	1A88  C2      	        DEFB    $C2             ;;st-mem-2        0
8369:				
8370:				; a loop is now entered to perform the algebraic calculation for each of
8371:				; the numbers in the series
8372:				
8373:				;; G-LOOP
8374:     -	1A89  2D      	L1A89:  DEFB    $2D             ;;duplicate       v,v.
8375:     -	1A8A  E0      	        DEFB    $E0             ;;get-mem-0       v,v,x+2
8376:     -	1A8B  04      	        DEFB    $04             ;;multiply        v,v*x+2
8377:     -	1A8C  E2      	        DEFB    $E2             ;;get-mem-2       v,v*x+2,v
8378:     -	1A8D  C1      	        DEFB    $C1             ;;st-mem-1
8379:     -	1A8E  03      	        DEFB    $03             ;;subtract
8380:     -	1A8F  34      	        DEFB    $34             ;;end-calc
8381:				
8382:				; the previous pointer is fetched from the machine stack to H'L' where it
8383:				; addresses one of the numbers of the series following the series literal.
8384:				
8385:30923+17	1A90  CDFC19  	        CALL    L19FC           ; routine STK-DATA is called directly to
8386:				                                ; push a value and advance H'L'.
8387:30940+17	1A93  CDA419  	        CALL    L19A4           ; routine GEN-ENT-2 recursively re-enters
8388:				                                ; the calculator without disturbing
8389:				                                ; system variable BREG
8390:				                                ; H'L' value goes on the machine stack and is
8391:				                                ; then loaded as usual with the next address.
8392:				
8393:     -	1A96  0F      	        DEFB    $0F             ;;addition
8394:     -	1A97  01      	        DEFB    $01             ;;exchange
8395:     -	1A98  C2      	        DEFB    $C2             ;;st-mem-2
8396:     -	1A99  02      	        DEFB    $02             ;;delete
8397:				
8398:     -	1A9A  31      	        DEFB    $31             ;;dec-jr-nz
8399:     -	1A9B  EE      	        DEFB    $EE             ;;back to L1A89, G-LOOP
8400:				
8401:				; when the counted loop is complete the final subtraction yields the result
8402:				; for example SIN X.
8403:				
8404:     -	1A9C  E1      	        DEFB    $E1             ;;get-mem-1
8405:     -	1A9D  03      	        DEFB    $03             ;;subtract
8406:     -	1A9E  34      	        DEFB    $34             ;;end-calc
8407:				
8408:30957+10	1A9F  C9      	        RET                     ; return with H'L' pointing to location
8409:				                                ; after last number in series.
8410:				
8411:				; -----------------------
8412:				; Handle unary minus (18)
8413:				; -----------------------
8414:				; Unary so on entry HL points to last value, DE to STKEND.
8415:				
8416:				;; NEGATE
8417:				;; negate
8418:30967+7	1AA0  7E      	L1AA0:  LD A,  (HL)             ; fetch exponent of last value on the
8419:				                                ; calculator stack.
8420:30974+4	1AA1  A7      	        AND     A               ; test it.
8421:30978+5+6	1AA2  C8      	        RET     Z               ; return if zero.
8422:				
8423:30983+6	1AA3  23      	        INC     HL              ; address the byte with the sign bit.
8424:30989+7	1AA4  7E      	        LD      A,(HL)          ; fetch to accumulator.
8425:30996+7	1AA5  EE80    	        XOR     $80             ; toggle the sign bit.
8426:31003+7	1AA7  77      	        LD      (HL),A          ; put it back.
8427:31010+6	1AA8  2B      	        DEC     HL              ; point to last value again.
8428:31016+10	1AA9  C9      	        RET                     ; return.
8429:				
8430:				; -----------------------
8431:				; Absolute magnitude (27)
8432:				; -----------------------
8433:				; This calculator literal finds the absolute value of the last value,
8434:				; floating point, on calculator stack.
8435:				
8436:				;; abs
8437:31026+6	1AAA  23      	L1AAA:  INC     HL              ; point to byte with sign bit.
8438:31032+15	1AAB  CBBE    	        RES     7,(HL)          ; make the sign positive.
8439:31047+6	1AAD  2B      	        DEC     HL              ; point to last value again.
8440:31053+10	1AAE  C9      	        RET                     ; return.
8441:				
8442:				; -----------
8443:				; Signum (26)
8444:				; -----------
8445:				; This routine replaces the last value on the calculator stack,
8446:				; which is in floating point form, with one if positive and with -minus one
8447:				; if negative. If it is zero then it is left as such.
8448:				
8449:				;; sgn
8450:31063+6	1AAF  23      	L1AAF:  INC     HL              ; point to first byte of 4-byte mantissa.
8451:31069+7	1AB0  7E      	        LD      A,(HL)          ; pick up the byte with the sign bit.
8452:31076+6	1AB1  2B      	        DEC     HL              ; point to exponent.
8453:31082+11	1AB2  35      	        DEC     (HL)            ; test the exponent for
8454:31093+11	1AB3  34      	        INC     (HL)            ; the value zero.
8455:				
8456:31104+4	1AB4  37      	        SCF                     ; set the carry flag.
8457:31108+10+7	1AB5  C4E01A  	        CALL    NZ,L1AE0        ; routine FP-0/1  replaces last value with one
8458:				                                ; if exponent indicates the value is non-zero.
8459:				                                ; in either case mantissa is now four zeros.
8460:				
8461:31118+6	1AB8  23      	        INC HL                  ; point to first byte of 4-byte mantissa.
8462:31124+4	1AB9  07      	        RLCA                    ; rotate original sign bit to carry.
8463:31128+15	1ABA  CB1E    	        RR      (HL)            ; rotate the carry into sign.
8464:31143+6	1ABC  2B      	        DEC HL                  ; point to last value.
8465:31149+10	1ABD  C9      	        RET                     ; return.
8466:				
8467:				
8468:				; -------------------------
8469:				; Handle PEEK function (28)
8470:				; -------------------------
8471:				; This function returns the contents of a memory address.
8472:				; The entire address space can be peeked including the ROM.
8473:				
8474:				;; peek
8475:31159+17	1ABE  CDA70E  	L1ABE:  CALL    L0EA7           ; routine FIND-INT puts address in BC.
8476:31176+7	1AC1  0A      	        LD      A,(BC)          ; load contents into A register.
8477:				
8478:				;; IN-PK-STK
8479:31183+10	1AC2  C31D15  	L1AC2:  JP      L151D           ; exit via STACK-A to put value on the
8480:				                                ; calculator stack.
8481:				
8482:				; ---------------
8483:				; USR number (29)
8484:				; ---------------
8485:				; The USR function followed by a number 0-65535 is the method by which
8486:				; the ZX81 invokes machine code programs. This function returns the
8487:				; contents of the BC register pair.
8488:				; Note. that STACK-BC re-initializes the IY register to $4000 if a user-written
8489:				; program has altered it.
8490:				
8491:				;; usr-no
8492:31193+17	1AC5  CDA70E  	L1AC5:  CALL    L0EA7           ; routine FIND-INT to fetch the
8493:				                                ; supplied address into BC.
8494:				
8495:31210+10	1AC8  212015  	        LD      HL,L1520        ; address: STACK-BC is
8496:31220+11	1ACB  E5      	        PUSH    HL              ; pushed onto the machine stack.
8497:31231+11	1ACC  C5      	        PUSH    BC              ; then the address of the machine code
8498:				                                ; routine.
8499:				
8500:31242+10	1ACD  C9      	        RET                     ; make an indirect jump to the routine
8501:				                                ; and, hopefully, to STACK-BC also.
8502:				
8503:				
8504:				; -----------------------
8505:				; Greater than zero ($33)
8506:				; -----------------------
8507:				; Test if the last value on the calculator stack is greater than zero.
8508:				; This routine is also called directly from the end-tests of the comparison
8509:				; routine.
8510:				
8511:				;; GREATER-0
8512:				;; greater-0
8513:31252+7	1ACE  7E      	L1ACE:  LD      A,(HL)          ; fetch exponent.
8514:31259+4	1ACF  A7      	        AND     A               ; test it for zero.
8515:31263+5+6	1AD0  C8      	        RET     Z               ; return if so.
8516:				
8517:				
8518:31268+7	1AD1  3EFF    	        LD      A,$FF           ; prepare XOR mask for sign bit
8519:31275+12	1AD3  1807    	        JR      L1ADC           ; forward to SIGN-TO-C
8520:				                                ; to put sign in carry
8521:				                                ; (carry will become set if sign is positive)
8522:				                                ; and then overwrite location with 1 or 0
8523:				                                ; as appropriate.
8524:				
8525:				; ------------------------
8526:				; Handle NOT operator ($2C)
8527:				; ------------------------
8528:				; This overwrites the last value with 1 if it was zero else with zero
8529:				; if it was any other value.
8530:				;
8531:				; e.g. NOT 0 returns 1, NOT 1 returns 0, NOT -3 returns 0.
8532:				;
8533:				; The subroutine is also called directly from the end-tests of the comparison
8534:				; operator.
8535:				
8536:				;; NOT
8537:				;; not
8538:31287+7	1AD5  7E      	L1AD5:  LD      A,(HL)          ; get exponent byte.
8539:31294+8	1AD6  ED44    	        NEG                     ; negate - sets carry if non-zero.
8540:31302+4	1AD8  3F      	        CCF                     ; complement so carry set if zero, else reset.
8541:31306+12	1AD9  1805    	        JR      L1AE0           ; forward to FP-0/1.
8542:				
8543:				; -------------------
8544:				; Less than zero (32)
8545:				; -------------------
8546:				; Destructively test if last value on calculator stack is less than zero.
8547:				; Bit 7 of second byte will be set if so.
8548:				
8549:				;; less-0
8550:31318+4	1ADB  AF      	L1ADB:  XOR     A               ; set xor mask to zero
8551:				                                ; (carry will become set if sign is negative).
8552:				
8553:				; transfer sign of mantissa to Carry Flag.
8554:				
8555:				;; SIGN-TO-C
8556:31322+6	1ADC  23      	L1ADC:  INC     HL              ; address 2nd byte.
8557:31328+7	1ADD  AE      	        XOR     (HL)            ; bit 7 of HL will be set if number is negative.
8558:31335+6	1ADE  2B      	        DEC     HL              ; address 1st byte again.
8559:31341+4	1ADF  07      	        RLCA                    ; rotate bit 7 of A to carry.
8560:				
8561:				; -----------
8562:				; Zero or one
8563:				; -----------
8564:				; This routine places an integer value zero or one at the addressed location
8565:				; of calculator stack or MEM area. The value one is written if carry is set on
8566:				; entry else zero.
8567:				
8568:				;; FP-0/1
8569:31345+11	1AE0  E5      	L1AE0:  PUSH    HL              ; save pointer to the first byte
8570:31356+7	1AE1  0605    	        LD      B,$05           ; five bytes to do.
8571:				
8572:				;; FP-loop
8573:31363+10	1AE3  3600    	L1AE3:  LD      (HL),$00        ; insert a zero.
8574:31373+6	1AE5  23      	        INC     HL              ;
8575:31379+8+5	1AE6  10FB    	        DJNZ    L1AE3           ; repeat.
8576:				
8577:31387+10	1AE8  E1      	        POP     HL              ;
8578:31397+5+6	1AE9  D0      	        RET     NC              ;
8579:				
8580:31402+10	1AEA  3681    	        LD      (HL),$81        ; make value 1
8581:31412+10	1AEC  C9      	        RET                     ; return.
8582:				
8583:				
8584:				; -----------------------
8585:				; Handle OR operator (07)
8586:				; -----------------------
8587:				; The Boolean OR operator. eg. X OR Y
8588:				; The result is zero if both values are zero else a non-zero value.
8589:				;
8590:				; e.g.    0 OR 0  returns 0.
8591:				;        -3 OR 0  returns -3.
8592:				;         0 OR -3 returns 1.
8593:				;        -3 OR 2  returns 1.
8594:				;
8595:				; A binary operation.
8596:				; On entry HL points to first operand (X) and DE to second operand (Y).
8597:				
8598:				;; or
8599:31422+7	1AED  1A      	L1AED:  LD      A,(DE)          ; fetch exponent of second number
8600:31429+4	1AEE  A7      	        AND     A               ; test it.
8601:31433+5+6	1AEF  C8      	        RET     Z               ; return if zero.
8602:				
8603:31438+4	1AF0  37      	        SCF                     ; set carry flag
8604:31442+12	1AF1  18ED    	        JR      L1AE0           ; back to FP-0/1 to overwrite the first operand
8605:				                                ; with the value 1.
8606:				
8607:				
8608:				; -----------------------------
8609:				; Handle number AND number (08)
8610:				; -----------------------------
8611:				; The Boolean AND operator.
8612:				;
8613:				; e.g.    -3 AND 2  returns -3.
8614:				;         -3 AND 0  returns 0.
8615:				;          0 and -2 returns 0.
8616:				;          0 and 0  returns 0.
8617:				;
8618:				; Compare with OR routine above.
8619:				
8620:				;; no-&-no
8621:31454+7	1AF3  1A      	L1AF3:  LD      A,(DE)          ; fetch exponent of second number.
8622:31461+4	1AF4  A7      	        AND     A               ; test it.
8623:31465+5+6	1AF5  C0      	        RET     NZ              ; return if not zero.
8624:				
8625:31470+12	1AF6  18E8    	        JR      L1AE0           ; back to FP-0/1 to overwrite the first operand
8626:				                                ; with zero for return value.
8627:				
8628:				; -----------------------------
8629:				; Handle string AND number (10)
8630:				; -----------------------------
8631:				; e.g. "YOU WIN" AND SCORE>99 will return the string if condition is true
8632:				; or the null string if false.
8633:				
8634:				;; str-&-no
8635:31482+7	1AF8  1A      	L1AF8:  LD      A,(DE)          ; fetch exponent of second number.
8636:31489+4	1AF9  A7      	        AND     A               ; test it.
8637:31493+5+6	1AFA  C0      	        RET     NZ              ; return if number was not zero - the string
8638:				                                ; is the result.
8639:				
8640:				; if the number was zero (false) then the null string must be returned by
8641:				; altering the length of the string on the calculator stack to zero.
8642:				
8643:31498+11	1AFB  D5      	        PUSH    DE              ; save pointer to the now obsolete number
8644:				                                ; (which will become the new STKEND)
8645:				
8646:31509+6	1AFC  1B      	        DEC     DE              ; point to the 5th byte of string descriptor.
8647:31515+4	1AFD  AF      	        XOR     A               ; clear the accumulator.
8648:31519+7	1AFE  12      	        LD      (DE),A          ; place zero in high byte of length.
8649:31526+6	1AFF  1B      	        DEC     DE              ; address low byte of length.
8650:31532+7	1B00  12      	        LD      (DE),A          ; place zero there - now the null string.
8651:				
8652:31539+10	1B01  D1      	        POP     DE              ; restore pointer - new STKEND.
8653:31549+10	1B02  C9      	        RET                     ; return.
8654:				
8655:				; -----------------------------------
8656:				; Perform comparison ($09-$0E, $11-$16)
8657:				; -----------------------------------
8658:				; True binary operations.
8659:				;
8660:				; A single entry point is used to evaluate six numeric and six string
8661:				; comparisons. On entry, the calculator literal is in the B register and
8662:				; the two numeric values, or the two string parameters, are on the
8663:				; calculator stack.
8664:				; The individual bits of the literal are manipulated to group similar
8665:				; operations although the SUB 8 instruction does nothing useful and merely
8666:				; alters the string test bit.
8667:				; Numbers are compared by subtracting one from the other, strings are
8668:				; compared by comparing every character until a mismatch, or the end of one
8669:				; or both, is reached.
8670:				;
8671:				; Numeric Comparisons.
8672:				; --------------------
8673:				; The 'x>y' example is the easiest as it employs straight-thru logic.
8674:				; Number y is subtracted from x and the result tested for greater-0 yielding
8675:				; a final value 1 (true) or 0 (false).
8676:				; For 'x<y' the same logic is used but the two values are first swapped on the
8677:				; calculator stack.
8678:				; For 'x=y' NOT is applied to the subtraction result yielding true if the
8679:				; difference was zero and false with anything else.
8680:				; The first three numeric comparisons are just the opposite of the last three
8681:				; so the same processing steps are used and then a final NOT is applied.
8682:				;
8683:				; literal    Test   No  sub 8       ExOrNot  1st RRCA  exch sub  ?   End-Tests
8684:				; =========  ====   == ======== === ======== ========  ==== ===  =  === === ===
8685:				; no-l-eql   x<=y   09 00000001 dec 00000000 00000000  ---- x-y  ?  --- >0? NOT
8686:				; no-gr-eql  x>=y   0A 00000010 dec 00000001 10000000c swap y-x  ?  --- >0? NOT
8687:				; nos-neql   x<>y   0B 00000011 dec 00000010 00000001  ---- x-y  ?  NOT --- NOT
8688:				; no-grtr    x>y    0C 00000100  -  00000100 00000010  ---- x-y  ?  --- >0? ---
8689:				; no-less    x<y    0D 00000101  -  00000101 10000010c swap y-x  ?  --- >0? ---
8690:				; nos-eql    x=y    0E 00000110  -  00000110 00000011  ---- x-y  ?  NOT --- ---
8691:				;
8692:				;                                                           comp -> C/F
8693:				;                                                           ====    ===
8694:				; str-l-eql  x$<=y$ 11 00001001 dec 00001000 00000100  ---- x$y$ 0  !or >0? NOT
8695:				; str-gr-eql x$>=y$ 12 00001010 dec 00001001 10000100c swap y$x$ 0  !or >0? NOT
8696:				; strs-neql  x$<>y$ 13 00001011 dec 00001010 00000101  ---- x$y$ 0  !or >0? NOT
8697:				; str-grtr   x$>y$  14 00001100  -  00001100 00000110  ---- x$y$ 0  !or >0? ---
8698:				; str-less   x$<y$  15 00001101  -  00001101 10000110c swap y$x$ 0  !or >0? ---
8699:				; strs-eql   x$=y$  16 00001110  -  00001110 00000111  ---- x$y$ 0  !or >0? ---
8700:				;
8701:				; String comparisons are a little different in that the eql/neql carry flag
8702:				; from the 2nd RRCA is, as before, fed into the first of the end tests but
8703:				; along the way it gets modified by the comparison process. The result on the
8704:				; stack always starts off as zero and the carry fed in determines if NOT is
8705:				; applied to it. So the only time the greater-0 test is applied is if the
8706:				; stack holds zero which is not very efficient as the test will always yield
8707:				; zero. The most likely explanation is that there were once separate end tests
8708:				; for numbers and strings.
8709:				
8710:				;; no-l-eql,etc.
8711:31559+4	1B03  78      	L1B03:  LD      A,B             ; transfer literal to accumulator.
8712:31563+7	1B04  D608    	        SUB     $08             ; subtract eight - which is not useful.
8713:				
8714:31570+8	1B06  CB57    	        BIT     2,A             ; isolate '>', '<', '='.
8715:				
8716:31578+7+5	1B08  2001    	        JR      NZ,L1B0B        ; skip to EX-OR-NOT with these.
8717:				
8718:31585+4	1B0A  3D      	        DEC     A               ; else make $00-$02, $08-$0A to match bits 0-2.
8719:				
8720:				;; EX-OR-NOT
8721:31589+4	1B0B  0F      	L1B0B:  RRCA                    ; the first RRCA sets carry for a swap.
8722:31593+7+5	1B0C  3008    	        JR      NC,L1B16        ; forward to NU-OR-STR with other 8 cases
8723:				
8724:				; for the other 4 cases the two values on the calculator stack are exchanged.
8725:				
8726:31600+11	1B0E  F5      	        PUSH    AF              ; save A and carry.
8727:31611+11	1B0F  E5      	        PUSH    HL              ; save HL - pointer to first operand.
8728:				                                ; (DE points to second operand).
8729:				
8730:31622+17	1B10  CD721A  	        CALL    L1A72           ; routine exchange swaps the two values.
8731:				                                ; (HL = second operand, DE = STKEND)
8732:				
8733:31639+10	1B13  D1      	        POP     DE              ; DE = first operand
8734:31649+4	1B14  EB      	        EX      DE,HL           ; as we were.
8735:31653+10	1B15  F1      	        POP     AF              ; restore A and carry.
8736:				
8737:				; Note. it would be better if the 2nd RRCA preceded the string test.
8738:				; It would save two duplicate bytes and if we also got rid of that sub 8
8739:				; at the beginning we wouldn't have to alter which bit we test.
8740:				
8741:				;; NU-OR-STR
8742:31663+8	1B16  CB57    	L1B16:  BIT     2,A             ; test if a string comparison.
8743:31671+7+5	1B18  2007    	        JR      NZ,L1B21        ; forward to STRINGS if so.
8744:				
8745:				; continue with numeric comparisons.
8746:				
8747:31678+4	1B1A  0F      	        RRCA                    ; 2nd RRCA causes eql/neql to set carry.
8748:31682+11	1B1B  F5      	        PUSH    AF              ; save A and carry
8749:				
8750:31693+17	1B1C  CD4C17  	        CALL    L174C           ; routine subtract leaves result on stack.
8751:31710+12	1B1F  1833    	        JR      L1B54           ; forward to END-TESTS
8752:				
8753:				; ---
8754:				
8755:				;; STRINGS
8756:31722+4	1B21  0F      	L1B21:  RRCA                    ; 2nd RRCA causes eql/neql to set carry.
8757:31726+11	1B22  F5      	        PUSH    AF              ; save A and carry.
8758:				
8759:31737+17	1B23  CDF813  	        CALL    L13F8           ; routine STK-FETCH gets 2nd string params
8760:31754+11	1B26  D5      	        PUSH    DE              ; save start2 *.
8761:31765+11	1B27  C5      	        PUSH    BC              ; and the length.
8762:				
8763:31776+17	1B28  CDF813  	        CALL    L13F8           ; routine STK-FETCH gets 1st string
8764:				                                ; parameters - start in DE, length in BC.
8765:31793+10	1B2B  E1      	        POP     HL              ; restore length of second to HL.
8766:				
8767:				; A loop is now entered to compare, by subtraction, each corresponding character
8768:				; of the strings. For each successful match, the pointers are incremented and
8769:				; the lengths decreased and the branch taken back to here. If both string
8770:				; remainders become null at the same time, then an exact match exists.
8771:				
8772:				;; BYTE-COMP
8773:31803+4	1B2C  7C      	L1B2C:  LD      A,H             ; test if the second string
8774:31807+4	1B2D  B5      	        OR      L               ; is the null string and hold flags.
8775:				
8776:31811+19	1B2E  E3      	        EX      (SP),HL         ; put length2 on stack, bring start2 to HL *.
8777:31830+4	1B2F  78      	        LD      A,B             ; hi byte of length1 to A
8778:				
8779:31834+7+5	1B30  200B    	        JR      NZ,L1B3D        ; forward to SEC-PLUS if second not null.
8780:				
8781:31841+4	1B32  B1      	        OR      C               ; test length of first string.
8782:				
8783:				;; SECND-LOW
8784:31845+10	1B33  C1      	L1B33:  POP     BC              ; pop the second length off stack.
8785:31855+7+5	1B34  2804    	        JR      Z,L1B3A         ; forward to BOTH-NULL if first string is also
8786:				                                ; of zero length.
8787:				
8788:				; the true condition - first is longer than second (SECND-LESS)
8789:				
8790:31862+10	1B36  F1      	        POP     AF              ; restore carry (set if eql/neql)
8791:31872+4	1B37  3F      	        CCF                     ; complement carry flag.
8792:				                                ; Note. equality becomes false.
8793:				                                ; Inequality is true. By swapping or applying
8794:				                                ; a terminal 'not', all comparisons have been
8795:				                                ; manipulated so that this is success path.
8796:31876+12	1B38  1816    	        JR      L1B50           ; forward to leave via STR-TEST
8797:				
8798:				; ---
8799:				; the branch was here with a match
8800:				
8801:				;; BOTH-NULL
8802:31888+10	1B3A  F1      	L1B3A:  POP     AF              ; restore carry - set for eql/neql
8803:31898+12	1B3B  1813    	        JR      L1B50           ; forward to STR-TEST
8804:				
8805:				; ---
8806:				; the branch was here when 2nd string not null and low byte of first is yet
8807:				; to be tested.
8808:				
8809:				
8810:				;; SEC-PLUS
8811:31910+4	1B3D  B1      	L1B3D:  OR      C               ; test the length of first string.
8812:31914+7+5	1B3E  280D    	        JR      Z,L1B4D         ; forward to FRST-LESS if length is zero.
8813:				
8814:				; both strings have at least one character left.
8815:				
8816:31921+7	1B40  1A      	        LD      A,(DE)          ; fetch character of first string.
8817:31928+7	1B41  96      	        SUB     (HL)            ; subtract with that of 2nd string.
8818:31935+7+5	1B42  3809    	        JR      C,L1B4D         ; forward to FRST-LESS if carry set
8819:				
8820:31942+7+5	1B44  20ED    	        JR      NZ,L1B33        ; back to SECND-LOW and then STR-TEST
8821:				                                ; if not exact match.
8822:				
8823:31949+6	1B46  0B      	        DEC     BC              ; decrease length of 1st string.
8824:31955+6	1B47  13      	        INC     DE              ; increment 1st string pointer.
8825:				
8826:31961+6	1B48  23      	        INC     HL              ; increment 2nd string pointer.
8827:31967+19	1B49  E3      	        EX      (SP),HL         ; swap with length on stack
8828:31986+6	1B4A  2B      	        DEC     HL              ; decrement 2nd string length
8829:31992+12	1B4B  18DF    	        JR      L1B2C           ; back to BYTE-COMP
8830:				
8831:				; ---
8832:				;   the false condition.
8833:				
8834:				;; FRST-LESS
8835:32004+10	1B4D  C1      	L1B4D:  POP     BC              ; discard length
8836:32014+10	1B4E  F1      	        POP     AF              ; pop A
8837:32024+4	1B4F  A7      	        AND     A               ; clear the carry for false result.
8838:				
8839:				; ---
8840:				;   exact match and x$>y$ rejoin here
8841:				
8842:				;; STR-TEST
8843:32028+11	1B50  F5      	L1B50:  PUSH    AF              ; save A and carry
8844:				
8845:32039+11	1B51  EF      	        RST     28H             ;; FP-CALC
8846:     -	1B52  A0      	        DEFB    $A0             ;;stk-zero      an initial false value.
8847:     -	1B53  34      	        DEFB    $34             ;;end-calc
8848:				
8849:				;   both numeric and string paths converge here.
8850:				
8851:				;; END-TESTS
8852:32050+10	1B54  F1      	L1B54:  POP     AF              ; pop carry  - will be set if eql/neql
8853:32060+11	1B55  F5      	        PUSH    AF              ; save it again.
8854:				
8855:32071+10+7	1B56  DCD51A  	        CALL    C,L1AD5         ; routine NOT sets true(1) if equal(0)
8856:				                                ; or, for strings, applies true result.
8857:32081+17	1B59  CDCE1A  	        CALL    L1ACE           ; greater-0  ??????????
8858:				
8859:				
8860:32098+10	1B5C  F1      	        POP     AF              ; pop A
8861:32108+4	1B5D  0F      	        RRCA                    ; the third RRCA - test for '<=', '>=' or '<>'.
8862:32112+10+7	1B5E  D4D51A  	        CALL    NC,L1AD5        ; apply a terminal NOT if so.
8863:32122+10	1B61  C9      	        RET                     ; return.
8864:				
8865:				; -------------------------
8866:				; String concatenation ($17)
8867:				; -------------------------
8868:				;   This literal combines two strings into one e.g. LET A$ = B$ + C$
8869:				;   The two parameters of the two strings to be combined are on the stack.
8870:				
8871:				;; strs-add
8872:32132+17	1B62  CDF813  	L1B62:  CALL    L13F8           ; routine STK-FETCH fetches string parameters
8873:				                                ; and deletes calculator stack entry.
8874:32149+11	1B65  D5      	        PUSH    DE              ; save start address.
8875:32160+11	1B66  C5      	        PUSH    BC              ; and length.
8876:				
8877:32171+17	1B67  CDF813  	        CALL    L13F8           ; routine STK-FETCH for first string
8878:32188+10	1B6A  E1      	        POP     HL              ; re-fetch first length
8879:32198+11	1B6B  E5      	        PUSH    HL              ; and save again
8880:32209+11	1B6C  D5      	        PUSH    DE              ; save start of second string
8881:32220+11	1B6D  C5      	        PUSH    BC              ; and its length.
8882:				
8883:32231+11	1B6E  09      	        ADD     HL,BC           ; add the two lengths.
8884:32242+4	1B6F  44      	        LD      B,H             ; transfer to BC
8885:32246+4	1B70  4D      	        LD      C,L             ; and create
8886:32250+11	1B71  F7      	        RST     30H             ; BC-SPACES in workspace.
8887:				                                ; DE points to start of space.
8888:				
8889:32261+17	1B72  CDC312  	        CALL    L12C3           ; routine STK-STO-$ stores parameters
8890:				                                ; of new string updating STKEND.
8891:				
8892:32278+10	1B75  C1      	        POP     BC              ; length of first
8893:32288+10	1B76  E1      	        POP     HL              ; address of start
8894:32298+4	1B77  78      	        LD      A,B             ; test for
8895:32302+4	1B78  B1      	        OR      C               ; zero length.
8896:32306+7+5	1B79  2802    	        JR      Z,L1B7D         ; to OTHER-STR if null string
8897:				
8898:32313+16+5	1B7B  EDB0    	        LDIR                    ; copy string to workspace.
8899:				
8900:				;; OTHER-STR
8901:32329+10	1B7D  C1      	L1B7D:  POP     BC              ; now second length
8902:32339+10	1B7E  E1      	        POP     HL              ; and start of string
8903:32349+4	1B7F  78      	        LD      A,B             ; test this one
8904:32353+4	1B80  B1      	        OR      C               ; for zero length
8905:32357+7+5	1B81  2802    	        JR      Z,L1B85         ; skip forward to STK-PNTRS if so as complete.
8906:				
8907:32364+16+5	1B83  EDB0    	        LDIR                    ; else copy the bytes.
8908:				                                ; and continue into next routine which
8909:				                                ; sets the calculator stack pointers.
8910:				
8911:				; --------------------
8912:				; Check stack pointers
8913:				; --------------------
8914:				;   Register DE is set to STKEND and HL, the result pointer, is set to five
8915:				;   locations below this.
8916:				;   This routine is used when it is inconvenient to save these values at the
8917:				;   time the calculator stack is manipulated due to other activity on the
8918:				;   machine stack.
8919:				;   This routine is also used to terminate the VAL routine for
8920:				;   the same reason and to initialize the calculator stack at the start of
8921:				;   the CALCULATE routine.
8922:				
8923:				;; STK-PNTRS
8924:32380+16	1B85  2A1C40  	L1B85:  LD      HL,($401C)      ; fetch STKEND value from system variable.
8925:32396+10	1B88  11FBFF  	        LD      DE,$FFFB        ; the value -5
8926:32406+11	1B8B  E5      	        PUSH    HL              ; push STKEND value.
8927:				
8928:32417+11	1B8C  19      	        ADD     HL,DE           ; subtract 5 from HL.
8929:				
8930:32428+10	1B8D  D1      	        POP     DE              ; pop STKEND to DE.
8931:32438+10	1B8E  C9      	        RET                     ; return.
8932:				
8933:				; ----------------
8934:				; Handle CHR$ (2B)
8935:				; ----------------
8936:				;   This function returns a single character string that is a result of
8937:				;   converting a number in the range 0-255 to a string e.g. CHR$ 38 = "A".
8938:				;   Note. the ZX81 does not have an ASCII character set.
8939:				
8940:				;; chrs
8941:32448+17	1B8F  CDCD15  	L1B8F:  CALL    L15CD           ; routine FP-TO-A puts the number in A.
8942:				
8943:32465+7+5	1B92  380E    	        JR      C,L1BA2         ; forward to REPORT-Bd if overflow
8944:32472+7+5	1B94  200C    	        JR      NZ,L1BA2        ; forward to REPORT-Bd if negative
8945:				
8946:32479+11	1B96  F5      	        PUSH    AF              ; save the argument.
8947:				
8948:32490+10	1B97  010100  	        LD      BC,$0001        ; one space required.
8949:32500+11	1B9A  F7      	        RST     30H             ; BC-SPACES makes DE point to start
8950:				
8951:32511+10	1B9B  F1      	        POP     AF              ; restore the number.
8952:				
8953:32521+7	1B9C  12      	        LD      (DE),A          ; and store in workspace
8954:				
8955:32528+17	1B9D  CDC312  	        CALL    L12C3           ; routine STK-STO-$ stacks descriptor.
8956:				
8957:32545+4	1BA0  EB      	        EX      DE,HL           ; make HL point to result and DE to STKEND.
8958:32549+10	1BA1  C9      	        RET                     ; return.
8959:				
8960:				; ---
8961:				
8962:				;; REPORT-Bd
8963:32559+11	1BA2  CF      	L1BA2:  RST     08H             ; ERROR-1
8964:     -	1BA3  0A      	        DEFB    $0A             ; Error Report: Integer out of range
8965:				
8966:				; ----------------------------
8967:				; Handle VAL ($1A)
8968:				; ----------------------------
8969:				;   VAL treats the characters in a string as a numeric expression.
8970:				;       e.g. VAL "2.3" = 2.3, VAL "2+4" = 6, VAL ("2" + "4") = 24.
8971:				
8972:				;; val
8973:32570+16	1BA4  2A1640  	L1BA4:  LD      HL,($4016)      ; fetch value of system variable CH_ADD
8974:32586+11	1BA7  E5      	        PUSH    HL              ; and save on the machine stack.
8975:				
8976:32597+17	1BA8  CDF813  	        CALL    L13F8           ; routine STK-FETCH fetches the string operand
8977:				                                ; from calculator stack.
8978:				
8979:32614+11	1BAB  D5      	        PUSH    DE              ; save the address of the start of the string.
8980:32625+6	1BAC  03      	        INC     BC              ; increment the length for a carriage return.
8981:				
8982:32631+11	1BAD  F7      	        RST     30H             ; BC-SPACES creates the space in workspace.
8983:32642+10	1BAE  E1      	        POP     HL              ; restore start of string to HL.
8984:32652+20	1BAF  ED531640	        LD      ($4016),DE      ; load CH_ADD with start DE in workspace.
8985:				
8986:32672+11	1BB3  D5      	        PUSH    DE              ; save the start in workspace
8987:32683+16+5	1BB4  EDB0    	        LDIR                    ; copy string from program or variables or
8988:				                                ; workspace to the workspace area.
8989:32699+4	1BB6  EB      	        EX      DE,HL           ; end of string + 1 to HL
8990:32703+6	1BB7  2B      	        DEC     HL              ; decrement HL to point to end of new area.
8991:32709+10	1BB8  3676    	        LD      (HL),$76        ; insert a carriage return at end.
8992:				                                ; ZX81 has a non-ASCII character set
8993:32719+23	1BBA  FDCB01BE	        RES     7,(IY+$01)      ; update FLAGS  - signal checking syntax.
8994:32742+17	1BBE  CD920D  	        CALL    L0D92           ; routine CLASS-06 - SCANNING evaluates string
8995:				                                ; expression and checks for integer result.
8996:				
8997:32759+17	1BC1  CD220D  	        CALL    L0D22           ; routine CHECK-2 checks for carriage return.
8998:				
8999:				
9000:32776+10	1BC4  E1      	        POP     HL              ; restore start of string in workspace.
9001:				
9002:32786+16	1BC5  221640  	        LD      ($4016),HL      ; set CH_ADD to the start of the string again.
9003:32802+23	1BC8  FDCB01FE	        SET     7,(IY+$01)      ; update FLAGS  - signal running program.
9004:32825+17	1BCC  CD550F  	        CALL    L0F55           ; routine SCANNING evaluates the string
9005:				                                ; in full leaving result on calculator stack.
9006:				
9007:32842+10	1BCF  E1      	        POP     HL              ; restore saved character address in program.
9008:32852+16	1BD0  221640  	        LD      ($4016),HL      ; and reset the system variable CH_ADD.
9009:				
9010:32868+12	1BD3  18B0    	        JR      L1B85           ; back to exit via STK-PNTRS.
9011:				                                ; resetting the calculator stack pointers
9012:				                                ; HL and DE from STKEND as it wasn't possible
9013:				                                ; to preserve them during this routine.
9014:				
9015:				; ----------------
9016:				; Handle STR$ (2A)
9017:				; ----------------
9018:				;   This function returns a string representation of a numeric argument.
9019:				;   The method used is to trick the PRINT-FP routine into thinking it
9020:				;   is writing to a collapsed display file when in fact it is writing to
9021:				;   string workspace.
9022:				;   If there is already a newline at the intended print position and the
9023:				;   column count has not been reduced to zero then the print routine
9024:				;   assumes that there is only 1K of RAM and the screen memory, like the rest
9025:				;   of dynamic memory, expands as necessary using calls to the ONE-SPACE
9026:				;   routine. The screen is character-mapped not bit-mapped.
9027:				
9028:				;; str$
9029:32880+10	1BD5  010100  	L1BD5:  LD      BC,$0001        ; create an initial byte in workspace
9030:32890+11	1BD8  F7      	        RST     30H             ; using BC-SPACES restart.
9031:				
9032:32901+10	1BD9  3676    	        LD      (HL),$76        ; place a carriage return there.
9033:				
9034:32911+16	1BDB  2A3940  	        LD      HL,($4039)      ; fetch value of S_POSN column/line
9035:32927+11	1BDE  E5      	        PUSH    HL              ; and preserve on stack.
9036:				
9037:32938+7	1BDF  2EFF    	        LD      L,$FF           ; make column value high to create a
9038:				                                ; contrived buffer of length 254.
9039:32945+16	1BE1  223940  	        LD      ($4039),HL      ; and store in system variable S_POSN.
9040:				
9041:32961+16	1BE4  2A0E40  	        LD      HL,($400E)      ; fetch value of DF_CC
9042:32977+11	1BE7  E5      	        PUSH    HL              ; and preserve on stack also.
9043:				
9044:32988+20	1BE8  ED530E40	        LD      ($400E),DE      ; now set DF_CC which normally addresses
9045:				                                ; somewhere in the display file to the start
9046:				                                ; of workspace.
9047:33008+11	1BEC  D5      	        PUSH    DE              ; save the start of new string.
9048:				
9049:33019+17	1BED  CDDB15  	        CALL    L15DB           ; routine PRINT-FP.
9050:				
9051:33036+10	1BF0  D1      	        POP     DE              ; retrieve start of string.
9052:				
9053:33046+16	1BF1  2A0E40  	        LD      HL,($400E)      ; fetch end of string from DF_CC.
9054:33062+4	1BF4  A7      	        AND     A               ; prepare for true subtraction.
9055:33066+15	1BF5  ED52    	        SBC     HL,DE           ; subtract to give length.
9056:				
9057:33081+4	1BF7  44      	        LD      B,H             ; and transfer to the BC
9058:33085+4	1BF8  4D      	        LD      C,L             ; register.
9059:				
9060:33089+10	1BF9  E1      	        POP     HL              ; restore original
9061:33099+16	1BFA  220E40  	        LD      ($400E),HL      ; DF_CC value
9062:				
9063:33115+10	1BFD  E1      	        POP     HL              ; restore original
9064:33125+16	1BFE  223940  	        LD      ($4039),HL      ; S_POSN values.
9065:				
9066:33141+17	1C01  CDC312  	        CALL    L12C3           ; routine STK-STO-$ stores the string
9067:				                                ; descriptor on the calculator stack.
9068:				
9069:33158+4	1C04  EB      	        EX      DE,HL           ; HL = last value, DE = STKEND.
9070:33162+10	1C05  C9      	        RET                     ; return.
9071:				
9072:				
9073:				; -------------------
9074:				; THE 'CODE' FUNCTION
9075:				; -------------------
9076:				; (offset $19: 'code')
9077:				;   Returns the code of a character or first character of a string
9078:				;   e.g. CODE "AARDVARK" = 38  (not 65 as the ZX81 does not have an ASCII
9079:				;   character set).
9080:				
9081:				
9082:				;; code
9083:33172+17	1C06  CDF813  	L1C06:  CALL    L13F8           ; routine STK-FETCH to fetch and delete the
9084:				                                ; string parameters.
9085:				                                ; DE points to the start, BC holds the length.
9086:33189+4	1C09  78      	        LD      A,B             ; test length
9087:33193+4	1C0A  B1      	        OR      C               ; of the string.
9088:33197+7+5	1C0B  2801    	        JR      Z,L1C0E         ; skip to STK-CODE with zero if the null string.
9089:				
9090:33204+7	1C0D  1A      	        LD      A,(DE)          ; else fetch the first character.
9091:				
9092:				;; STK-CODE
9093:33211+10	1C0E  C31D15  	L1C0E:  JP      L151D           ; jump back to STACK-A (with memory check)
9094:				
9095:				; --------------------
9096:				; THE 'LEN' SUBROUTINE
9097:				; --------------------
9098:				; (offset $1b: 'len')
9099:				;   Returns the length of a string.
9100:				;   In Sinclair BASIC strings can be more than twenty thousand characters long
9101:				;   so a sixteen-bit register is required to store the length
9102:				
9103:				;; len
9104:33221+17	1C11  CDF813  	L1C11:  CALL    L13F8           ; routine STK-FETCH to fetch and delete the
9105:				                                ; string parameters from the calculator stack.
9106:				                                ; register BC now holds the length of string.
9107:				
9108:33238+10	1C14  C32015  	        JP      L1520           ; jump back to STACK-BC to save result on the
9109:				                                ; calculator stack (with memory check).
9110:				
9111:				; -------------------------------------
9112:				; THE 'DECREASE THE COUNTER' SUBROUTINE
9113:				; -------------------------------------
9114:				; (offset $31: 'dec-jr-nz')
9115:				;   The calculator has an instruction that decrements a single-byte
9116:				;   pseudo-register and makes consequential relative jumps just like
9117:				;   the Z80's DJNZ instruction.
9118:				
9119:				;; dec-jr-nz
9120:33248+4	1C17  D9      	L1C17:  EXX                     ; switch in set that addresses code
9121:				
9122:33252+11	1C18  E5      	        PUSH    HL              ; save pointer to offset byte
9123:33263+10	1C19  211E40  	        LD      HL,$401E        ; address BREG in system variables
9124:33273+11	1C1C  35      	        DEC     (HL)            ; decrement it
9125:33284+10	1C1D  E1      	        POP     HL              ; restore pointer
9126:				
9127:33294+7+5	1C1E  2004    	        JR      NZ,L1C24        ; to JUMP-2 if not zero
9128:				
9129:33301+6	1C20  23      	        INC     HL              ; step past the jump length.
9130:33307+4	1C21  D9      	        EXX                     ; switch in the main set.
9131:33311+10	1C22  C9      	        RET                     ; return.
9132:				
9133:				;   Note. as a general rule the calculator avoids using the IY register
9134:				;   otherwise the cumbersome 4 instructions in the middle could be replaced by
9135:				;   dec (iy+$xx) - using three instruction bytes instead of six.
9136:				
9137:				
9138:				; ---------------------
9139:				; THE 'JUMP' SUBROUTINE
9140:				; ---------------------
9141:				; (Offset $2F; 'jump')
9142:				;   This enables the calculator to perform relative jumps just like
9143:				;   the Z80 chip's JR instruction.
9144:				;   This is one of the few routines to be polished for the ZX Spectrum.
9145:				;   See, without looking at the ZX Spectrum ROM, if you can get rid of the
9146:				;   relative jump.
9147:				
9148:				;; jump
9149:				;; JUMP
9150:33321+4	1C23  D9      	L1C23:  EXX                     ;switch in pointer set
9151:				
9152:				;; JUMP-2
9153:33325+7	1C24  5E      	L1C24:  LD      E,(HL)          ; the jump byte 0-127 forward, 128-255 back.
9154:33332+4	1C25  AF      	        XOR     A               ; clear accumulator.
9155:33336+8	1C26  CB7B    	        BIT     7,E             ; test if negative jump
9156:33344+7+5	1C28  2801    	        JR      Z,L1C2B         ; skip, if positive, to JUMP-3.
9157:				
9158:33351+4	1C2A  2F      	        CPL                     ; else change to $FF.
9159:				
9160:				;; JUMP-3
9161:33355+4	1C2B  57      	L1C2B:  LD      D,A             ; transfer to high byte.
9162:33359+11	1C2C  19      	        ADD     HL,DE           ; advance calculator pointer forward or back.
9163:				
9164:33370+4	1C2D  D9      	        EXX                     ; switch out pointer set.
9165:33374+10	1C2E  C9      	        RET                     ; return.
9166:				
9167:				; -----------------------------
9168:				; THE 'JUMP ON TRUE' SUBROUTINE
9169:				; -----------------------------
9170:				; (Offset $00; 'jump-true')
9171:				;   This enables the calculator to perform conditional relative jumps
9172:				;   dependent on whether the last test gave a true result
9173:				;   On the ZX81, the exponent will be zero for zero or else $81 for one.
9174:				
9175:				;; jump-true
9176:33384+7	1C2F  1A      	L1C2F:  LD      A,(DE)          ; collect exponent byte
9177:				
9178:33391+4	1C30  A7      	        AND     A               ; is result 0 or 1 ?
9179:33395+7+5	1C31  20F0    	        JR      NZ,L1C23        ; back to JUMP if true (1).
9180:				
9181:33402+4	1C33  D9      	        EXX                     ; else switch in the pointer set.
9182:33406+6	1C34  23      	        INC     HL              ; step past the jump length.
9183:33412+4	1C35  D9      	        EXX                     ; switch in the main set.
9184:33416+10	1C36  C9      	        RET                     ; return.
9185:				
9186:				
9187:				; ------------------------
9188:				; THE 'MODULUS' SUBROUTINE
9189:				; ------------------------
9190:				; ( Offset $2E: 'n-mod-m' )
9191:				; ( i1, i2 -- i3, i4 )
9192:				;   The subroutine calculate N mod M where M is the positive integer, the
9193:				;   'last value' on the calculator stack and N is the integer beneath.
9194:				;   The subroutine returns the integer quotient as the last value and the
9195:				;   remainder as the value beneath.
9196:				;   e.g.    17 MOD 3 = 5 remainder 2
9197:				;   It is invoked during the calculation of a random number and also by
9198:				;   the PRINT-FP routine.
9199:				
9200:				;; n-mod-m
9201:33426+11	1C37  EF      	L1C37:  RST     28H             ;; FP-CALC          17, 3.
9202:     -	1C38  C0      	        DEFB    $C0             ;;st-mem-0          17, 3.
9203:     -	1C39  02      	        DEFB    $02             ;;delete            17.
9204:     -	1C3A  2D      	        DEFB    $2D             ;;duplicate         17, 17.
9205:     -	1C3B  E0      	        DEFB    $E0             ;;get-mem-0         17, 17, 3.
9206:     -	1C3C  05      	        DEFB    $05             ;;division          17, 17/3.
9207:     -	1C3D  24      	        DEFB    $24             ;;int               17, 5.
9208:     -	1C3E  E0      	        DEFB    $E0             ;;get-mem-0         17, 5, 3.
9209:     -	1C3F  01      	        DEFB    $01             ;;exchange          17, 3, 5.
9210:     -	1C40  C0      	        DEFB    $C0             ;;st-mem-0          17, 3, 5.
9211:     -	1C41  04      	        DEFB    $04             ;;multiply          17, 15.
9212:     -	1C42  03      	        DEFB    $03             ;;subtract          2.
9213:     -	1C43  E0      	        DEFB    $E0             ;;get-mem-0         2, 5.
9214:     -	1C44  34      	        DEFB    $34             ;;end-calc          2, 5.
9215:				
9216:33437+10	1C45  C9      	        RET                     ; return.
9217:				
9218:				
9219:				; ----------------------
9220:				; THE 'INTEGER' FUNCTION
9221:				; ----------------------
9222:				; (offset $24: 'int')
9223:				;   This function returns the integer of x, which is just the same as truncate
9224:				;   for positive numbers. The truncate literal truncates negative numbers
9225:				;   upwards so that -3.4 gives -3 whereas the BASIC INT function has to
9226:				;   truncate negative numbers down so that INT -3.4 is 4.
9227:				;   It is best to work through using, say, plus or minus 3.4 as examples.
9228:				
9229:				;; int
9230:33447+11	1C46  EF      	L1C46:  RST     28H             ;; FP-CALC              x.    (= 3.4 or -3.4).
9231:     -	1C47  2D      	        DEFB    $2D             ;;duplicate             x, x.
9232:     -	1C48  32      	        DEFB    $32             ;;less-0                x, (1/0)
9233:     -	1C49  00      	        DEFB    $00             ;;jump-true             x, (1/0)
9234:     -	1C4A  04      	        DEFB    $04             ;;to L1C46, X-NEG
9235:				
9236:     -	1C4B  36      	        DEFB    $36             ;;truncate              trunc 3.4 = 3.
9237:     -	1C4C  34      	        DEFB    $34             ;;end-calc              3.
9238:				
9239:33458+10	1C4D  C9      	        RET                     ; return with + int x on stack.
9240:				
9241:				
9242:				;; X-NEG
9243:     -	1C4E  2D      	L1C4E:  DEFB    $2D             ;;duplicate             -3.4, -3.4.
9244:     -	1C4F  36      	        DEFB    $36             ;;truncate              -3.4, -3.
9245:     -	1C50  C0      	        DEFB    $C0             ;;st-mem-0              -3.4, -3.
9246:     -	1C51  03      	        DEFB    $03             ;;subtract              -.4
9247:     -	1C52  E0      	        DEFB    $E0             ;;get-mem-0             -.4, -3.
9248:     -	1C53  01      	        DEFB    $01             ;;exchange              -3, -.4.
9249:     -	1C54  2C      	        DEFB    $2C             ;;not                   -3, (0).
9250:     -	1C55  00      	        DEFB    $00             ;;jump-true             -3.
9251:     -	1C56  03      	        DEFB    $03             ;;to L1C59, EXIT        -3.
9252:				
9253:     -	1C57  A1      	        DEFB    $A1             ;;stk-one               -3, 1.
9254:     -	1C58  03      	        DEFB    $03             ;;subtract              -4.
9255:				
9256:				;; EXIT
9257:     -	1C59  34      	L1C59:  DEFB    $34             ;;end-calc              -4.
9258:				
9259:33468+10	1C5A  C9      	        RET                     ; return.
9260:				
9261:				
9262:				; ----------------
9263:				; Exponential (23)
9264:				; ----------------
9265:				;
9266:				;
9267:				
9268:				;; EXP
9269:				;; exp
9270:33478+11	1C5B  EF      	L1C5B:  RST     28H             ;; FP-CALC
9271:     -	1C5C  30      	        DEFB    $30             ;;stk-data
9272:     -	1C5D  F1      	        DEFB    $F1             ;;Exponent: $81, Bytes: 4
9273:     -	1C5E  38AA3B29	        DEFB    $38,$AA,$3B,$29 ;;
9274:     -	1C62  04      	        DEFB    $04             ;;multiply
9275:     -	1C63  2D      	        DEFB    $2D             ;;duplicate
9276:     -	1C64  24      	        DEFB    $24             ;;int
9277:     -	1C65  C3      	        DEFB    $C3             ;;st-mem-3
9278:     -	1C66  03      	        DEFB    $03             ;;subtract
9279:     -	1C67  2D      	        DEFB    $2D             ;;duplicate
9280:     -	1C68  0F      	        DEFB    $0F             ;;addition
9281:     -	1C69  A1      	        DEFB    $A1             ;;stk-one
9282:     -	1C6A  03      	        DEFB    $03             ;;subtract
9283:     -	1C6B  88      	        DEFB    $88             ;;series-08
9284:     -	1C6C  13      	        DEFB    $13             ;;Exponent: $63, Bytes: 1
9285:     -	1C6D  36      	        DEFB    $36             ;;(+00,+00,+00)
9286:     -	1C6E  58      	        DEFB    $58             ;;Exponent: $68, Bytes: 2
9287:     -	1C6F  6566    	        DEFB    $65,$66         ;;(+00,+00)
9288:     -	1C71  9D      	        DEFB    $9D             ;;Exponent: $6D, Bytes: 3
9289:     -	1C72  786540  	        DEFB    $78,$65,$40     ;;(+00)
9290:     -	1C75  A2      	        DEFB    $A2             ;;Exponent: $72, Bytes: 3
9291:     -	1C76  6032C9  	        DEFB    $60,$32,$C9     ;;(+00)
9292:     -	1C79  E7      	        DEFB    $E7             ;;Exponent: $77, Bytes: 4
9293:     -	1C7A  21F7AF24	        DEFB    $21,$F7,$AF,$24 ;;
9294:     -	1C7E  EB      	        DEFB    $EB             ;;Exponent: $7B, Bytes: 4
9295:     -	1C7F  2FB0B014	        DEFB    $2F,$B0,$B0,$14 ;;
9296:     -	1C83  EE      	        DEFB    $EE             ;;Exponent: $7E, Bytes: 4
9297:     -	1C84  7EBB9458	        DEFB    $7E,$BB,$94,$58 ;;
9298:     -	1C88  F1      	        DEFB    $F1             ;;Exponent: $81, Bytes: 4
9299:     -	1C89  3A7EF8CF	        DEFB    $3A,$7E,$F8,$CF ;;
9300:     -	1C8D  E3      	        DEFB    $E3             ;;get-mem-3
9301:     -	1C8E  34      	        DEFB    $34             ;;end-calc
9302:				
9303:33489+17	1C8F  CDCD15  	        CALL    L15CD           ; routine FP-TO-A
9304:33506+7+5	1C92  2007    	        JR      NZ,L1C9B        ; to N-NEGTV
9305:				
9306:33513+7+5	1C94  3803    	        JR      C,L1C99         ; to REPORT-6b
9307:				
9308:33520+7	1C96  86      	        ADD     A,(HL)          ;
9309:33527+7+5	1C97  3009    	        JR      NC,L1CA2        ; to RESULT-OK
9310:				
9311:				
9312:				;; REPORT-6b
9313:33534+11	1C99  CF      	L1C99:  RST     08H             ; ERROR-1
9314:     -	1C9A  05      	        DEFB    $05             ; Error Report: Number too big
9315:				
9316:				;; N-NEGTV
9317:33545+7+5	1C9B  3807    	L1C9B:  JR      C,L1CA4         ; to RSLT-ZERO
9318:				
9319:33552+7	1C9D  96      	        SUB     (HL)            ;
9320:33559+7+5	1C9E  3004    	        JR      NC,L1CA4        ; to RSLT-ZERO
9321:				
9322:33566+8	1CA0  ED44    	        NEG                     ; Negate
9323:				
9324:				;; RESULT-OK
9325:33574+7	1CA2  77      	L1CA2:  LD      (HL),A          ;
9326:33581+10	1CA3  C9      	        RET                     ; return.
9327:				
9328:				
9329:				;; RSLT-ZERO
9330:33591+11	1CA4  EF      	L1CA4:  RST     28H             ;; FP-CALC
9331:     -	1CA5  02      	        DEFB    $02             ;;delete
9332:     -	1CA6  A0      	        DEFB    $A0             ;;stk-zero
9333:     -	1CA7  34      	        DEFB    $34             ;;end-calc
9334:				
9335:33602+10	1CA8  C9      	        RET                     ; return.
9336:				
9337:				
9338:				; --------------------------------
9339:				; THE 'NATURAL LOGARITHM' FUNCTION
9340:				; --------------------------------
9341:				; (offset $22: 'ln')
9342:				;   Like the ZX81 itself, 'natural' logarithms came from Scotland.
9343:				;   They were devised in 1614 by well-traveled Scotsman John Napier who noted
9344:				;   "Nothing doth more molest and hinder calculators than the multiplications,
9345:				;    divisions, square and cubical extractions of great numbers".
9346:				;
9347:				;   Napier's logarithms enabled the above operations to be accomplished by 
9348:				;   simple addition and subtraction simplifying the navigational and 
9349:				;   astronomical calculations which beset his age.
9350:				;   Napier's logarithms were quickly overtaken by logarithms to the base 10
9351:				;   devised, in conjunction with Napier, by Henry Briggs a Cambridge-educated 
9352:				;   professor of Geometry at Oxford University. These simplified the layout
9353:				;   of the tables enabling humans to easily scale calculations.
9354:				;
9355:				;   It is only recently with the introduction of pocket calculators and
9356:				;   computers like the ZX81 that natural logarithms are once more at the fore,
9357:				;   although some computers retain logarithms to the base ten.
9358:				;   'Natural' logarithms are powers to the base 'e', which like 'pi' is a 
9359:				;   naturally occurring number in branches of mathematics.
9360:				;   Like 'pi' also, 'e' is an irrational number and starts 2.718281828...
9361:				;
9362:				;   The tabular use of logarithms was that to multiply two numbers one looked
9363:				;   up their two logarithms in the tables, added them together and then looked 
9364:				;   for the result in a table of antilogarithms to give the desired product.
9365:				;
9366:				;   The EXP function is the BASIC equivalent of a calculator's 'antiln' function 
9367:				;   and by picking any two numbers, 1.72 and 6.89 say,
9368:				;     10 PRINT EXP ( LN 1.72 + LN 6.89 ) 
9369:				;   will give just the same result as
9370:				;     20 PRINT 1.72 * 6.89.
9371:				;   Division is accomplished by subtracting the two logs.
9372:				;
9373:				;   Napier also mentioned "square and cubicle extractions". 
9374:				;   To raise a number to the power 3, find its 'ln', multiply by 3 and find the 
9375:				;   'antiln'.  e.g. PRINT EXP( LN 4 * 3 )  gives 64.
9376:				;   Similarly to find the n'th root divide the logarithm by 'n'.
9377:				;   The ZX81 ROM used PRINT EXP ( LN 9 / 2 ) to find the square root of the 
9378:				;   number 9. The Napieran square root function is just a special case of 
9379:				;   the 'to_power' function. A cube root or indeed any root/power would be just
9380:				;   as simple.
9381:				
9382:				;   First test that the argument to LN is a positive, non-zero number.
9383:				
9384:				;; ln
9385:33612+11	1CA9  EF      	L1CA9:  RST     28H             ;; FP-CALC
9386:     -	1CAA  2D      	        DEFB    $2D             ;;duplicate
9387:     -	1CAB  33      	        DEFB    $33             ;;greater-0
9388:     -	1CAC  00      	        DEFB    $00             ;;jump-true
9389:     -	1CAD  04      	        DEFB    $04             ;;to L1CB1, VALID
9390:				
9391:     -	1CAE  34      	        DEFB    $34             ;;end-calc
9392:				
9393:				
9394:				;; REPORT-Ab
9395:33623+11	1CAF  CF      	L1CAF:  RST     08H             ; ERROR-1
9396:     -	1CB0  09      	        DEFB    $09             ; Error Report: Invalid argument
9397:				
9398:				;; VALID
9399:     -	1CB1  A0      	L1CB1:  DEFB    $A0             ;;stk-zero              Note. not 
9400:     -	1CB2  02      	        DEFB    $02             ;;delete                necessary.
9401:     -	1CB3  34      	        DEFB    $34             ;;end-calc
9402:33634+7	1CB4  7E      	        LD      A,(HL)          ;
9403:				
9404:33641+10	1CB5  3680    	        LD      (HL),$80        ;
9405:33651+17	1CB7  CD1D15  	        CALL    L151D           ; routine STACK-A
9406:				
9407:33668+11	1CBA  EF      	        RST     28H             ;; FP-CALC
9408:     -	1CBB  30      	        DEFB    $30             ;;stk-data
9409:     -	1CBC  38      	        DEFB    $38             ;;Exponent: $88, Bytes: 1
9410:     -	1CBD  00      	        DEFB    $00             ;;(+00,+00,+00)
9411:     -	1CBE  03      	        DEFB    $03             ;;subtract
9412:     -	1CBF  01      	        DEFB    $01             ;;exchange
9413:     -	1CC0  2D      	        DEFB    $2D             ;;duplicate
9414:     -	1CC1  30      	        DEFB    $30             ;;stk-data
9415:     -	1CC2  F0      	        DEFB    $F0             ;;Exponent: $80, Bytes: 4
9416:     -	1CC3  4CCCCCCD	        DEFB    $4C,$CC,$CC,$CD ;;
9417:     -	1CC7  03      	        DEFB    $03             ;;subtract
9418:     -	1CC8  33      	        DEFB    $33             ;;greater-0
9419:     -	1CC9  00      	        DEFB    $00             ;;jump-true
9420:     -	1CCA  08      	        DEFB    $08             ;;to L1CD2, GRE.8
9421:				
9422:     -	1CCB  01      	        DEFB    $01             ;;exchange
9423:     -	1CCC  A1      	        DEFB    $A1             ;;stk-one
9424:     -	1CCD  03      	        DEFB    $03             ;;subtract
9425:     -	1CCE  01      	        DEFB    $01             ;;exchange
9426:     -	1CCF  34      	        DEFB    $34             ;;end-calc
9427:				
9428:33679+11	1CD0  34      	        INC     (HL)            ;
9429:				
9430:33690+11	1CD1  EF      	        RST     28H             ;; FP-CALC
9431:				
9432:				;; GRE.8
9433:     -	1CD2  01      	L1CD2:  DEFB    $01             ;;exchange
9434:     -	1CD3  30      	        DEFB    $30             ;;stk-data
9435:     -	1CD4  F0      	        DEFB    $F0             ;;Exponent: $80, Bytes: 4
9436:     -	1CD5  317217F8	        DEFB    $31,$72,$17,$F8 ;;
9437:     -	1CD9  04      	        DEFB    $04             ;;multiply
9438:     -	1CDA  01      	        DEFB    $01             ;;exchange
9439:     -	1CDB  A2      	        DEFB    $A2             ;;stk-half
9440:     -	1CDC  03      	        DEFB    $03             ;;subtract
9441:     -	1CDD  A2      	        DEFB    $A2             ;;stk-half
9442:     -	1CDE  03      	        DEFB    $03             ;;subtract
9443:     -	1CDF  2D      	        DEFB    $2D             ;;duplicate
9444:     -	1CE0  30      	        DEFB    $30             ;;stk-data
9445:     -	1CE1  32      	        DEFB    $32             ;;Exponent: $82, Bytes: 1
9446:     -	1CE2  20      	        DEFB    $20             ;;(+00,+00,+00)
9447:     -	1CE3  04      	        DEFB    $04             ;;multiply
9448:     -	1CE4  A2      	        DEFB    $A2             ;;stk-half
9449:     -	1CE5  03      	        DEFB    $03             ;;subtract
9450:     -	1CE6  8C      	        DEFB    $8C             ;;series-0C
9451:     -	1CE7  11      	        DEFB    $11             ;;Exponent: $61, Bytes: 1
9452:     -	1CE8  AC      	        DEFB    $AC             ;;(+00,+00,+00)
9453:     -	1CE9  14      	        DEFB    $14             ;;Exponent: $64, Bytes: 1
9454:     -	1CEA  09      	        DEFB    $09             ;;(+00,+00,+00)
9455:     -	1CEB  56      	        DEFB    $56             ;;Exponent: $66, Bytes: 2
9456:     -	1CEC  DAA5    	        DEFB    $DA,$A5         ;;(+00,+00)
9457:     -	1CEE  59      	        DEFB    $59             ;;Exponent: $69, Bytes: 2
9458:     -	1CEF  30C5    	        DEFB    $30,$C5         ;;(+00,+00)
9459:     -	1CF1  5C      	        DEFB    $5C             ;;Exponent: $6C, Bytes: 2
9460:     -	1CF2  90AA    	        DEFB    $90,$AA         ;;(+00,+00)
9461:     -	1CF4  9E      	        DEFB    $9E             ;;Exponent: $6E, Bytes: 3
9462:     -	1CF5  706F61  	        DEFB    $70,$6F,$61     ;;(+00)
9463:     -	1CF8  A1      	        DEFB    $A1             ;;Exponent: $71, Bytes: 3
9464:     -	1CF9  CBDA96  	        DEFB    $CB,$DA,$96     ;;(+00)
9465:     -	1CFC  A4      	        DEFB    $A4             ;;Exponent: $74, Bytes: 3
9466:     -	1CFD  319FB4  	        DEFB    $31,$9F,$B4     ;;(+00)
9467:     -	1D00  E7      	        DEFB    $E7             ;;Exponent: $77, Bytes: 4
9468:     -	1D01  A0FE5CFC	        DEFB    $A0,$FE,$5C,$FC ;;
9469:     -	1D05  EA      	        DEFB    $EA             ;;Exponent: $7A, Bytes: 4
9470:     -	1D06  1B43CA36	        DEFB    $1B,$43,$CA,$36 ;;
9471:     -	1D0A  ED      	        DEFB    $ED             ;;Exponent: $7D, Bytes: 4
9472:     -	1D0B  A79C7E5E	        DEFB    $A7,$9C,$7E,$5E ;;
9473:     -	1D0F  F0      	        DEFB    $F0             ;;Exponent: $80, Bytes: 4
9474:     -	1D10  6E238093	        DEFB    $6E,$23,$80,$93 ;;
9475:     -	1D14  04      	        DEFB    $04             ;;multiply
9476:     -	1D15  0F      	        DEFB    $0F             ;;addition
9477:     -	1D16  34      	        DEFB    $34             ;;end-calc
9478:				
9479:33701+10	1D17  C9      	        RET                     ; return.
9480:				
9481:				; -----------------------------
9482:				; THE 'TRIGONOMETRIC' FUNCTIONS
9483:				; -----------------------------
9484:				;   Trigonometry is rocket science. It is also used by carpenters and pyramid
9485:				;   builders. 
9486:				;   Some uses can be quite abstract but the principles can be seen in simple
9487:				;   right-angled triangles. Triangles have some special properties -
9488:				;
9489:				;   1) The sum of the three angles is always PI radians (180 degrees).
9490:				;      Very helpful if you know two angles and wish to find the third.
9491:				;   2) In any right-angled triangle the sum of the squares of the two shorter
9492:				;      sides is equal to the square of the longest side opposite the right-angle.
9493:				;      Very useful if you know the length of two sides and wish to know the
9494:				;      length of the third side.
9495:				;   3) Functions sine, cosine and tangent enable one to calculate the length 
9496:				;      of an unknown side when the length of one other side and an angle is 
9497:				;      known.
9498:				;   4) Functions arcsin, arccosine and arctan enable one to calculate an unknown
9499:				;      angle when the length of two of the sides is known.
9500:				
9501:				; --------------------------------
9502:				; THE 'REDUCE ARGUMENT' SUBROUTINE
9503:				; --------------------------------
9504:				; (offset $35: 'get-argt')
9505:				;
9506:				;   This routine performs two functions on the angle, in radians, that forms
9507:				;   the argument to the sine and cosine functions.
9508:				;   First it ensures that the angle 'wraps round'. That if a ship turns through 
9509:				;   an angle of, say, 3*PI radians (540 degrees) then the net effect is to turn 
9510:				;   through an angle of PI radians (180 degrees).
9511:				;   Secondly it converts the angle in radians to a fraction of a right angle,
9512:				;   depending within which quadrant the angle lies, with the periodicity 
9513:				;   resembling that of the desired sine value.
9514:				;   The result lies in the range -1 to +1.              
9515:				;
9516:				;                       90 deg.
9517:				; 
9518:				;                       (pi/2)
9519:				;                II       +1        I
9520:				;                         |
9521:				;          sin+      |\   |   /|    sin+
9522:				;          cos-      | \  |  / |    cos+
9523:				;          tan-      |  \ | /  |    tan+
9524:				;                    |   \|/)  |           
9525:				;   180 deg. (pi) 0 -|----+----|-- 0  (0)   0 degrees
9526:				;                    |   /|\   |
9527:				;          sin-      |  / | \  |    sin-
9528:				;          cos-      | /  |  \ |    cos+
9529:				;          tan+      |/   |   \|    tan-
9530:				;                         |
9531:				;                III      -1       IV
9532:				;                       (3pi/2)
9533:				;
9534:				;                       270 deg.
9535:				
9536:				
9537:				;; get-argt
9538:33711+11	1D18  EF      	L1D18:  RST     28H             ;; FP-CALC         X.
9539:     -	1D19  30      	        DEFB    $30             ;;stk-data
9540:     -	1D1A  EE      	        DEFB    $EE             ;;Exponent: $7E, 
9541:				                                ;;Bytes: 4
9542:     -	1D1B  22F9836E	        DEFB    $22,$F9,$83,$6E ;;                 X, 1/(2*PI)             
9543:     -	1D1F  04      	        DEFB    $04             ;;multiply         X/(2*PI) = fraction
9544:				
9545:     -	1D20  2D      	        DEFB    $2D             ;;duplicate             
9546:     -	1D21  A2      	        DEFB    $A2             ;;stk-half
9547:     -	1D22  0F      	        DEFB    $0F             ;;addition
9548:     -	1D23  24      	        DEFB    $24             ;;int
9549:				
9550:     -	1D24  03      	        DEFB    $03             ;;subtract         now range -.5 to .5
9551:				
9552:     -	1D25  2D      	        DEFB    $2D             ;;duplicate
9553:     -	1D26  0F      	        DEFB    $0F             ;;addition         now range -1 to 1.
9554:     -	1D27  2D      	        DEFB    $2D             ;;duplicate
9555:     -	1D28  0F      	        DEFB    $0F             ;;addition         now range -2 to 2.
9556:				
9557:				;   quadrant I (0 to +1) and quadrant IV (-1 to 0) are now correct.
9558:				;   quadrant II ranges +1 to +2.
9559:				;   quadrant III ranges -2 to -1.
9560:				
9561:     -	1D29  2D      	        DEFB    $2D             ;;duplicate        Y, Y.
9562:     -	1D2A  27      	        DEFB    $27             ;;abs              Y, abs(Y).    range 1 to 2
9563:     -	1D2B  A1      	        DEFB    $A1             ;;stk-one          Y, abs(Y), 1.
9564:     -	1D2C  03      	        DEFB    $03             ;;subtract         Y, abs(Y)-1.  range 0 to 1
9565:     -	1D2D  2D      	        DEFB    $2D             ;;duplicate        Y, Z, Z.
9566:     -	1D2E  33      	        DEFB    $33             ;;greater-0        Y, Z, (1/0).
9567:				
9568:     -	1D2F  C0      	        DEFB    $C0             ;;st-mem-0         store as possible sign 
9569:				                                ;;                 for cosine function.
9570:				
9571:     -	1D30  00      	        DEFB    $00             ;;jump-true
9572:     -	1D31  04      	        DEFB    $04             ;;to L1D35, ZPLUS  with quadrants II and III
9573:				
9574:				;   else the angle lies in quadrant I or IV and value Y is already correct.
9575:				
9576:     -	1D32  02      	        DEFB    $02             ;;delete          Y    delete test value.
9577:     -	1D33  34      	        DEFB    $34             ;;end-calc        Y.
9578:				
9579:33722+10	1D34  C9      	        RET                     ; return.         with Q1 and Q4 >>>
9580:				
9581:				;   The branch was here with quadrants II (0 to 1) and III (1 to 0).
9582:				;   Y will hold -2 to -1 if this is quadrant III.
9583:				
9584:				;; ZPLUS
9585:     -	1D35  A1      	L1D35:  DEFB    $A1             ;;stk-one         Y, Z, 1
9586:     -	1D36  03      	        DEFB    $03             ;;subtract        Y, Z-1.       Q3 = 0 to -1
9587:     -	1D37  01      	        DEFB    $01             ;;exchange        Z-1, Y.
9588:     -	1D38  32      	        DEFB    $32             ;;less-0          Z-1, (1/0).
9589:     -	1D39  00      	        DEFB    $00             ;;jump-true       Z-1.
9590:     -	1D3A  02      	        DEFB    $02             ;;to L1D3C, YNEG
9591:				                                ;;if angle in quadrant III
9592:				
9593:				;   else angle is within quadrant II (-1 to 0)
9594:				
9595:     -	1D3B  18      	        DEFB    $18             ;;negate          range +1 to 0
9596:				
9597:				
9598:				;; YNEG
9599:     -	1D3C  34      	L1D3C:  DEFB    $34             ;;end-calc        quadrants II and III correct.
9600:				
9601:33732+10	1D3D  C9      	        RET                     ; return.
9602:				
9603:				
9604:				; ---------------------
9605:				; THE 'COSINE' FUNCTION
9606:				; ---------------------
9607:				; (offset $1D: 'cos')
9608:				;   Cosines are calculated as the sine of the opposite angle rectifying the 
9609:				;   sign depending on the quadrant rules. 
9610:				;
9611:				;
9612:				;             /|
9613:				;          h /y|
9614:				;           /  |o
9615:				;          /x  |
9616:				;         /----|    
9617:				;           a
9618:				;
9619:				;   The cosine of angle x is the adjacent side (a) divided by the hypotenuse 1.
9620:				;   However if we examine angle y then a/h is the sine of that angle.
9621:				;   Since angle x plus angle y equals a right-angle, we can find angle y by 
9622:				;   subtracting angle x from pi/2.
9623:				;   However it's just as easy to reduce the argument first and subtract the
9624:				;   reduced argument from the value 1 (a reduced right-angle).
9625:				;   It's even easier to subtract 1 from the angle and rectify the sign.
9626:				;   In fact, after reducing the argument, the absolute value of the argument
9627:				;   is used and rectified using the test result stored in mem-0 by 'get-argt'
9628:				;   for that purpose.
9629:				
9630:				;; cos
9631:33742+11	1D3E  EF      	L1D3E:  RST     28H             ;; FP-CALC              angle in radians.
9632:     -	1D3F  35      	        DEFB    $35             ;;get-argt              X       reduce -1 to +1
9633:				
9634:     -	1D40  27      	        DEFB    $27             ;;abs                   ABS X   0 to 1
9635:     -	1D41  A1      	        DEFB    $A1             ;;stk-one               ABS X, 1.
9636:     -	1D42  03      	        DEFB    $03             ;;subtract              now opposite angle 
9637:				                                ;;                      though negative sign.
9638:     -	1D43  E0      	        DEFB    $E0             ;;get-mem-0             fetch sign indicator.
9639:     -	1D44  00      	        DEFB    $00             ;;jump-true
9640:     -	1D45  06      	        DEFB    $06             ;;fwd to L1D4B, C-ENT
9641:				                                ;;forward to common code if in QII or QIII 
9642:				
9643:				
9644:     -	1D46  18      	        DEFB    $18             ;;negate                else make positive.
9645:     -	1D47  2F      	        DEFB    $2F             ;;jump
9646:     -	1D48  03      	        DEFB    $03             ;;fwd to L1D4B, C-ENT
9647:				                                ;;with quadrants QI and QIV 
9648:				
9649:				; -------------------
9650:				; THE 'SINE' FUNCTION
9651:				; -------------------
9652:				; (offset $1C: 'sin')
9653:				;   This is a fundamental transcendental function from which others such as cos
9654:				;   and tan are directly, or indirectly, derived.
9655:				;   It uses the series generator to produce Chebyshev polynomials.
9656:				;
9657:				;
9658:				;             /|
9659:				;          1 / |
9660:				;           /  |x
9661:				;          /a  |
9662:				;         /----|    
9663:				;           y
9664:				;
9665:				;   The 'get-argt' function is designed to modify the angle and its sign 
9666:				;   in line with the desired sine value and afterwards it can launch straight
9667:				;   into common code.
9668:				
9669:				;; sin
9670:33753+11	1D49  EF      	L1D49:  RST     28H             ;; FP-CALC      angle in radians
9671:     -	1D4A  35      	        DEFB    $35             ;;get-argt      reduce - sign now correct.
9672:				
9673:				;; C-ENT
9674:     -	1D4B  2D      	L1D4B:  DEFB    $2D             ;;duplicate
9675:     -	1D4C  2D      	        DEFB    $2D             ;;duplicate
9676:     -	1D4D  04      	        DEFB    $04             ;;multiply
9677:     -	1D4E  2D      	        DEFB    $2D             ;;duplicate
9678:     -	1D4F  0F      	        DEFB    $0F             ;;addition
9679:     -	1D50  A1      	        DEFB    $A1             ;;stk-one
9680:     -	1D51  03      	        DEFB    $03             ;;subtract
9681:				
9682:     -	1D52  86      	        DEFB    $86             ;;series-06
9683:     -	1D53  14      	        DEFB    $14             ;;Exponent: $64, Bytes: 1
9684:     -	1D54  E6      	        DEFB    $E6             ;;(+00,+00,+00)
9685:     -	1D55  5C      	        DEFB    $5C             ;;Exponent: $6C, Bytes: 2
9686:     -	1D56  1F0B    	        DEFB    $1F,$0B         ;;(+00,+00)
9687:     -	1D58  A3      	        DEFB    $A3             ;;Exponent: $73, Bytes: 3
9688:     -	1D59  8F38EE  	        DEFB    $8F,$38,$EE     ;;(+00)
9689:     -	1D5C  E9      	        DEFB    $E9             ;;Exponent: $79, Bytes: 4
9690:     -	1D5D  1563BB23	        DEFB    $15,$63,$BB,$23 ;;
9691:     -	1D61  EE      	        DEFB    $EE             ;;Exponent: $7E, Bytes: 4
9692:     -	1D62  920DCDED	        DEFB    $92,$0D,$CD,$ED ;;
9693:     -	1D66  F1      	        DEFB    $F1             ;;Exponent: $81, Bytes: 4
9694:     -	1D67  235D1BEA	        DEFB    $23,$5D,$1B,$EA ;;
9695:				
9696:     -	1D6B  04      	        DEFB    $04             ;;multiply
9697:     -	1D6C  34      	        DEFB    $34             ;;end-calc
9698:				
9699:33764+10	1D6D  C9      	        RET                     ; return.
9700:				
9701:				
9702:				; ----------------------
9703:				; THE 'TANGENT' FUNCTION
9704:				; ----------------------
9705:				; (offset $1E: 'tan')
9706:				;
9707:				;   Evaluates tangent x as    sin(x) / cos(x).
9708:				;
9709:				;
9710:				;             /|
9711:				;          h / |
9712:				;           /  |o
9713:				;          /x  |
9714:				;         /----|    
9715:				;           a
9716:				;
9717:				;   The tangent of angle x is the ratio of the length of the opposite side 
9718:				;   divided by the length of the adjacent side. As the opposite length can 
9719:				;   be calculates using sin(x) and the adjacent length using cos(x) then 
9720:				;   the tangent can be defined in terms of the previous two functions.
9721:				
9722:				;   Error 6 if the argument, in radians, is too close to one like pi/2
9723:				;   which has an infinite tangent. e.g. PRINT TAN (PI/2)  evaluates as 1/0.
9724:				;   Similarly PRINT TAN (3*PI/2), TAN (5*PI/2) etc.
9725:				
9726:				;; tan
9727:33774+11	1D6E  EF      	L1D6E:  RST     28H             ;; FP-CALC          x.
9728:     -	1D6F  2D      	        DEFB    $2D             ;;duplicate         x, x.
9729:     -	1D70  1C      	        DEFB    $1C             ;;sin               x, sin x.
9730:     -	1D71  01      	        DEFB    $01             ;;exchange          sin x, x.
9731:     -	1D72  1D      	        DEFB    $1D             ;;cos               sin x, cos x.
9732:     -	1D73  05      	        DEFB    $05             ;;division          sin x/cos x (= tan x).
9733:     -	1D74  34      	        DEFB    $34             ;;end-calc          tan x.
9734:				
9735:33785+10	1D75  C9      	        RET                     ; return.
9736:				
9737:				; ---------------------
9738:				; THE 'ARCTAN' FUNCTION
9739:				; ---------------------
9740:				; (Offset $21: 'atn')
9741:				;   The inverse tangent function with the result in radians.
9742:				;   This is a fundamental transcendental function from which others such as
9743:				;   asn and acs are directly, or indirectly, derived.
9744:				;   It uses the series generator to produce Chebyshev polynomials.
9745:				
9746:				;; atn
9747:33795+7	1D76  7E      	L1D76:  LD      A,(HL)          ; fetch exponent
9748:33802+7	1D77  FE81    	        CP      $81             ; compare to that for 'one'
9749:33809+7+5	1D79  380E    	        JR      C,L1D89         ; forward, if less, to SMALL
9750:				
9751:33816+11	1D7B  EF      	        RST     28H             ;; FP-CALC      X.
9752:     -	1D7C  A1      	        DEFB    $A1             ;;stk-one
9753:     -	1D7D  18      	        DEFB    $18             ;;negate
9754:     -	1D7E  01      	        DEFB    $01             ;;exchange
9755:     -	1D7F  05      	        DEFB    $05             ;;division
9756:     -	1D80  2D      	        DEFB    $2D             ;;duplicate
9757:     -	1D81  32      	        DEFB    $32             ;;less-0
9758:     -	1D82  A3      	        DEFB    $A3             ;;stk-pi/2
9759:     -	1D83  01      	        DEFB    $01             ;;exchange
9760:     -	1D84  00      	        DEFB    $00             ;;jump-true
9761:     -	1D85  06      	        DEFB    $06             ;;to L1D8B, CASES
9762:				
9763:     -	1D86  18      	        DEFB    $18             ;;negate
9764:     -	1D87  2F      	        DEFB    $2F             ;;jump
9765:     -	1D88  03      	        DEFB    $03             ;;to L1D8B, CASES
9766:				
9767:				; ---
9768:				
9769:				;; SMALL
9770:33827+11	1D89  EF      	L1D89:  RST     28H             ;; FP-CALC
9771:     -	1D8A  A0      	        DEFB    $A0             ;;stk-zero
9772:				
9773:				;; CASES
9774:     -	1D8B  01      	L1D8B:  DEFB    $01             ;;exchange
9775:     -	1D8C  2D      	        DEFB    $2D             ;;duplicate
9776:     -	1D8D  2D      	        DEFB    $2D             ;;duplicate
9777:     -	1D8E  04      	        DEFB    $04             ;;multiply
9778:     -	1D8F  2D      	        DEFB    $2D             ;;duplicate
9779:     -	1D90  0F      	        DEFB    $0F             ;;addition
9780:     -	1D91  A1      	        DEFB    $A1             ;;stk-one
9781:     -	1D92  03      	        DEFB    $03             ;;subtract
9782:				
9783:     -	1D93  8C      	        DEFB    $8C             ;;series-0C
9784:     -	1D94  10      	        DEFB    $10             ;;Exponent: $60, Bytes: 1
9785:     -	1D95  B2      	        DEFB    $B2             ;;(+00,+00,+00)
9786:     -	1D96  13      	        DEFB    $13             ;;Exponent: $63, Bytes: 1
9787:     -	1D97  0E      	        DEFB    $0E             ;;(+00,+00,+00)
9788:     -	1D98  55      	        DEFB    $55             ;;Exponent: $65, Bytes: 2
9789:     -	1D99  E48D    	        DEFB    $E4,$8D         ;;(+00,+00)
9790:     -	1D9B  58      	        DEFB    $58             ;;Exponent: $68, Bytes: 2
9791:     -	1D9C  39BC    	        DEFB    $39,$BC         ;;(+00,+00)
9792:     -	1D9E  5B      	        DEFB    $5B             ;;Exponent: $6B, Bytes: 2
9793:     -	1D9F  98FD    	        DEFB    $98,$FD         ;;(+00,+00)
9794:     -	1DA1  9E      	        DEFB    $9E             ;;Exponent: $6E, Bytes: 3
9795:     -	1DA2  003675  	        DEFB    $00,$36,$75     ;;(+00)
9796:     -	1DA5  A0      	        DEFB    $A0             ;;Exponent: $70, Bytes: 3
9797:     -	1DA6  DBE8B4  	        DEFB    $DB,$E8,$B4     ;;(+00)
9798:     -	1DA9  63      	        DEFB    $63             ;;Exponent: $73, Bytes: 2
9799:     -	1DAA  42C4    	        DEFB    $42,$C4         ;;(+00,+00)
9800:     -	1DAC  E6      	        DEFB    $E6             ;;Exponent: $76, Bytes: 4
9801:     -	1DAD  B50936BE	        DEFB    $B5,$09,$36,$BE ;;
9802:     -	1DB1  E9      	        DEFB    $E9             ;;Exponent: $79, Bytes: 4
9803:     -	1DB2  36731B5D	        DEFB    $36,$73,$1B,$5D ;;
9804:     -	1DB6  EC      	        DEFB    $EC             ;;Exponent: $7C, Bytes: 4
9805:     -	1DB7  D8DE63BE	        DEFB    $D8,$DE,$63,$BE ;;
9806:     -	1DBB  F0      	        DEFB    $F0             ;;Exponent: $80, Bytes: 4
9807:     -	1DBC  61A1B30C	        DEFB    $61,$A1,$B3,$0C ;;
9808:				
9809:     -	1DC0  04      	        DEFB    $04             ;;multiply
9810:     -	1DC1  0F      	        DEFB    $0F             ;;addition
9811:     -	1DC2  34      	        DEFB    $34             ;;end-calc
9812:				
9813:33838+10	1DC3  C9      	        RET                     ; return.
9814:				
9815:				
9816:				; ---------------------
9817:				; THE 'ARCSIN' FUNCTION
9818:				; ---------------------
9819:				; (Offset $1F: 'asn')
9820:				;   The inverse sine function with result in radians.
9821:				;   Derived from arctan function above.
9822:				;   Error A unless the argument is between -1 and +1 inclusive.
9823:				;   Uses an adaptation of the formula asn(x) = atn(x/sqr(1-x*x))
9824:				;
9825:				;
9826:				;                 /|
9827:				;                / |
9828:				;              1/  |x
9829:				;              /a  |
9830:				;             /----|    
9831:				;               y
9832:				;
9833:				;   e.g. We know the opposite side (x) and hypotenuse (1) 
9834:				;   and we wish to find angle a in radians.
9835:				;   We can derive length y by Pythagoras and then use ATN instead. 
9836:				;   Since y*y + x*x = 1*1 (Pythagoras Theorem) then
9837:				;   y=sqr(1-x*x)                         - no need to multiply 1 by itself.
9838:				;   So, asn(a) = atn(x/y)
9839:				;   or more fully,
9840:				;   asn(a) = atn(x/sqr(1-x*x))
9841:				
9842:				;   Close but no cigar.
9843:				
9844:				;   While PRINT ATN (x/SQR (1-x*x)) gives the same results as PRINT ASN x,
9845:				;   it leads to division by zero when x is 1 or -1.
9846:				;   To overcome this, 1 is added to y giving half the required angle and the 
9847:				;   result is then doubled. 
9848:				;   That is, PRINT ATN (x/(SQR (1-x*x) +1)) *2
9849:				;
9850:				;
9851:				;               . /|
9852:				;            .  c/ |
9853:				;         .     /1 |x
9854:				;      . c   b /a  |
9855:				;    ---------/----|    
9856:				;      1      y
9857:				;
9858:				;   By creating an isosceles triangle with two equal sides of 1, angles c and 
9859:				;   c are also equal. If b+c+d = 180 degrees and b+a = 180 degrees then c=a/2.
9860:				;
9861:				;   A value higher than 1 gives the required error as attempting to find  the
9862:				;   square root of a negative number generates an error in Sinclair BASIC.
9863:				
9864:				;; asn
9865:33848+11	1DC4  EF      	L1DC4:  RST     28H             ;; FP-CALC      x.
9866:     -	1DC5  2D      	        DEFB    $2D             ;;duplicate     x, x.
9867:     -	1DC6  2D      	        DEFB    $2D             ;;duplicate     x, x, x.
9868:     -	1DC7  04      	        DEFB    $04             ;;multiply      x, x*x.
9869:     -	1DC8  A1      	        DEFB    $A1             ;;stk-one       x, x*x, 1.
9870:     -	1DC9  03      	        DEFB    $03             ;;subtract      x, x*x-1.
9871:     -	1DCA  18      	        DEFB    $18             ;;negate        x, 1-x*x.
9872:     -	1DCB  25      	        DEFB    $25             ;;sqr           x, sqr(1-x*x) = y.
9873:     -	1DCC  A1      	        DEFB    $A1             ;;stk-one       x, y, 1.
9874:     -	1DCD  0F      	        DEFB    $0F             ;;addition      x, y+1.
9875:     -	1DCE  05      	        DEFB    $05             ;;division      x/y+1.
9876:     -	1DCF  21      	        DEFB    $21             ;;atn           a/2     (half the angle)
9877:     -	1DD0  2D      	        DEFB    $2D             ;;duplicate     a/2, a/2.
9878:     -	1DD1  0F      	        DEFB    $0F             ;;addition      a.
9879:     -	1DD2  34      	        DEFB    $34             ;;end-calc      a.
9880:				
9881:33859+10	1DD3  C9      	        RET                     ; return.
9882:				
9883:				
9884:				; ------------------------
9885:				; THE 'ARCCOS' FUNCTION
9886:				; ------------------------
9887:				; (Offset $20: 'acs')
9888:				;   The inverse cosine function with the result in radians.
9889:				;   Error A unless the argument is between -1 and +1.
9890:				;   Result in range 0 to pi.
9891:				;   Derived from asn above which is in turn derived from the preceding atn. It 
9892:				;   could have been derived directly from atn using acs(x) = atn(sqr(1-x*x)/x).
9893:				;   However, as sine and cosine are horizontal translations of each other,
9894:				;   uses acs(x) = pi/2 - asn(x)
9895:				
9896:				;   e.g. the arccosine of a known x value will give the required angle b in 
9897:				;   radians.
9898:				;   We know, from above, how to calculate the angle a using asn(x). 
9899:				;   Since the three angles of any triangle add up to 180 degrees, or pi radians,
9900:				;   and the largest angle in this case is a right-angle (pi/2 radians), then
9901:				;   we can calculate angle b as pi/2 (both angles) minus asn(x) (angle a).
9902:				; 
9903:				;
9904:				;            /|
9905:				;         1 /b|
9906:				;          /  |x
9907:				;         /a  |
9908:				;        /----|    
9909:				;          y
9910:				
9911:				;; acs
9912:33869+11	1DD4  EF      	L1DD4:  RST     28H             ;; FP-CALC      x.
9913:     -	1DD5  1F      	        DEFB    $1F             ;;asn           asn(x).
9914:     -	1DD6  A3      	        DEFB    $A3             ;;stk-pi/2      asn(x), pi/2.
9915:     -	1DD7  03      	        DEFB    $03             ;;subtract      asn(x) - pi/2.
9916:     -	1DD8  18      	        DEFB    $18             ;;negate        pi/2 - asn(x) = acs(x).
9917:     -	1DD9  34      	        DEFB    $34             ;;end-calc      acs(x)
9918:				
9919:33880+10	1DDA  C9      	        RET                     ; return.
9920:				
9921:				
9922:				; --------------------------
9923:				; THE 'SQUARE ROOT' FUNCTION
9924:				; --------------------------
9925:				; (Offset $25: 'sqr')
9926:				;   Error A if argument is negative.
9927:				;   This routine is remarkable for its brevity - 7 bytes.
9928:				;   The ZX81 code was originally 9K and various techniques had to be
9929:				;   used to shoe-horn it into an 8K Rom chip.
9930:				
9931:				
9932:				;; sqr
9933:33890+11	1DDB  EF      	L1DDB:  RST     28H             ;; FP-CALC              x.
9934:     -	1DDC  2D      	        DEFB    $2D             ;;duplicate             x, x.
9935:     -	1DDD  2C      	        DEFB    $2C             ;;not                   x, 1/0
9936:     -	1DDE  00      	        DEFB    $00             ;;jump-true             x, (1/0).
9937:     -	1DDF  1E      	        DEFB    $1E             ;;to L1DFD, LAST        exit if argument zero
9938:				                                ;;                      with zero result.
9939:				
9940:				;   else continue to calculate as x ** .5
9941:				
9942:     -	1DE0  A2      	        DEFB    $A2             ;;stk-half              x, .5.
9943:     -	1DE1  34      	        DEFB    $34             ;;end-calc              x, .5.
9944:				
9945:				
9946:				; ------------------------------
9947:				; THE 'EXPONENTIATION' OPERATION
9948:				; ------------------------------
9949:				; (Offset $06: 'to-power')
9950:				;   This raises the first number X to the power of the second number Y.
9951:				;   As with the ZX80,
9952:				;   0 ** 0 = 1
9953:				;   0 ** +n = 0
9954:				;   0 ** -n = arithmetic overflow.
9955:				
9956:				;; to-power
9957:33901+11	1DE2  EF      	L1DE2:  RST     28H             ;; FP-CALC              X,Y.
9958:     -	1DE3  01      	        DEFB    $01             ;;exchange              Y,X.
9959:     -	1DE4  2D      	        DEFB    $2D             ;;duplicate             Y,X,X.
9960:     -	1DE5  2C      	        DEFB    $2C             ;;not                   Y,X,(1/0).
9961:     -	1DE6  00      	        DEFB    $00             ;;jump-true
9962:     -	1DE7  07      	        DEFB    $07             ;;forward to L1DEE, XISO if X is zero.
9963:				
9964:				;   else X is non-zero. function 'ln' will catch a negative value of X.
9965:				
9966:     -	1DE8  22      	        DEFB    $22             ;;ln                    Y, LN X.
9967:     -	1DE9  04      	        DEFB    $04             ;;multiply              Y * LN X
9968:     -	1DEA  34      	        DEFB    $34             ;;end-calc
9969:				
9970:33912+10	1DEB  C35B1C  	        JP      L1C5B           ; jump back to EXP routine.  ->
9971:				
9972:				; ---
9973:				
9974:				;   These routines form the three simple results when the number is zero.
9975:				;   begin by deleting the known zero to leave Y the power factor.
9976:				
9977:				;; XISO
9978:     -	1DEE  02      	L1DEE:  DEFB    $02             ;;delete                Y.
9979:     -	1DEF  2D      	        DEFB    $2D             ;;duplicate             Y, Y.
9980:     -	1DF0  2C      	        DEFB    $2C             ;;not                   Y, (1/0).
9981:     -	1DF1  00      	        DEFB    $00             ;;jump-true     
9982:     -	1DF2  09      	        DEFB    $09             ;;forward to L1DFB, ONE if Y is zero.
9983:				
9984:				;   the power factor is not zero. If negative then an error exists.
9985:				
9986:     -	1DF3  A0      	        DEFB    $A0             ;;stk-zero              Y, 0.
9987:     -	1DF4  01      	        DEFB    $01             ;;exchange              0, Y.
9988:     -	1DF5  33      	        DEFB    $33             ;;greater-0             0, (1/0).
9989:     -	1DF6  00      	        DEFB    $00             ;;jump-true             0
9990:     -	1DF7  06      	        DEFB    $06             ;;to L1DFD, LAST        if Y was any positive 
9991:				                                ;;                      number.
9992:				
9993:				;   else force division by zero thereby raising an Arithmetic overflow error.
9994:				;   There are some one and two-byte alternatives but perhaps the most formal
9995:				;   might have been to use end-calc; rst 08; defb 05.
9996:				
9997:     -	1DF8  A1      	        DEFB    $A1             ;;stk-one               0, 1.
9998:     -	1DF9  01      	        DEFB    $01             ;;exchange              1, 0.
9999:     -	1DFA  05      	        DEFB    $05             ;;division              1/0    >> error 
10000:				
10001:				; ---
10002:				
10003:				;; ONE
10004:     -	1DFB  02      	L1DFB:  DEFB    $02             ;;delete                .
10005:     -	1DFC  A1      	        DEFB    $A1             ;;stk-one               1.
10006:				
10007:				;; LAST
10008:     -	1DFD  34      	L1DFD:  DEFB    $34             ;;end-calc              last value 1 or 0.
10009:				
10010:33922+10	1DFE  C9      	        RET                     ; return.
10011:				
10012:				; ---------------------
10013:				; THE 'SPARE LOCATIONS'
10014:				; ---------------------
10015:				
10016:				;; SPARE
10017:     -	1DFF  FF      	L1DFF:  DEFB    $FF             ; That's all folks.
10018:				
10019:				
10020:				
10021:				; ------------------------
10022:				; THE 'ZX81 CHARACTER SET'
10023:				; ------------------------
10024:				
10025:				; Removed as this has no use in the ZARC system. The space is used for the code
10026:				; required to support the emulator. If required, this code could be placed in
10027:				; the "echo" of the ROM at 0x2000, but there is little advantage in this.
10028:     -	0001          	                assert $ = 0x1e00       ; This address must be maintained
10029:				;
10030:				; Execution will begin here from the emulator. This instruction must not be
10031:				; moved.
10032:				; C - command code (CTOE_xxx).
10033:				; Other registers except A and HL may contain parameters as required.
10034:33932+10	1E00  C3101E  	                jp to_em
10035:				;
10036:				; Jump here for the final return to the emulator in CP/M address space. This
10037:				; instruction must not be moved.
10038:33942+11	1E03  D304    	from_em_1       out (IOA_MMAP_0), a     ; Map bank 0 (in emulator space)
10039:				; Execution will continue here in CP/M space. The following instructions should
10040:				; never be executed.
10041:33953+4	1E05  F3      	                di
10042:33957+4	1E06  76      	                halt
10043:				;
10044:				; Jump here to transfer control to the emulator code in CP/M address space.
10045:				; C - command code (ETOC_xxx).
10046:				; Other registers except A and HL may contain parameters as required.
10047:33961+20	1E07  ED73A61E	from_em         ld (em_sp), sp
10048:33981+13	1E0B  3AA51E  	                ld a, (cpm_page0)       ; Fetch CP/M page for bank 0
10049:33994+12	1E0E  18F3    	                jr from_em_1
10050:				;
10051:				; The emulator has passed control to the emulated system.
10052:				; C - command code (CTOE_xxx).
10053:				; Other registers except A and HL may contain parameters as required.
10054:34006+20	1E10  ED7BA61E	to_em           ld sp, (em_sp)          ; Recover stack pointer
10055:34026+4	1E14  79      	                ld a, c                 ; Examine ETOC_xxx code
10056:34030+7	1E15  FE01    	                cp CTOE_RET             ; Return to caller?
10057:34037+5+6	1E17  C8      	                ret z
10058:34042+7	1E18  FE00    	                cp CTOE_RESET           ; Reset command?
10059:34049+7+5	1E1A  2802    	                jr z, em_reset
10060:34056+4	1E1C  F3      	                di
10061:34060+4	1E1D  76      	                halt                    ; Halt if we don't recognise the code
10062:				;
10063:				;
10064:				; Reset command.
10065:				; B - CP/M page for bank 0. This is required so we can return to the emulator.
10066:34064+4	1E1E  78      	em_reset        ld a, b
10067:34068+13	1E1F  32A51E  	                ld (cpm_page0), a       ; Save the CP/M page for bank 0
10068:34081+10	1E22  C30000  	                jp 0                    ; Reset the ZX81
10069:				;
10070:				;
10071:				; "Print" a character (from WRITE-CH at 083E). Note: WRITE-N/L at 0847 doesn't
10072:				; seem to write anything, it just sets the print position.
10073:				; A - character to print
10074:34091+11	1E25  C5      	em_write_ch     push bc
10075:34102+11	1E26  D5      	                push de
10076:34113+11	1E27  E5      	                push hl
10077:				;
10078:				; IX and IY are preserved in the emulator code.
10079:34124+4	1E28  47      	                ld b, a
10080:34128+20	1E29  ED5B3940	                ld de, ($4039)          ; Fetch print position
10081:				; B - ZX81 character to display.
10082:				; D - S_POSN_y (line number for PRINT position)
10083:				; E - S_POSN_x (column number for PRINT position)
10084:34148+7	1E2D  0E01    	                ld c, ETOC_DISP         ; Display character
10085:34155+17	1E2F  CD071E  	                call from_em            ; Return from emulator
10086:				;
10087:				; Execution continues here after CTOE_RET from the emulator code.
10088:34172+10	1E32  E1      	                pop hl
10089:34182+10	1E33  D1      	                pop de
10090:34192+10	1E34  C1      	                pop bc
10091:34202+23	1E35  FD3539  	                DEC     (IY+$39)        ; sv S_POSN_x (moved from 0843)
10092:34225+10	1E38  C9      	                ret                     ; Return to ZX81 code
10093:				;
10094:				;
10095:				; Wait for a keypress (from SLOW-DISP at 04CF). This is returned in LAST_K.
10096:34235+11	1E39  C5      	em_wait_key     push bc
10097:34246+11	1E3A  D5      	                push de
10098:34257+11	1E3B  E5      	                push hl
10099:				;
10100:				; IX and IY are preserved in the emulator code.
10101:34268+7	1E3C  0E04    	                ld c, ETOC_WAIT_KEY     ; Wait for a character from keyboard
10102:34275+17	1E3E  CD071E  	                call from_em            ; Return from emulator
10103:				;
10104:				; Execution continues here after CTOE_RET from the emulator code.
10105:				; DE - column / row code
10106:34292+20	1E41  ED532540	                ld ($4025), de          ; sv LAST_K
10107:34312+10	1E45  213B40  	                ld hl,$403B             ; system variable CDFLAG
10108:34322+15	1E48  CBC6    	                set 0, (HL)             ; Flag key pressed
10109:				;
10110:34337+10	1E4A  E1      	                pop hl
10111:34347+10	1E4B  D1      	                pop de
10112:34357+10	1E4C  C1      	                pop bc
10113:34367+10	1E4D  C9      	                ret                     ; Return to ZX81 code
10114:				;
10115:				;
10116:				; Emulate INKEY$ function (from 0FA1). Also used by break test below. This
10117:				; It is very slow, as it involves switching to the CP/M system which in turn
10118:				; calls the BIOS. Reading the serial port directly would be very much faster,
10119:				; but this would not support BIOS port redirection or future console devices.
10120:34377+11	1E4E  C5      	em_inkey        push bc
10121:34388+11	1E4F  D5      	                push de
10122:				;
10123:				; IX and IY are preserved in the emulator code.
10124:34399+7	1E50  0E03    	                ld c, ETOC_INKEY        ; Fetch keyboard state (DE)
10125:34406+17	1E52  CD071E  	                call from_em            ; Return from emulator
10126:				;
10127:				; Execution continues here after CTOE_RET from the emulator code.
10128:				; DE - column / row code, or 0xffff if no keypress was waiting.
10129:34423+4	1E55  62      	                ld h, d
10130:34427+4	1E56  6B      	                ld l, e
10131:				;
10132:34431+10	1E57  D1      	                pop de
10133:34441+10	1E58  C1      	                pop bc
10134:				; Return with column / row code in HL.
10135:34451+10	1E59  C9      	                ret                     ; Return to ZX81 code
10136:				;
10137:				;
10138:				; Emulate break key test (from 0F46). This isn't ideal, as it will read any
10139:				; pending key from the console input buffer.
10140:34461+11	1E5A  E5      	em_break        push hl
10141:				;
10142:34472+17	1E5B  CD4E1E  	                call em_inkey
10143:				; HL  - column / row code
10144:				; Test for space (0xfd7f).
10145:34489+7	1E5E  3EFD    	                ld a, 0xfd
10146:34496+4	1E60  BC      	                cp h
10147:34500+7+5	1E61  2005    	                jr nz, emb_no_break
10148:34507+7	1E63  3E7F    	                ld a, 0x7f
10149:34514+4	1E65  BD      	                cp l
10150:34518+7+5	1E66  2801    	                jr z, emb_exit          ; Return with carry reset if break
10151:				; Not a break.
10152:34525+4	1E68  37      	emb_no_break    scf                     ; Flag "no break"
10153:				;
10154:34529+10	1E69  E1      	emb_exit        pop hl
10155:34539+10	1E6A  C9      	                ret
10156:				;
10157:				;
10158:				; Load programme.
10159:				; DE - points to the name. This has bit 7 of the last character set.
10160:34549+11	1E6B  C5      	em_load         push bc
10161:34560+11	1E6C  D5      	                push de
10162:34571+11	1E6D  E5      	                push hl
10163:				;
10164:				; Save fast / slow mode state. This is to address a potential bug described in
10165:				; https://www.sinclairzxworld.com/viewtopic.php?t=333
10166:34582+13	1E6E  3A3B40  	                ld a, ($403B)           ; CDFLAG
10167:34595+13	1E71  32A81E  	                ld (em_cdflag), a
10168:				; IX and IY are preserved in the emulator code.
10169:				; DE - points to the name. This has bit 7 of the last character set.
10170:34608+7	1E74  0E06    	                ld c, ETOC_LOAD         ; Load BASIC programme
10171:34615+17	1E76  CD071E  	                call from_em            ; Return from emulator
10172:				;
10173:				; Execution continues here after CTOE_RET from the emulator code.
10174:				; B - zero if successful.
10175:				; Restore CDFLAG.
10176:34632+13	1E79  3AA81E  	                ld a, (em_cdflag)
10177:34645+13	1E7C  323B40  	                ld ($403B), a           ; CDFLAG
10178:				;
10179:34658+12	1E7F  1808    	                jr emls_exit            ; Continue as save does
10180:				;
10181:				;
10182:				; Save programme.
10183:				; DE - points to the name. This has bit 7 of the last character set.
10184:34670+11	1E81  C5      	em_save         push bc
10185:34681+11	1E82  D5      	                push de
10186:34692+11	1E83  E5      	                push hl
10187:				;
10188:				; IX and IY are preserved in the emulator code.
10189:				; DE - points to the name. This has bit 7 of the last character set.
10190:34703+7	1E84  0E05    	                ld c, ETOC_SAVE         ; Save BASIC programme
10191:34710+17	1E86  CD071E  	                call from_em            ; Return from emulator
10192:				;
10193:				; Execution continues here after CTOE_RET from the emulator code. Also used by
10194:				; the load routine.
10195:				; B - zero if successful.
10196:34727+10	1E89  E1      	emls_exit       pop hl
10197:34737+10	1E8A  D1      	                pop de
10198:				;
10199:34747+4	1E8B  78      	                ld a, b
10200:34751+4	1E8C  A7      	                and a
10201:34755+7+5	1E8D  2804    	                jr z, emls_ok
10202:				; Something went wrong. Return with "F - Invalid file name". This isn't
10203:				; necessarily accurate, but we have to report something. The ZX81 has no
10204:				; save or load I/O error code.
10205:34762+10	1E8F  C1      	                pop bc
10206:34772+10	1E90  C3F402  	                jp L02F4                ; Error REPORT-F
10207:				;
10208:34782+10	1E93  C1      	emls_ok         pop bc
10209:34792+10	1E94  C30702  	                jp L0207                ; Return via SLOW/FAST
10210:				;
10211:				;
10212:				; Scroll. Goes here after the Sinclair code.
10213:34802+11	1E97  C5      	em_scroll       push bc
10214:34813+11	1E98  D5      	                push de
10215:34824+11	1E99  E5      	                push hl
10216:				;
10217:				; IX and IY are preserved in the emulator code.
10218:34835+7	1E9A  0E02    	                ld c, ETOC_SCROLL       ; Scroll the display
10219:34842+17	1E9C  CD071E  	                call from_em            ; Return from emulator
10220:				;
10221:				; Execution continues here after CTOE_RET from the emulator code.
10222:34859+10	1E9F  E1      	                pop hl
10223:34869+10	1EA0  D1      	                pop de
10224:34879+10	1EA1  C1      	                pop bc
10225:				; Return to original code.
10226:34889+10	1EA2  C35D0A  	                jp L0A5D                ; to RECLAIM-1
10227:				;
10228:				;
10229:				;
10230:				; *************
10231:				; * Variables *
10232:				; *************
10233:				;
10234:				;
10235:				; These are stored in code space as we don't have any reason to differentiate
10236:				; between code and data in this case.
10237:     -	1EA5          	cpm_page0       defs 1              ; CP/M page for bank 0
10238:     -	1EA6          	em_sp           defs 2              ; Emulated machine stack pointer
10239:     -	1EA8          	em_cdflag       defs 1              ; Saved CDFLAG state
10240:				;
10241:     -	1EA9          	                end



Statistics:

     4	passes
     0	jr promotions
   820	symbols
  7810	bytes

    49	macro calls
  1320	macro bytes
     0	invented symbols



Symbol Table:

BREAK_CHAR     =03        3
CTOE_RESET     =00        0
CTOE_RET       =01        1
CTOE_SIZE      =07        7
EM_ROM_SIZE    =4000      16384
EM_ROM_START   =00        0
EM_XFER_START  =1E00      7680
ETOC_DISP      =01        1
ETOC_EXIT      =00        0
ETOC_INKEY     =03        3
ETOC_LOAD      =06        6
ETOC_SAVE      =05        5
ETOC_SCROLL    =02        2
ETOC_WAIT_KEY  =04        4
HEAP_TOP       =7FFF      32767
I2C_CSR_ACKN_BIT=00        0
I2C_CSR_ACKN_MASK=01        1
I2C_CSR_BUSY_BIT=07        7
I2C_CSR_BUSY_MASK=80        128
I2C_CSR_START_BIT=01        1
I2C_CSR_START_MASK=02        2
I2C_CSR_STOP_BIT=02        2
I2C_CSR_STOP_MASK=04        4
INTS_NUM       =08        8
INT_SER1_RX_BIT=01        1
INT_SER1_RX_MASK=02        2
INT_SER1_TX_BIT=00        0
INT_SER1_TX_MASK=01        1
INT_SER2_RX_BIT=03        3
INT_SER2_RX_MASK=08        8
INT_SER2_TX_BIT=02        2
INT_SER2_TX_MASK=04        4
INT_TICK_BIT   =04        4
INT_TICK_MASK  =10        16
IOA_CONTROL    =02        2
IOA_CRC_0      =24        36
IOA_CRC_1      =25        37
IOA_CRC_DATA   =26        38
IOA_FPGA_MAJREV=00        0
IOA_FPGA_MINREV=01        1
IOA_FP_SW      =03        3
IOA_I2C_CSR    =18        24
IOA_I2C_DATA   =19        25
IOA_INT_EN     =08        8
IOA_INT_PEND   =0A        10
IOA_MMAP_0     =04        4
IOA_MMAP_1     =05        5
IOA_MMAP_2     =06        6
IOA_MMAP_3     =07        7
IOA_NMI_REASONS=0C        12
IOA_SER1_CSR   =10        16
IOA_SER1_DATA  =11        17
IOA_SER2_CSR   =12        18
IOA_SER2_DATA  =13        19
IOA_SPI_CSR    =20        32
IOA_SPI_DATA   =21        33
L0000           00        0
L0008           08        8
L0010           10        16
L0018           18        24
L001C           1C        28
L0020           20        32
L0028           28        40
L002B           2B        43
L0030           30        48
L0038           38        56
L0041           41        65
L0045           45        69
L0049           49        73
L004C           4C        76
L004D           4D        77
L0056           56        86
L0058           58        88
L0066           66        102
L006D           6D        109
L006F           6F        111
L007E           7E        126
L00A5           A5        165
L00CC           CC        204
L00F3           F3        243
L0111            111      273
L01FC            1FC      508
L0207            207      519
L0216            216      534
L0226            226      550
L0229            229      553
L022D            22D      557
L0237            237      567
L0239            239      569
L023E            23E      574
L0264            264      612
L026A            26A      618
L0281            281      641
L028B            28B      651
L028F            28F      655
L0292            292      658
L02A9            2A9      681
L02B5            2B5      693
L02BB            2BB      699
L02C5            2C5      709
L02E7            2E7      743
L02F4            2F4      756
L02F6            2F6      758
L031E            31E      798
L0320            320      800
L0329            329      809
L032D            32D      813
L0332            332      818
L0336            336      822
L033B            33B      827
L0340            340      832
L0347            349      841
L034C            34C      844
L034E            34E      846
L0350            350      848
L0361            361      865
L0366            366      870
L0371            371      881
L037B            37B      891
L0385            385      901
L0388            388      904
L038A            38A      906
L039C            39C      924
L03A2            3A2      930
L03A6            3A6      934
L03A8            3A8      936
L03C3            3C3      963
L03CB            3CB      971
L03CF            3CF      975
L03D5            3D5      981
L03E2            3E2      994
L03E5            3E5      997
L0408            408      1032
L0413            413      1043
L0419            419      1049
L042D            42D      1069
L0433            433      1075
L0454            454      1108
L0457            457      1111
L0464            464      1124
L046F            46F      1135
L0472            472      1138
L0475            475      1141
L0482            482      1154
L0487            487      1159
L048A            48A      1162
L04B1            4B1      1201
L04C1            4C1      1217
L04CF            4CF      1231
L04DF            4DF      1247
L04F2            4F2      1266
L04F7            4F7      1271
L0505            505      1285
L0508            508      1288
L0515            515      1301
L0516            516      1302
L051B            51B      1307
L0523            523      1315
L0526            526      1318
L052B            52B      1323
L052D            52D      1325
L0537            537      1335
L0540            540      1344
L0544            544      1348
L0556            556      1366
L055C            55C      1372
L0562            562      1378
L0576            576      1398
L057F            57F      1407
L0588            588      1416
L0589            589      1417
L058B            58B      1419
L0593            593      1427
L059D            59D      1437
L059F            59F      1439
L05AF            5AF      1455
L05B7            5B7      1463
L05BB            5BB      1467
L05C4            5C4      1476
L060C            60C      1548
L0626            626      1574
L0629            629      1577
L064E            64E      1614
L0661            661      1633
L0664            664      1636
L066C            66C      1644
L06AE            6AE      1710
L06CA            6CA      1738
L06D1            6D1      1745
L06E0            6E0      1760
L0705            705      1797
L072C            72C      1836
L0730            730      1840
L073E            73E      1854
L0740            740      1856
L0745            745      1861
L0755            755      1877
L0766            766      1894
L076D            76D      1901
L077C            77C      1916
L079A            79A      1946
L079D            79D      1949
L07AA            7AA      1962
L07B4            7B4      1972
L07BD            7BD      1981
L07C7            7C7      1991
L07DC            7DC      2012
L07E1            7E1      2017
L07E2            7E2      2018
L07EB            7EB      2027
L07EE            7EE      2030
L07F1            7F1      2033
L07F5            7F5      2037
L0802            802      2050
L0805            805      2053
L0808            808      2056
L0812            812      2066
L082C            82C      2092
L0835            835      2101
L083A            83A      2106
L083E            83E      2110
L0847            847      2119
L0851            851      2129
L0869            869      2153
L0871            871      2161
L0876            876      2166
L087A            87A      2170
L087D            87D      2173
L0880            880      2176
L0888            888      2184
L088A            88A      2186
L089C            89C      2204
L08B5            8B5      2229
L08BA            8BA      2234
L08C7            8C7      2247
L08DE            8DE      2270
L08E2            8E2      2274
L08E9            8E9      2281
L08F5            8F5      2293
L08FA            8FA      2298
L0905            905      2309
L090B            90B      2315
L0918            918      2328
L0927            927      2343
L0940            940      2368
L094B            94B      2379
L0959            959      2393
L096D            96D      2413
L0975            975      2421
L097F            97F      2431
L0985            985      2437
L0992            992      2450
L0993            993      2451
L099B            99B      2459
L099E            99E      2462
L09AD            9AD      2477
L09B4            9B4      2484
L09C8            9C8      2504
L09D8            9D8      2520
L09DE            9DE      2526
L09EA            9EA      2538
L09F2            9F2      2546
L0A01            A01      2561
L0A08            A08      2568
L0A0F            A0F      2575
L0A10            A10      2576
L0A15            A15      2581
L0A17            A17      2583
L0A1F            A1F      2591
L0A2A            A2A      2602
L0A2C            A2C      2604
L0A42            A42      2626
L0A52            A52      2642
L0A5D            A5D      2653
L0A60            A60      2656
L0A73            A73      2675
L0A91            A91      2705
L0A98            A98      2712
L0AA5            AA5      2725
L0AAD            AAD      2733
L0ABF            ABF      2751
L0AC5            AC5      2757
L0ACB            ACB      2763
L0ACF            ACF      2767
L0AD5            AD5      2773
L0AFA            AFA      2810
L0B1E            B1E      2846
L0B31            B31      2865
L0B37            B37      2871
L0B44            B44      2884
L0B4E            B4E      2894
L0B55            B55      2901
L0B64            B64      2916
L0B66            B66      2918
L0B67            B67      2919
L0B6B            B6B      2923
L0B84            B84      2948
L0B8B            B8B      2955
L0BA4            BA4      2980
L0BAB            BAB      2987
L0BAF            BAF      2991
L0BC5            BC5      3013
L0BCA            BCA      3018
L0BD9            BD9      3033
L0BDA            BDA      3034
L0BE9            BE9      3049
L0BEB            BEB      3051
L0BF1            BF1      3057
L0BF5            BF5      3061
L0C02            C02      3074
L0C0E            C0E      3086
L0C29            C29      3113
L0C48            C48      3144
L0C4B            C4B      3147
L0C4F            C4F      3151
L0C54            C54      3156
L0C58            C58      3160
L0C5B            C5B      3163
L0C5E            C5E      3166
L0C66            C66      3174
L0C6A            C6A      3178
L0C6D            C6D      3181
L0C71            C71      3185
L0C74            C74      3188
L0C77            C77      3191
L0C7A            C7A      3194
L0C7D            C7D      3197
L0C80            C80      3200
L0C86            C86      3206
L0C89            C89      3209
L0C8C            C8C      3212
L0C8F            C8F      3215
L0C92            C92      3218
L0C95            C95      3221
L0C98            C98      3224
L0C9E            C9E      3230
L0CA4            CA4      3236
L0CA7            CA7      3239
L0CAB            CAB      3243
L0CAE            CAE      3246
L0CB1            CB1      3249
L0CB4            CB4      3252
L0CB7            CB7      3255
L0CBA            CBA      3258
L0CC1            CC1      3265
L0CDC            CDC      3292
L0CDE            CDE      3294
L0CF4            CF4      3316
L0CF7            CF7      3319
L0D10            D10      3344
L0D16            D16      3350
L0D1D            D1D      3357
L0D22            D22      3362
L0D26            D26      3366
L0D28            D28      3368
L0D2D            D2D      3373
L0D2E            D2E      3374
L0D3A            D3A      3386
L0D3C            D3C      3388
L0D3F            D3F      3391
L0D4B            D4B      3403
L0D4D            D4D      3405
L0D63            D63      3427
L0D6A            D6A      3434
L0D6B            D6B      3435
L0D6F            D6F      3439
L0D85            D85      3461
L0D92            D92      3474
L0D9A            D9A      3482
L0D9C            D9C      3484
L0DA6            DA6      3494
L0DAB            DAB      3499
L0DB6            DB6      3510
L0DB9            DB9      3513
L0DC6            DC6      3526
L0DCC            DCC      3532
L0DEA            DEA      3562
L0E0E            E0E      3598
L0E2A            E2A      3626
L0E2E            E2E      3630
L0E58            E58      3672
L0E5A            E5A      3674
L0E62            E62      3682
L0E69            E69      3689
L0E6C            E6C      3692
L0E77            E77      3703
L0E7C            E7C      3708
L0E81            E81      3713
L0E86            E86      3718
L0E92            E92      3730
L0E9B            E9B      3739
L0EA7            EA7      3751
L0EAD            EAD      3757
L0EAF            EAF      3759
L0EB5            EB5      3765
L0EC5            EC5      3781
L0ED3            ED3      3795
L0ED8            ED8      3800
L0EE5            EE5      3813
L0EE9            EE9      3817
L0F05            F05      3845
L0F14            F14      3860
L0F21            F21      3873
L0F23            F23      3875
L0F2B            F2B      3883
L0F32            F32      3890
L0F46            F46      3910
L0F4B            F4B      3915
L0F55            F55      3925
L0F59            F59      3929
L0F8A            F8A      3978
L0F8C            F8C      3980
L0F99            F99      3993
L0F9D            F9D      3997
L0FB2            FB2      4018
L0FD6            FD6      4054
L0FE0            FE0      4064
L0FE3            FE3      4067
L0FED            FED      4077
L0FF8            FF8      4088
L0FFB            FFB      4091
L0FFF            FFF      4095
L1002           1002      4098
L101A           101A      4122
L1020           1020      4128
L1025           1025      4133
L1047           1047      4167
L106F           106F      4207
L1083           1083      4227
L1087           1087      4231
L1088           1088      4232
L1098           1098      4248
L10A7           10A7      4263
L10B5           10B5      4277
L10BC           10BC      4284
L10D5           10D5      4309
L10DB           10DB      4315
L10DE           10DE      4318
L10EA           10EA      4330
L10ED           10ED      4333
L1102           1102      4354
L110A           110A      4362
L110F           110F      4367
L111C           111C      4380
L1139           1139      4409
L1143           1143      4419
L1148           1148      4424
L1156           1156      4438
L1159           1159      4441
L116B           116B      4459
L116C           116C      4460
L117F           117F      4479
L1180           1180      4480
L1188           1188      4488
L118A           118A      4490
L1194           1194      4500
L1195           1195      4501
L1199           1199      4505
L11A1           11A1      4513
L11A7           11A7      4519
L11B2           11B2      4530
L11BF           11BF      4543
L11D1           11D1      4561
L11D4           11D4      4564
L11E9           11E9      4585
L11F1           11F1      4593
L11F8           11F8      4600
L11FB           11FB      4603
L120C           120C      4620
L1223           1223      4643
L1231           1231      4657
L1233           1233      4659
L123D           123D      4669
L1256           1256      4694
L1259           1259      4697
L125A           125A      4698
L1263           1263      4707
L128B           128B      4747
L1292           1292      4754
L12A5           12A5      4773
L12B9           12B9      4793
L12BE           12BE      4798
L12C2           12C2      4802
L12C3           12C3      4803
L12DD           12DD      4829
L12DE           12DE      4830
L12F9           12F9      4857
L12FC           12FC      4860
L12FF           12FF      4863
L1305           1305      4869
L1311           1311      4881
L131A           131A      4890
L131D           131D      4893
L1321           1321      4897
L132D           132D      4909
L132E           132E      4910
L134B           134B      4939
L1359           1359      4953
L1361           1361      4961
L136E           136E      4974
L137A           137A      4986
L13A3           13A3      5027
L13AB           13AB      5035
L13AE           13AE      5038
L13B7           13B7      5047
L13C8           13C8      5064
L13CE           13CE      5070
L13E7           13E7      5095
L13F8           13F8      5112
L1409           1409      5129
L140C           140C      5132
L141C           141C      5148
L1426           1426      5158
L1434           1434      5172
L1435           1435      5173
L147F           147F      5247
L1488           1488      5256
L149A           149A      5274
L14A3           14A3      5283
L14A6           14A6      5286
L14A9           14A9      5289
L14AD           14AD      5293
L14BC           14BC      5308
L14C7           14C7      5319
L14CE           14CE      5326
L14D2           14D2      5330
L14D4           14D4      5332
L14D9           14D9      5337
L14E5           14E5      5349
L14F5           14F5      5365
L1508           1508      5384
L1509           1509      5385
L1511           1511      5393
L1514           1514      5396
L151D           151D      5405
L1520           1520      5408
L1536           1536      5430
L1548           1548      5448
L154D           154D      5453
L155A           155A      5466
L1560           1560      5472
L157A           157A      5498
L157D           157D      5501
L1583           1583      5507
L1584           1584      5508
L1587           1587      5511
L158A           158A      5514
L1595           1595      5525
L15AF           15AF      5551
L15B5           15B5      5557
L15BC           15BC      5564
L15C6           15C6      5574
L15CD           15CD      5581
L15D9           15D9      5593
L15DB           15DB      5595
L15EA           15EA      5610
L15F0           15F0      5616
L1615           1615      5653
L162C           162C      5676
L1639           1639      5689
L164B           164B      5707
L165B           165B      5723
L165F           165F      5727
L167B           167B      5755
L1682           1682      5762
L1698           1698      5784
L169A           169A      5786
L169E           169E      5790
L16AD           16AD      5805
L16B2           16B2      5810
L16BA           16BA      5818
L16BF           16BF      5823
L16C2           16C2      5826
L16C8           16C8      5832
L16D0           16D0      5840
L16D8           16D8      5848
L16EC           16EC      5868
L16F7           16F7      5879
L171A           171A      5914
L1722           1722      5922
L1736           1736      5942
L1738           1738      5944
L1741           1741      5953
L174A           174A      5962
L174C           174C      5964
L1755           1755      5973
L1769           1769      5993
L1790           1790      6032
L17B3           17B3      6067
L17B7           17B7      6071
L17B9           17B9      6073
L17BC           17BC      6076
L17C6           17C6      6086
L17E7           17E7      6119
L17EE           17EE      6126
L17F8           17F8      6136
L180E           180E      6158
L1810           1810      6160
L1819           1819      6169
L1824           1824      6180
L1828           1828      6184
L182C           182C      6188
L1830           1830      6192
L1831           1831      6193
L183F           183F      6207
L1841           1841      6209
L1859           1859      6233
L1868           1868      6248
L1880           1880      6272
L1882           1882      6274
L18A2           18A2      6306
L18AB           18AB      6315
L18B2           18B2      6322
L18C2           18C2      6338
L18C9           18C9      6345
L18CA           18CA      6346
L18E4           18E4      6372
L18EF           18EF      6383
L18F4           18F4      6388
L1900           1900      6400
L1905           1905      6405
L190C           190C      6412
L1912           1912      6418
L1915           1915      6421
L1918           1918      6424
L191A           191A      6426
L191C           191C      6428
L1921           1921      6433
L1923           1923      6435
L199D           199D      6557
L19A0           19A0      6560
L19A4           19A4      6564
L19A7           19A7      6567
L19AE           19AE      6574
L19C2           19C2      6594
L19CE           19CE      6606
L19D0           19D0      6608
L19E3           19E3      6627
L19E4           19E4      6628
L19EB           19EB      6635
L19F6           19F6      6646
L19FC           19FC      6652
L19FE           19FE      6654
L1A14           1A14      6676
L1A27           1A27      6695
L1A2D           1A2D      6701
L1A2E           1A2E      6702
L1A3C           1A3C      6716
L1A45           1A45      6725
L1A51           1A51      6737
L1A63           1A63      6755
L1A72           1A72      6770
L1A74           1A74      6772
L1A7F           1A7F      6783
L1A89           1A89      6793
L1AA0           1AA0      6816
L1AAA           1AAA      6826
L1AAF           1AAF      6831
L1ABE           1ABE      6846
L1AC2           1AC2      6850
L1AC5           1AC5      6853
L1ACE           1ACE      6862
L1AD5           1AD5      6869
L1ADB           1ADB      6875
L1ADC           1ADC      6876
L1AE0           1AE0      6880
L1AE3           1AE3      6883
L1AED           1AED      6893
L1AF3           1AF3      6899
L1AF8           1AF8      6904
L1B03           1B03      6915
L1B0B           1B0B      6923
L1B16           1B16      6934
L1B21           1B21      6945
L1B2C           1B2C      6956
L1B33           1B33      6963
L1B3A           1B3A      6970
L1B3D           1B3D      6973
L1B4D           1B4D      6989
L1B50           1B50      6992
L1B54           1B54      6996
L1B62           1B62      7010
L1B7D           1B7D      7037
L1B85           1B85      7045
L1B8F           1B8F      7055
L1BA2           1BA2      7074
L1BA4           1BA4      7076
L1BD5           1BD5      7125
L1C06           1C06      7174
L1C0E           1C0E      7182
L1C11           1C11      7185
L1C17           1C17      7191
L1C23           1C23      7203
L1C24           1C24      7204
L1C2B           1C2B      7211
L1C2F           1C2F      7215
L1C37           1C37      7223
L1C46           1C46      7238
L1C4E           1C4E      7246
L1C59           1C59      7257
L1C5B           1C5B      7259
L1C99           1C99      7321
L1C9B           1C9B      7323
L1CA2           1CA2      7330
L1CA4           1CA4      7332
L1CA9           1CA9      7337
L1CAF           1CAF      7343
L1CB1           1CB1      7345
L1CD2           1CD2      7378
L1D18           1D18      7448
L1D35           1D35      7477
L1D3C           1D3C      7484
L1D3E           1D3E      7486
L1D49           1D49      7497
L1D4B           1D4B      7499
L1D6E           1D6E      7534
L1D76           1D76      7542
L1D89           1D89      7561
L1D8B           1D8B      7563
L1DC4           1DC4      7620
L1DD4           1DD4      7636
L1DDB           1DDB      7643
L1DE2           1DE2      7650
L1DEE           1DEE      7662
L1DFB           1DFB      7675
L1DFD           1DFD      7677
L1DFF           1DFF      7679
MMAP_BANK0_END =3FFF      16383
MMAP_BANK0_START=00        0
MMAP_BANK1_END =7FFF      32767
MMAP_BANK1_START=4000      16384
MMAP_BANK2_END =BFFF      49151
MMAP_BANK2_START=8000      32768
MMAP_BANK3_END =FFFF      65535
MMAP_BANK3_START=C000      49152
MMAP_BANKS     =04        4
MMAP_MON_B0_PAGE=3F        63
MMAP_MON_B1_PAGE=3E        62
MMAP_PAGES     =40        64
MMAP_PAGE_MASK =3F        63
MMAP_PAGE_SIZE =4000      16384
MMAP_PROT_BIT  =07        7
MMAP_PROT_MASK =80        128
MMAP_SUPER_BIT =06        6
MMAP_SUPER_MASK=40        64
MMAP_ZX81_PAGES=04        4
MON_VIS_VAR    =8000      32768
MPA_NAME_LEN   =04        4
MVV_PAGE_NAME  =00        0
MVV_SIZE       =04        4
NMI_PROT_VIOL_BIT=01        1
NMI_PROT_VIOL_MASK=02        2
NMI_REASONS_ALL=0F        15
NMI_REASONS_NUM=04        4
NMI_SUPER_VIOL_BIT=02        2
NMI_SUPER_VIOL_MASK=04        4
NMI_SWITCH_BIT =00        0
NMI_SWITCH_MASK=01        1
NMI_TRACE_BIT  =03        3
NMI_TRACE_MASK =08        8
SER_CSR_FRAME_ERR_BIT=03        3
SER_CSR_FRAME_ERR_MASK=08        8
SER_CSR_RX_ALHALF_BIT=01        1
SER_CSR_RX_ALHALF_MASK=02        2
SER_CSR_RX_EMPTY_BIT=00        0
SER_CSR_RX_EMPTY_MASK=01        1
SER_CSR_RX_FULL_BIT=02        2
SER_CSR_RX_FULL_MASK=04        4
SER_CSR_TX_ALHALF_BIT=05        5
SER_CSR_TX_ALHALF_MASK=20        32
SER_CSR_TX_EMPTY_BIT=04        4
SER_CSR_TX_EMPTY_MASK=10        16
SER_CSR_TX_FULL_BIT=06        6
SER_CSR_TX_FULL_MASK=40        64
SPI_CSR_BUSY_BIT=07        7
SPI_CSR_BUSY_MASK=80        128
SPI_CSR_FAST_BIT=00        0
SPI_CSR_FAST_MASK=01        1
SPI_CSR_MC_SS_BIT=01        1
SPI_CSR_MC_SS_MASK=02        2
STACKS_SIZE    =40        64
STACK_SIZE     =40        64
SYSCTRL_MAPARM_BIT=03        3
SYSCTRL_MAPARM_MASK=08        8
SYSCTRL_MMAPN_BIT=04        4
SYSCTRL_MMAPN_MASK=10        16
SYSCTRL_MMAP_BIT=01        1
SYSCTRL_MMAP_MASK=02        2
SYSCTRL_NMCLR_BIT=02        2
SYSCTRL_NMCLR_MASK=04        4
SYSCTRL_RESERVED_BIT=07        7
SYSCTRL_RESERVED_MASK=80        128
SYSCTRL_TRARM_BIT=00        0
SYSCTRL_TRARM_MASK=01        1
SYSCTRL_TRPRE0_BIT=05        5
SYSCTRL_TRPRE0_MASK=20        32
SYSCTRL_TRPRE1_BIT=06        6
SYSCTRL_TRPRE1_MASK=40        64
ZX81_E_LINE    =4014      16404
ZX81_VERSN     =4009      16393
cpm_page0       1EA5      7845
em_break        1E5A      7770
em_cdflag       1EA8      7848
em_inkey        1E4E      7758
em_load         1E6B      7787
em_reset        1E1E      7710
em_save         1E81      7809
em_scroll       1E97      7831
em_sp           1EA6      7846
em_wait_key     1E39      7737
em_write_ch     1E25      7717
emb_exit        1E69      7785
emb_no_break    1E68      7784
emls_exit       1E89      7817
emls_ok         1E93      7827
enum_counter   =07        7
from_em         1E07      7687
from_em_1       1E03      7683
str_offset     =04        4
to_em           1E10      7696
